<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Data4Net</name>
    </assembly>
    <members>
        <member name="T:Data4Net.Ado.AdoHelper">
            <summary>
            The AdoHelper class is intended to encapsulate high performance, scalable best practices for 
            common data access uses.   It uses the Abstract Factory pattern to be easily extensible
            to any ADO.NET provider.  The current implementation provides helpers for SQL Server, ODBC,
            OLEDB, and Oracle.
            </summary>
        </member>
        <member name="T:Data4Net.Ado.AdoHelper.AdoConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by AdoHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Data4Net.Ado.AdoHelper.AdoConnectionOwnership.Internal">
            <summary>Connection is owned and managed by ADOHelper</summary>
        </member>
        <member name="F:Data4Net.Ado.AdoHelper.AdoConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="F:Data4Net.Ado.AdoHelper.m_rowUpdating">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="F:Data4Net.Ado.AdoHelper.m_rowUpdated">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetConnection(System.String)">
            <summary>
            Returns an IDbConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An IDbConnection object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetDataAdapter">
            <summary>
            Returns an IDbDataAdapter object
            </summary>
            <returns>The IDbDataAdapter</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetParameter">
            <summary>
            Returns an IDataParameter object
            </summary>
            <returns>The IDataParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(command);
            </code></example>
            <param name="cmd">The IDbCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AddUpdateEventHandlers(System.Data.IDbDataAdapter,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of IDataParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of IDataParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:Data4Net.Ado.AdoHelper.RowUpdatingHandler">
            <summary>
            Delegate for creating a RowUpdatingEvent handler
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The RowUpdatingEventArgs for the event</param>
        </member>
        <member name="T:Data4Net.Ado.AdoHelper.RowUpdatedHandler">
            <summary>
            Delegate for creating a RowUpdatedEvent handler
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The RowUpdatedEventArgs for the event</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateHelper(System.String,System.String)">
            <summary>
            Create an AdoHelper for working with a specific provider (i.e. Sql, Odbc, OleDb, Oracle)
            </summary>
            <param name="providerAssembly">Assembly containing the specified helper subclass</param>
            <param name="providerType">Specific type of the provider</param>
            <returns>An AdoHelper instance of the specified type</returns>
            <example><code>
            AdoHelper helper = AdoHelper.CreateHelper("GotDotNet.ApplicationBlocks.Data", "GotDotNet.ApplicationBlocks.Data.OleDb");
            </code></example>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateHelper(System.String)">
            <summary>
            Create an AdoHelper instance for working with a specific provider by using a providerAlias specified in the App.Config file.
            </summary>
            <param name="providerAlias">The alias to look up</param>
            <returns>An AdoHelper instance of the specified type</returns>
            <example><code>
            AdoHelper helper = AdoHelper.CreateHelper("OracleHelper");
            </code></example>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetParameter(System.String,System.Object)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="value">The value of the specified parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="direction">The System.Data.ParameterDirection of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetParameter(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="sourceColumn">The source column of the parameter</param>
            <param name="sourceVersion">The System.Data.DataRowVersion of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AttachParameters(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method is used to attach array of IDataParameters to an IDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of IDataParameterParameters to be added to command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This method cleans up the parameter syntax for the provider
            </summary>
            <param name="command">The IDbCommand containing the parameters to clean up.</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The IDbCommand to be prepared</param>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ClearCommand(System.Data.IDbCommand)">
            <summary>
            This method clears (if necessary) the connection, transaction, command type and parameters 
            from the provided command
            </summary>
            <remarks>
            Not implemented here because the behavior of this method differs on each data provider. 
            </remarks>
            <param name="command">The IDbCommand to be cleared</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <returns>A DataSet containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new IDbParameter("@prodid", 24));
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDataset(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbCommand,Data4Net.Ado.AdoHelper.AdoConnectionOwnership)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <param name="connectionOwnership">Enum indicating whether the connection was created internally or externally.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],Data4Net.Ado.AdoHelper.AdoConnectionOwnership)">
            <summary>
            Create and prepare an IDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by AdoHelper</param>
            <returns>IDataReader containing the results of the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, "GetOrderCount", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the transaction is rolled back or commmitted</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", GetParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(tran, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(tran, CommandType.StoredProcedure, "GetOrders", GetParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReaderTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReaderTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteXmlReaderTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbCommand,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            helper.FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            helper.FillDataset(tran, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(tran, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.FillDataset(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Private helper method that execute an IDbCommand (that returns a resultset) against the specified IDbTransaction and IDbConnection
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.RowUpdating(System.Object,System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            This method consumes the RowUpdatingEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.RowUpdated(System.Object,System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            This method consumes the RowUpdatedEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.SetCommand(System.Data.IDbCommand,System.Boolean@)">
            <summary>
            Set up a command for updating a DataSet.
            </summary>
            <param name="command">command object to prepare</param>
            <param name="mustCloseConnection">output parameter specifying whether the connection used should be closed by the DAAB</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <example>
            <code>
            helper.UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </code></example>
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary> 
            Executes the IDbCommand for each inserted, updated, or deleted row in the DataSet also implementing RowUpdating and RowUpdated Event Handlers 
            </summary> 
            <example> 
            <code>
            RowUpdatingEventHandler rowUpdatingHandler = new RowUpdatingEventHandler( OnRowUpdating ); 
            RowUpdatedEventHandler rowUpdatedHandler = new RowUpdatedEventHandler( OnRowUpdated ); 
            helper.UpdateDataSet(sqlInsertCommand, sqlDeleteCommand, sqlUpdateCommand, dataSet, "Order", rowUpdatingHandler, rowUpdatedHandler); 
            </code></example> 
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param> 
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param> 
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param> 
            <param name="dataSet">The DataSet used to update the data source</param> 
            <param name="tableName">The DataTable used to update the data source.</param> 
            <param name="rowUpdatingHandler">RowUpdatingEventHandler</param> 
            <param name="rowUpdatedHandler">RowUpdatedEventHandler</param> 
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateCommand(System.String,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateCommand(System.Data.IDbConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateCommand(System.String,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CreateCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example><code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) 
            against the database specified in the connection string using the 
            dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQueryTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteNonQueryTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified
            IDbTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDatasetTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the paraemter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDatasetTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteDatasetTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReaderTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReaderTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteReaderTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalarTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalarTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.ExecuteScalarTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CheckForReturnValueParameter(System.Object[])">
            <summary>
            Checks for the existence of a return value parameter in the parametervalues
            </summary>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>true if the parameterValues contains a return value parameter, false otherwise</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.AreParameterValuesIDataParameters(System.Object[],System.Data.IDataParameter[])">
            <summary>
            Check to see if the parameter values passed to the helper are, in fact, IDataParameters.
            </summary>
            <param name="parameterValues">Array of parameter values passed to helper</param>
            <param name="iDataParameterValues">new array of IDataParameters built from parameter values</param>
            <returns>True if the parameter values are IDataParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameterParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetSpParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDataConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetSpParameterSetInternal(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetCachedParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.GetCachedParameterSetInternal(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CacheParameterSet(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.CacheParameterSetInternal(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:Data4Net.Ado.AdoHelper.DiscoverSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of IDataParameters for a stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="T:Data4Net.Ado.ADOHelperParameterCache">
            <summary>
            ADOHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Data4Net.Ado.ADOHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.ADOHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:Data4Net.Ado.ADOHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="T:Data4Net.Ado.DAABSectionHandler">
            <summary>
            This class is for reading the 'daabProvider' section of the App.Config file
            </summary>
        </member>
        <member name="M:Data4Net.Ado.DAABSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Evaluates the given XML section and returns a Hashtable that contains the results of the evaluation.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section. </param>
            <param name="configContext">An HttpConfigurationContext when Create is called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference (Nothing in Visual Basic). </param>
            <param name="section">The XmlNode that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section. </param>
            <returns>A Hashtable that contains the section's configuration settings.</returns>
        </member>
        <member name="T:Data4Net.Ado.ProviderAlias">
            <summary>
            This class is for reading the 'ProviderAlias' tag from the 'daabProviders' section of the App.Config file
            </summary>
        </member>
        <member name="M:Data4Net.Ado.ProviderAlias.#ctor(System.String,System.String)">
            <summary>
            Constructor required by IConfigurationSectionHandler
            </summary>
            <param name="assemblyName">The Assembly where this provider can be found</param>
            <param name="typeName">The type of the provider</param>
        </member>
        <member name="P:Data4Net.Ado.ProviderAlias.AssemblyName">
            <summary>
            Returns the Assembly name for this provider
            </summary>
            <value>The Assembly name for the specified provider</value>
        </member>
        <member name="P:Data4Net.Ado.ProviderAlias.TypeName">
            <summary>
            Returns the type name of this provider
            </summary>
            <value>The type name of the specified provider</value>
        </member>
        <member name="T:Data4Net.Ado.DataRecordHelper">
            <summary>
            DataRecordHelper
            </summary>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            以字符形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            以整数形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            以字节形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <param name="fieldOffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            获取一个字节
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            以Decimal的形式获取指定字段的值
            </summary>
            <param name="rec"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            以Int64的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            以Double的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            以Boolean类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            以Guid类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            以DateTime类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetFloat(System.Data.IDataRecord,System.String)">
            <summary>
            以Float类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            以chars类型的形式获取指定字段的值
            </summary>
            <param name="rec"></param>
            <param name="column"></param>
            <param name="fieldoffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            以char类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            以short类型的形式获取指定字段的值
            </summary>
            <param name="rec">当前记录</param>
            <param name="column">列名</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.IsDBNull(System.Data.IDataRecord,System.String)">
            <summary>
            判定指定的列是否为NULL
            </summary>
            <param name="rec"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            以string类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            以Int32类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            以byte类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            以decimal类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            以long类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            以double类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            以bool类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            以DateTime类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetFloat(System.Data.IDataReader,System.String,System.Single)">
            <summary>
            以float类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetChar(System.Data.IDataReader,System.String,System.Char)">
            <summary>
            以char类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Ado.DataRecordHelper.GetInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            以short类型获取当前记录指定字段的值
            </summary>
            <param name="reader">当前记录</param>
            <param name="column">字段名</param>
            <param name="defaultValue">默认值，当记录为DBNull的时候，返回该默认值</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Ado.Odbc">
            <summary>
            The Odbc class is intended to encapsulate high performance, scalable best practices for 
            common uses of the Odbc ADO.NET provider.  It is created using the abstract factory in AdoHelper
            </summary>
        </member>
        <member name="M:Data4Net.Ado.Odbc.#ctor">
            <summary>
            Create an Odbc Helper.  Needs to be a default constructor so that the Factory can create it
            </summary>
        </member>
        <member name="M:Data4Net.Ado.Odbc.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of OdbcParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of OdbcParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.Odbc.GetConnection(System.String)">
            <summary>
            Returns an OdbcConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An OdbcConnection object</returns>
        </member>
        <member name="M:Data4Net.Ado.Odbc.GetDataAdapter">
            <summary>
            Returns an OdbcDataAdapter object
            </summary>
            <returns>The OdbcDataAdapter</returns>
        </member>
        <member name="M:Data4Net.Ado.Odbc.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:Data4Net.Ado.Odbc.GetParameter">
            <summary>
            Returns an OdbcParameter object
            </summary>
            <returns>The OdbcParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.Odbc.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This cleans up the parameter syntax for an ODBC call.  This was split out from PrepareCommand so that it could be called independently.
            </summary>
            <param name="command">An IDbCommand object containing the CommandText to clean.</param>
        </member>
        <member name="M:Data4Net.Ado.Odbc.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(command);
            </code></example>
            <param name="command">The IDbCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.Odbc.AddUpdateEventHandlers(System.Data.IDbDataAdapter,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:Data4Net.Ado.Odbc.RowUpdating(System.Object,System.Data.Odbc.OdbcRowUpdatingEventArgs)">
            <summary>
            Handles the RowUpdating event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OdbcRowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.Odbc.RowUpdated(System.Object,System.Data.Odbc.OdbcRowUpdatedEventArgs)">
            <summary>
            Handles the RowUpdated event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OdbcRowUpdatedEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.Odbc.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:Data4Net.Ado.OleDb">
            <summary>
            The OleDb class is intended to encapsulate high performance, scalable best practices for 
            common uses of the OleDb ADO.NET provider.  It is created using the abstract factory in AdoHelper
            </summary>
        </member>
        <member name="M:Data4Net.Ado.OleDb.#ctor">
            <summary>
            Create an OleDb Helper.  Needs to be a default constructor so that the Factory can create it
            </summary>
        </member>
        <member name="M:Data4Net.Ado.OleDb.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of OleDbParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of OdbcParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.OleDb.GetConnection(System.String)">
            <summary>
            Returns an OleDbConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An OleDbConnection object</returns>
        </member>
        <member name="M:Data4Net.Ado.OleDb.GetDataAdapter">
            <summary>
            Returns an OleDbDataAdapter object
            </summary>
            <returns>The OleDbDataAdapter</returns>
        </member>
        <member name="M:Data4Net.Ado.OleDb.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:Data4Net.Ado.OleDb.GetParameter">
            <summary>
            Returns an OleDbParameter object
            </summary>
            <returns>The OleDbParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.OleDb.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This cleans up the parameter syntax for an OleDb call.  This was split out from PrepareCommand so that it could be called independently.
            </summary>
            <param name="command">An IDbCommand object containing the CommandText to clean.</param>
        </member>
        <member name="M:Data4Net.Ado.OleDb.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(command);
            </code></example>
            <param name="command">The IDbCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.OleDb.AddUpdateEventHandlers(System.Data.IDbDataAdapter,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:Data4Net.Ado.OleDb.RowUpdating(System.Object,System.Data.OleDb.OleDbRowUpdatingEventArgs)">
            <summary>
            Handles the RowUpdating event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OleDbRowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.OleDb.RowUpdated(System.Object,System.Data.OleDb.OleDbRowUpdatedEventArgs)">
            <summary>
            Handles the RowUpdated event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OleDbRowUpdatedEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.OleDb.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:Data4Net.Ado.Oracle">
            <summary>
            The Oracle class is intended to encapsulate high performance, scalable best practices for 
            common uses of the Oracle ADO.NET provider.  It is created using the abstract factory in AdoHelper.
            </summary>
        </member>
        <member name="M:Data4Net.Ado.Oracle.#ctor">
            <summary>
            Create an Oracle Helper.  Needs to be a default constructor so that the Factory can create it
            </summary>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of OracleParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of OracleParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetConnection(System.String)">
            <summary>
            Returns an OracleConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An OracleConnection object</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetDataAdapter">
            <summary>
            Returns an OracleDataAdapter object
            </summary>
            <returns>The OracleDataAdapter</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetParameter">
            <summary>
            Returns an OracleParameter object
            </summary>
            <returns>The OracleParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetParameter(System.String,System.Object)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="parameterName">The name of the parameter to create</param>
            <param name="value">The value of the specified parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetParameterSize(System.String)">
            <summary> 
            This function will get and assemble the parameter's size dynamically from db or cache 
            </summary> 
            <param name="name">The parameter name</param> 
            <returns>The size</returns> 
        </member>
        <member name="M:Data4Net.Ado.Oracle.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This cleans up the parameter syntax for an Oracle call.  This was split out from PrepareCommand so that it could be called independently.
            </summary>
            <param name="command">An IDbCommand object containing the CommandText to clean.</param>
        </member>
        <member name="M:Data4Net.Ado.Oracle.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(command);
            </code></example>
            <param name="command">The IDbCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.Oracle.AddUpdateEventHandlers(System.Data.IDbDataAdapter,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:Data4Net.Ado.Oracle.RowUpdating(System.Object,System.Data.OracleClient.OracleRowUpdatingEventArgs)">
            <summary>
            Handles the RowUpdating event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OracleRowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.Oracle.RowUpdated(System.Object,System.Data.OracleClient.OracleRowUpdatedEventArgs)">
            <summary>
            Handles the RowUpdated event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The OracleRowUpdatedEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.Oracle.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            See MS KnowledgeBase article: http://support.microsoft.com/default.aspx?scid=kb;en-us;322796
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:Data4Net.Ado.SqlServer">
            <summary>
            The SqlServer class is intended to encapsulate high performance, scalable best practices for 
            common uses of the SqlClient ADO.NET provider.  It is created using the abstract factory in AdoHelper.
            </summary>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.#ctor">
            <summary>
            Create a SQL Helper.  Needs to be a default constructor so that the Factory can create it
            </summary>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of SqlParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of SqlParameters</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.GetConnection(System.String)">
            <summary>
            Returns a SqlConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>A SqlConnection object</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.GetDataAdapter">
            <summary>
            Returns a SqlDataAdapter object
            </summary>
            <returns>The SqlDataAdapter</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.GetParameter">
            <summary>
            Returns a SqlParameter object
            </summary>
            <returns>The SqlParameter object</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.ClearCommand(System.Data.IDbCommand)">
            <summary>
            Detach the IDataParameters from the command object, so they can be used again.
            </summary>
            <param name="command">command object to clear</param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This cleans up the parameter syntax for an SQL Server call.  This was split out from PrepareCommand so that it could be called independently.
            </summary>
            <param name="command">An IDbCommand object containing the CommandText to clean.</param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the provided SqlConnection. 
            </summary>
            <example>
            <code>
            XmlReader r = helper.ExecuteXmlReader(command);
            </code></example>
            <param name="command">The IDbCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.AddUpdateEventHandlers(System.Data.IDbDataAdapter,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.RowUpdating(System.Object,System.Data.SqlClient.SqlRowUpdatingEventArgs)">
            <summary>
            Handles the RowUpdating event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The SqlRowUpdatingEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.RowUpdated(System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs)">
            <summary>
            Handles the RowUpdated event
            </summary>
            <param name="obj">The object that published the event</param>
            <param name="e">The SqlRowUpdatedEventArgs</param>
        </member>
        <member name="M:Data4Net.Ado.SqlServer.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlDeriveParameters.ParseGroupNumber(System.String@)">
            <summary>
            Checks to see if the stored procedure being called is part of a group, then gets the group number if necessary
            </summary>
            <param name="procedure">Stored procedure being called.  This method may change this parameter by removing the group number if it exists.</param>
            <returns>the group number</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlDeriveParameters.GetProcedureTokens(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Tokenize the procedure string
            </summary>
            <param name="procedure">The procedure name</param>
            <param name="server">The server name</param>
            <param name="database">The database name</param>
            <param name="owner">The owner name</param>
        </member>
        <member name="M:Data4Net.Ado.SqlDeriveParameters.IsEmptyString(System.String)">
            <summary>
            Checks for an empty string
            </summary>
            <param name="str">String to check</param>
            <returns>boolean value indicating whether string is empty</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlDeriveParameters.GetSqlDbType(System.Int16,System.String)">
            <summary>
            Convert OleDbType to SQlDbType
            </summary>
            <param name="paramType">The OleDbType to convert</param>
            <param name="typeName">The typeName to convert for items such as Money and SmallMoney which both map to OleDbType.Currency</param>
            <returns>The converted SqlDbType</returns>
        </member>
        <member name="M:Data4Net.Ado.SqlDeriveParameters.GetParameterDirection(System.Int16)">
            <summary>
            Converts the OleDb parameter direction
            </summary>
            <param name="oledbDirection">The integer parameter direction</param>
            <returns>A ParameterDirection</returns>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.FNV1_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.FNV1_32.hash">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1_32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1_32.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1_32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.FNV1a_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1a, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.FNV1a_32.hash">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1a_32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1a_32.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1a_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.FNV1a_32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.ModifiedFNV1_32">
            <summary>
            Modified Fowler-Noll-Vo hash, 32-bit version.
            http://home.comcast.net/~bretm/hash/6.html
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.ModifiedFNV1_32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.LogErrorMethod">
            <summary>
            Data4Net.BeIT.MemCached.LogErrorMethod
            
            <p>        LogErrorMethod.ErrorMethod += new LogErrorMethod.ErrorMethodEventHandler(LogErrorMethod_ErrorMethod);</p>
            <p></p>
            <p>    void LogErrorMethod_ErrorMethod(string errorMsg, Exception e)</p>
            <p>    {</p>
            <p>        Data4Net.LogLevel.ToLog(&quot;Memcached Client [MSG]&quot; + errorMsg + &quot; [EX]&quot; + e.ToString(), &quot;warn&quot;);</p>
            <p>    }</p>
            <p></p>
            </summary>
        </member>
        <member name="E:Data4Net.BeIT.MemCached.LogErrorMethod.ErrorMethod">
            <summary>
            Error Method
            </summary>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.LogErrorMethod.ErrorMethodEventHandler">
            <summary>
            Error Method delegate
            </summary>
            <param name="errorMsg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.LogErrorMethod.Excute(System.String,System.Exception)">
            <summary>
            Excute
            </summary>
            <param name="errorMsg"></param>
            <param name="e"></param>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.MemcachedClient">
            <summary>
            Memcached client main class.
            Use the static methods Setup and GetInstance to setup and get an instance of the client for use.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Setup(System.String,System.String[])">
            <summary>
            Static method for creating an instance. This method will throw an exception if the name already exists.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="servers">A list of memcached servers in standard notation: host:port. 
            If port is omitted, the default value of 11211 is used. 
            Both IP addresses and host names are accepted, for example:
            "localhost", "127.0.0.1", "cache01.example.com:12345", "127.0.0.1:12345", etc.</param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Exists(System.String)">
            <summary>
            Static method which checks if a given named MemcachedClient instance exists.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns></returns>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.defaultInstance">
            <summary>
            Static method for getting the default instance named "default".
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetInstance(System.String)">
            <summary>
            Static method for getting an instance. 
            This method will first check for named instances that has been set up programmatically.
            If no such instance exists, it will check the "beitmemcached" section of the standard 
            config file and see if it can find configuration info for it there.
            If that also fails, an exception is thrown.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>The named instance.</returns>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.KeyPrefix">
            <summary>
            If you specify a key prefix, it will be appended to all keys before they are sent to the memcached server.
            They key prefix is not used when calculating which server a key belongs to.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.SendReceiveTimeout">
            <summary>
            The send receive timeout is used to determine how long the client should wait for data to be sent 
            and received from the server, specified in milliseconds. The default value is 2000.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.ConnectTimeout">
            <summary>
            The connect timeout is used to determine how long the client should wait for a connection to be established,
            specified in milliseconds. The default value is 2000.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.MinPoolSize">
            <summary>
            The min pool size determines the number of sockets the socket pool will keep.
            Note that no sockets will be created on startup, only on use, so the socket pool will only
            contain this amount of sockets if the amount of simultaneous requests goes above it.
            The default value is 5.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.MaxPoolSize">
            <summary>
            The max pool size determines how large the socket connection pool is allowed to grow.
            There can be more sockets in use than this amount, but when the extra sockets are returned, they will be destroyed.
            The default value is 10.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.SocketRecycleAge">
            <summary>
            If the pool contains more than the minimum amount of sockets, and a socket is returned that is older than this recycle age
            that socket will be destroyed instead of put back in the pool. This allows the pool to shrink back to the min pool size after a peak in usage.
            The default value is 30 minutes.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.MemcachedClient.CompressionThreshold">
            <summary>
            If an object being stored is larger in bytes than the compression threshold, it will internally be compressed before begin stored,
            and it will transparently be decompressed when retrieved. Only strings, byte arrays and objects can be compressed.
            The default value is 1048576 bytes = 1MB.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.hash(System.String)">
            <summary>
            Private key hashing method that uses the modified FNV hash.
            </summary>
            <param name="key">The key to hash.</param>
            <returns>The hashed key.</returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.hash(System.UInt32)">
            <summary>
            Private hashing method for user-supplied hash values.
            </summary>
            <param name="hashvalue">The user-supplied hash value to hash.</param>
            <returns>The hashed value</returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.hash(System.String[])">
            <summary>
            Private multi-hashing method.
            </summary>
            <param name="keys">An array of keys to hash.</param>
            <returns>An arrays of hashes.</returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.hash(System.UInt32[])">
            <summary>
            Private multi-hashing method for user-supplied hash values.
            </summary>
            <param name="hashvalues">An array of keys to hash.</param>
            <returns>An arrays of hashes.</returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.checkKey(System.String)">
            <summary>
            Private key-checking method.
            Throws an exception if the key does not conform to memcached protocol requirements:
            It may not contain whitespace, it may not be null or empty, and it may not be longer than 250 characters.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object,System.UInt32)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object,System.UInt32,System.TimeSpan)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object,System.DateTime)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Set(System.String,System.Object,System.UInt32,System.DateTime)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object,System.UInt32)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object,System.UInt32,System.TimeSpan)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object,System.DateTime)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Add(System.String,System.Object,System.UInt32,System.DateTime)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object,System.UInt32)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object,System.TimeSpan)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object,System.UInt32,System.TimeSpan)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object,System.DateTime)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Replace(System.String,System.Object,System.UInt32,System.DateTime)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Append(System.String,System.Object)">
            <summary>
            This method corresponds to the "append" command in the memcached protocol.
            It will append the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Append(System.String,System.Object,System.UInt32)">
            <summary>
            This method corresponds to the "append" command in the memcached protocol.
            It will append the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Prepend(System.String,System.Object)">
            <summary>
            This method corresponds to the "prepend" command in the memcached protocol.
            It will prepend the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Prepend(System.String,System.Object,System.UInt32)">
            <summary>
            This method corresponds to the "prepend" command in the memcached protocol.
            It will prepend the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.MemcachedClient.CasResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.CasResult.Stored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.CasResult.NotStored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.CasResult.Exists">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.MemcachedClient.CasResult.NotFound">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt32,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.TimeSpan,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt32,System.TimeSpan,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.DateTime,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt32,System.DateTime,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Get(System.String)">
            <summary>
            This method corresponds to the "get" command in the memcached protocol.
            It will return the value for the given key. It will return null if the key did not exist,
            or if it was unable to retrieve the value.
            If given an array of keys, it will return a same-sized array of objects with the corresponding
            values.
            Use the overload to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Get(System.String,System.UInt32)">
            <summary>
            This method corresponds to the "get" command in the memcached protocol.
            It will return the value for the given key. It will return null if the key did not exist,
            or if it was unable to retrieve the value.
            If given an array of keys, it will return a same-sized array of objects with the corresponding
            values.
            Use the overload to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Gets(System.String,System.UInt64@)">
            <summary>
            This method corresponds to the "gets" command in the memcached protocol.
            It works exactly like the Get method, but it will also return the cas unique value for the item.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Gets(System.String,System.UInt32,System.UInt64@)">
            <summary>
            This method corresponds to the "gets" command in the memcached protocol.
            It works exactly like the Get method, but it will also return the cas unique value for the item.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <param name="unique"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Get(System.String[])">
            <summary>
            This method executes a multi-get. It will group the keys by server and execute a single get 
            for each server, and combine the results. The returned object[] will have the same size as
            the given key array, and contain either null or a value at each position according to
            the key on that position.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Get(System.String[],System.UInt32[])">
            <summary>
            This method executes a multi-get. It will group the keys by server and execute a single get 
            for each server, and combine the results. The returned object[] will have the same size as
            the given key array, and contain either null or a value at each position according to
            the key on that position.
            </summary>
            <param name="keys"></param>
            <param name="hashes"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Gets(System.String[],System.UInt64[]@)">
            <summary>
            This method does a multi-gets. It functions exactly like the multi-get method, but it will
            also return an array of cas unique values as an out parameter.
            </summary>
            <param name="keys"></param>
            <param name="uniques"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Gets(System.String[],System.UInt32[],System.UInt64[]@)">
            <summary>
            This method does a multi-gets. It functions exactly like the multi-get method, but it will
            also return an array of cas unique values as an out parameter.
            </summary>
            <param name="keys"></param>
            <param name="hashes"></param>
            <param name="uniques"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String,System.UInt32)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String,System.TimeSpan)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String,System.UInt32,System.TimeSpan)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String,System.DateTime)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Delete(System.String,System.UInt32,System.DateTime)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64,System.UInt32)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64,System.TimeSpan)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64,System.DateTime)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.SetCounter(System.String,System.UInt64,System.UInt32,System.DateTime)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetCounter(System.String)">
            <summary>
            This method returns the value for the given key as a ulong?, a nullable 64-bit unsigned integer.
            It returns null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetCounter(System.String,System.UInt32)">
            <summary>
            This method returns the value for the given key as a ulong?, a nullable 64-bit unsigned integer.
            It returns null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item.
            </summary>
            <param name="key"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetCounter(System.String[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.GetCounter(System.String[],System.UInt32[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <param name="hashes"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Increment(System.String,System.UInt64)">
            <summary>
            This method corresponds to the "incr" command in the memcached protocol.
            It will increase the item with the given value and return the new value.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Increment(System.String,System.UInt64,System.UInt32)">
            <summary>
            This method corresponds to the "incr" command in the memcached protocol.
            It will increase the item with the given value and return the new value.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Decrement(System.String,System.UInt64)">
            <summary>
            This method corresponds to the "decr" command in the memcached protocol.
            It will decrease the item with the given value and return the new value. If the new value would be 
            less than 0, it will be set to 0, and the method will return 0.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Decrement(System.String,System.UInt64,System.UInt32)">
            <summary>
            This method corresponds to the "decr" command in the memcached protocol.
            It will decrease the item with the given value and return the new value. If the new value would be 
            less than 0, it will be set to 0, and the method will return 0.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.FlushAll">
            <summary>
            This method corresponds to the "flush_all" command in the memcached protocol.
            When this method is called, it will send the flush command to all servers, thereby deleting
            all items on all servers.
            Use the overloads to set a delay for the flushing. If the parameter staggered is set to true,
            the client will increase the delay for each server, i.e. the first will flush after delay*0, 
            the second after delay*1, the third after delay*2, etc. If set to false, all servers will flush 
            after the same delay.
            It returns true if the command was successful on all servers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.FlushAll(System.TimeSpan)">
            <summary>
            This method corresponds to the "flush_all" command in the memcached protocol.
            When this method is called, it will send the flush command to all servers, thereby deleting
            all items on all servers.
            Use the overloads to set a delay for the flushing. If the parameter staggered is set to true,
            the client will increase the delay for each server, i.e. the first will flush after delay*0, 
            the second after delay*1, the third after delay*2, etc. If set to false, all servers will flush 
            after the same delay.
            It returns true if the command was successful on all servers.
            </summary>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.FlushAll(System.TimeSpan,System.Boolean)">
            <summary>
            This method corresponds to the "flush_all" command in the memcached protocol.
            When this method is called, it will send the flush command to all servers, thereby deleting
            all items on all servers.
            Use the overloads to set a delay for the flushing. If the parameter staggered is set to true,
            the client will increase the delay for each server, i.e. the first will flush after delay*0, 
            the second after delay*1, the third after delay*2, etc. If set to false, all servers will flush 
            after the same delay.
            It returns true if the command was successful on all servers.
            </summary>
            <param name="delay"></param>
            <param name="staggered"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Stats">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to all servers, and it will return a Dictionary for each server
            containing the results of the command.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Stats(System.String)">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to the server that corresponds to the given key, hash or host,
            and return a Dictionary containing the results of the command.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Stats(System.UInt32)">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to the server that corresponds to the given key, hash or host,
            and return a Dictionary containing the results of the command.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.StatsByHost(System.String)">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to the server that corresponds to the given key, hash or host,
            and return a Dictionary containing the results of the command.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClient.Status">
            <summary>
            This method retrives the status from the serverpool. It checks the connection to all servers
            and returns usage statistics for each server.
            </summary>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.MemcachedClientException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClientException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.MemcachedClientException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.PooledSocket">
            <summary>
            The PooledSocket class encapsulates a socket connection to a specified memcached server.
            It contains a buffered stream for communication, and methods for sending and retrieving
            data from the memcached server, as well as general memcached error checking.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Dispose">
            <summary>
            Disposing of a PooledSocket object in any way causes it to be returned to its SocketPool.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Close">
            <summary>
            This method closes the underlying stream and socket.
            </summary>
        </member>
        <member name="P:Data4Net.BeIT.MemCached.PooledSocket.IsAlive">
            <summary>
            Checks if the underlying socket and stream is connected and available.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Write(System.String)">
            <summary>
            Writes a string to the socket encoded in UTF8 format.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the socket and flushes the stream.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.ReadLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered, 
            and returns everything up to but not including that sequence as a UTF8-encoded string
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.ReadResponse">
            <summary>
            Reads a response line from the socket, checks for general memcached errors, and returns the line.
            If an error is encountered, this method will throw an exception.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Read(System.Byte[])">
            <summary>
            Fills the given byte array with data from the socket.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.SkipUntilEndOfLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.PooledSocket.Reset">
            <summary>
            Resets this PooledSocket by making sure the incoming buffer of the socket is empty.
            If there was any leftover data, this method return true.
            </summary>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.ServerPool">
            <summary>
            The ServerPool encapsulates a collection of memcached servers and the associated SocketPool objects.
            This class contains the server-selection logic, and contains methods for executing a block of code on 
            a socket from the server corresponding to a given key.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.ServerPool.#ctor(System.String[])">
            <summary>
            Internal constructor. This method takes the array of hosts and sets up an internal list of socketpools.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.ServerPool.GetSocketPool(System.UInt32)">
            <summary>
            Given an item key hash, this method returns the socketpool which is closest on the server key continuum.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.ServerPool.Execute``1(System.UInt32,``0,Data4Net.BeIT.MemCached.UseSocket{``0})">
            <summary>
            This method executes the given delegate on a socket from the server that corresponds to the given hash.
            If anything causes an error, the given defaultValue will be returned instead.
            This method takes care of disposing the socket properly once the delegate has executed.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.ServerPool.ExecuteAll(Data4Net.BeIT.MemCached.UseSocket)">
            <summary>
            This method executes the given delegate on all servers.
            </summary>
        </member>
        <member name="T:Data4Net.BeIT.MemCached.SocketPool">
            <summary>
            The SocketPool encapsulates the list of PooledSockets against one specific host, and contains methods for 
            acquiring or returning PooledSockets.
            </summary>
        </member>
        <member name="F:Data4Net.BeIT.MemCached.SocketPool.deadEndPointSecondsUntilRetry">
            <summary>
            If the host stops responding, we mark it as dead for this amount of seconds, 
            and we double this for each consecutive failed retry. If the host comes alive
            again, we reset this to 1 again.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.SocketPool.getEndPoint(System.String)">
            <summary>
            This method parses the given string into an IPEndPoint.
            If the string is malformed in some way, or if the host cannot be resolved, this method will throw an exception.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.SocketPool.Acquire">
            <summary>
            Gets a socket from the pool.
            If there are no free sockets, a new one will be created. If something goes
            wrong while creating the new socket, this pool's endpoint will be marked as dead
            and all subsequent calls to this method will return null until the retry interval
            has passed.
            </summary>
        </member>
        <member name="M:Data4Net.BeIT.MemCached.SocketPool.Return(Data4Net.BeIT.MemCached.PooledSocket)">
            <summary>
            Returns a socket to the pool.
            If the socket is dead, it will be destroyed.
            If there are more than MaxPoolSize sockets in the pool, it will be destroyed.
            If there are less than MinPoolSize sockets in the pool, it will always be put back.
            If there are something inbetween those values, the age of the socket is checked. 
            If it is older than the SocketRecycleAge, it is destroyed, otherwise it will be 
            put back in the pool.
            </summary>
        </member>
        <member name="T:Data4Net.DKey.DKeyRijndael">
            <summary>
            基于MD5的动态Key加密解密Rijndael算法
            .Net 3.5 全新引入了 AesManaged 代替 RijndaelManaged; 
            AesManaged and RijndaelManaged 差异见: http://blogs.msdn.com/b/shawnfa/archive/2006/10/09/the-differences-between-rijndael-and-aes.aspx
            <p></p>
            <p></p>
            <p>实例: A系统DATA1 go to B系统DATA1 (需要可信任的传递数据)</p>
            <p></p>
            <p>1. 传递加密数据</p>
            <p>A系统: 预处理数据</p>
            <p>Data4Net.DKey.DKeyRijndael dk = new Data4Net.DKey.DKeyRijndael(&quot;123456789~!@#$%^&amp;*()&quot;, &quot;ttttt{T}yyyyy{T}&quot;);</p>
            <p>string ticks = DateTime.Now.Ticks.ToString();</p>
            <p>string ticks = DateTime.Now.ToString("yyyyMMddHHmmss");</p>
            <p>string r = dk.Encrypt(&quot;aaa你好bbb你好ccc你好ddd&quot;, &quot;UTF-8&quot;, ticks);</p>
            <p>A系统: 通过URL页面跳转给B系统传递 b.html?value=r&amp;time=ticks</p>
            <p></p>
            <p>2. 获取加密数据</p>
            <p>B系统: b.html获得数据后服务器端调用A系统后端接接口a.html</p>
            <p>A系统: 后端接口a.html返回 dk.Decrypt(r, &quot;UTF-8&quot;, ticks)</p>
            <p></p>
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyRijndael._keyChar">
            <summary>
            Key的字符集 (该字符长度大于256的部分无意义, 不会被使用到)
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyRijndael._keyLength">
            <summary>
            Key长度
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyRijndael._md5Char">
            <summary>
            MD5格式字符串, {T}替换时间, 区分大小写, 如 aaa{T}bbbccc, 其中aaabbbccc为混淆码
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyRijndael._md5">
            <summary>
            MD5对象
            </summary>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="keyChar">Key的字符集 如"0123456789" (该字符长度大于256的部分无意义, 不会被使用到)</param>
            <param name="md5Char">MD5格式字符串, {T}替换时间, 区分大小写, 如 aaa{T}bbbccc, 其中aaabbbccc为混淆码</param>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.GetKey(System.String)">
            <summary>
            通过时间ticks和md5混淆字符, 得到MD5序列, 并转换为key所预设包含的值, 得到一个完整的key
            </summary>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="value"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyRijndael.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="value"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.DKey.DKeyAes">
            <summary>
            基于MD5的动态Key加密解密AES算法
            .Net 3.5 全新引入了 AesManaged 代替 RijndaelManaged; 
            AesManaged and RijndaelManaged 差异见: http://blogs.msdn.com/b/shawnfa/archive/2006/10/09/the-differences-between-rijndael-and-aes.aspx
            <p></p>
            <p></p>
            <p>实例: A系统DATA1 go to B系统DATA1 (需要可信任的传递数据)</p>
            <p></p>
            <p>1. 传递加密数据</p>
            <p>A系统: 预处理数据</p>
            <p>Data4Net.DKey.DKeyAes dk = new Data4Net.DKey.DKeyAes(&quot;123456789~!@#$%^&amp;*()&quot;, &quot;ttttt{T}yyyyy{T}&quot;);</p>
            <p>string ticks = DateTime.Now.Ticks.ToString();</p>
            <p>string ticks = DateTime.Now.ToString("yyyyMMddHHmmss");</p>
            <p>string r = dk.Encrypt(&quot;aaa你好bbb你好ccc你好ddd&quot;, &quot;UTF-8&quot;, ticks);</p>
            <p>A系统: 通过URL页面跳转给B系统传递 b.html?value=r&amp;time=ticks</p>
            <p></p>
            <p>2. 获取加密数据</p>
            <p>B系统: b.html获得数据后服务器端调用A系统后端接接口a.html</p>
            <p>A系统: 后端接口a.html返回 dk.Decrypt(r, &quot;UTF-8&quot;, ticks)</p>
            <p></p>
            </summary>
        </member>
        <member name="T:Data4Net.DKey.DKeyDes">
            <summary>
            基于MD5的动态Key加密解密DES算法
            <p></p>
            <p></p>
            <p>实例: A系统DATA1 go to B系统DATA1 (需要可信任的传递数据)</p>
            <p></p>
            <p>1. 传递加密数据</p>
            <p>A系统: 预处理数据</p>
            <p>Data4Net.DKey.DKeyDes dk = new Data4Net.DKey.DKeyDes(&quot;123456789~!@#$%^&amp;*()&quot;, &quot;ttttt{T}yyyyy{T}&quot;);</p>
            <p>string ticks = DateTime.Now.Ticks.ToString();</p>
            <p>string ticks = DateTime.Now.ToString("yyyyMMddHHmmss");</p>
            <p>string r = dk.Encrypt(&quot;aaa你好bbb你好ccc你好ddd&quot;, &quot;UTF-8&quot;, ticks);</p>
            <p>A系统: 通过URL页面跳转给B系统传递 b.html?value=r&amp;time=ticks</p>
            <p></p>
            <p>2. 获取加密数据</p>
            <p>B系统: b.html获得数据后服务器端调用A系统后端接接口a.html</p>
            <p>A系统: 后端接口a.html返回 dk.Decrypt(r, &quot;UTF-8&quot;, ticks)</p>
            <p></p>
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyDes._keyChar">
            <summary>
            Key的字符集 (该字符长度大于256的部分无意义, 不会被使用到)
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyDes._keyLength">
            <summary>
            Key长度
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyDes._md5Char">
            <summary>
            MD5格式字符串, {T}替换时间, 区分大小写, 如 aaa{T}bbbccc, 其中aaabbbccc为混淆码
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyDes._md5">
            <summary>
            MD5对象
            </summary>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="keyChar">Key的字符集 如"0123456789" (该字符长度大于256的部分无意义, 不会被使用到)</param>
            <param name="md5Char">MD5格式字符串, {T}替换时间, 区分大小写, 如 aaa{T}bbbccc, 其中aaabbbccc为混淆码</param>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.GetKey(System.String)">
            <summary>
            通过时间ticks和md5混淆字符, 得到MD5序列, 并转换为key所预设包含的值, 得到一个完整的key
            </summary>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="value"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyDes.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="value"></param>
            <param name="timeTicks"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.DKey.DKeyMd5">
            <summary>
            基于MD5的1分钟动态Key类
            <p></p>
            <p></p>
            <p>实例:</p>
            <p>        private static Data4Net.DKey.DKeyMd5 _dkMd5 = new Data4Net.DKey.DKeyMd5(&quot;0123456789&quot;, 6,</p>
            <p>            &quot;aaa&quot; +</p>
            <p>            &quot;{T}&quot; +</p>
            <p>            &quot;bbb&quot; +</p>
            <p>            &quot;{V}{T}&quot; +</p>
            <p>            &quot;ccc&quot;,</p>
            <p>            60000);</p>
            <p>        public static bool CheckCodeByMd5(string value, string code)</p>
            <p>        {</p>
            <p>            string checkKey = &quot;&quot;;</p>
            <p>            bool r = _dkMd5.CheckKey(value, code, 10, out checkKey);</p>
            <p>            LogHelper.Info(&quot;CheckCodeByMd5 [VALUE=&quot; + value + &quot;][CODE=&quot; + code + &quot;][R=&quot; + r.ToString() + &quot;][KEY=&quot; + checkKey + &quot;]&quot;);</p>
            <p>            return r;</p>
            <p>        }</p>
            <p>        public static string GetCodeByMd5(string value)</p>
            <p>        {</p>
            <p>            string r = _dkMd5.GetKey(value);</p>
            <p>            LogHelper.Info(&quot;CheckCodeByMd5 [VALUE=&quot; + value + &quot;][NOW=&quot; + DateTime.Now.ToString() + &quot;][MD5=&quot; + r + &quot;]&quot;);</p>
            <p>            return r;</p>
            <p>        }</p>
            <p></p>
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyMd5._keyChar">
            <summary>
            Key的字符集 (该字符长度大于256的部分无意义, 不会被使用到)
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyMd5._keyLength">
            <summary>
            Key长度，必须在1-16之间（1,16包含）
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyMd5._md5Char">
            <summary>
            MD5格式字符串, {T}替换时间 {V}替换值, 区分大小写, 如 aaa{T}bbb{V}ccc, 其中aaabbbccc为混淆码
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyMd5._timeStep">
            <summary>
            时间步长, 0-31536000(1年)
            </summary>
        </member>
        <member name="F:Data4Net.DKey.DKeyMd5._md5">
            <summary>
            MD5对象
            </summary>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.#ctor(System.String,System.Int32,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="keyChar">Key的字符集 如"0123456789" (该字符长度大于256的部分无意义, 不会被使用到)</param>
            <param name="keyLength">Key长度，必须在1-16之间（1,16包含）</param>
            <param name="md5Char">MD5格式字符串, {T}替换时间 {V}替换值, 区分大小写, 如 aaa{T}bbb{V}ccc, 其中aaabbbccc为混淆码</param>
            <param name="timeStep">时间步长, 单位毫秒, 建议0-31536000000(1年)之间(包含), 如60000</param>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.CheckKey(System.String,System.String,System.Int32,System.String@)">
            <summary>
            验证当前时间Key, 默认当前时间, 默认忽略大小写比较
            </summary>
            <param name="value"></param>
            <param name="code"></param>
            <param name="steps">前后几个步长, 建议取值范围0-10, 如3则表示输出当前步长和前后2次时间间隔的步长共7个key中是否包含这个输入的code</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.CheckKey(System.String,System.String,System.Int32,System.DateTime,System.Boolean,System.String@)">
            <summary>
            验证当前时间Key
            </summary>
            <param name="value"></param>
            <param name="code"></param>
            <param name="steps">前后几个步长, 建议取值范围0-10, 如3则表示输出当前步长和前后2次时间间隔的步长共7个key中是否包含这个输入的code</param>
            <param name="now"></param>
            <param name="isLower">是否忽略大小写 true忽略 false区分大小写</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.GetKey(System.String)">
            <summary>
            得到当前时间单个Key
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.GetKey(System.String,System.DateTime)">
            <summary>
            得到当前时间单个Key
            </summary>
            <param name="value"></param>
            <param name="now"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DKey.DKeyMd5.GetKey(System.String,System.Int32,System.DateTime)">
            <summary>
            得到任意时间, 任意几个Key
            </summary>
            <param name="value"></param>
            <param name="steps">前后几个步长, 建议取值范围0-10, 如3则表示输出当前步长和前后3次时间间隔的步长共7个key</param>
            <param name="now"></param>
            <returns>多个Key, 每个生成的Key用英文字符逗号分割</returns>
        </member>
        <member name="T:Data4Net.Encrypt.AES">
            <summary>
            AES Class (AES)
            .Net 3.5 全新引入了 AesManaged 代替 RijndaelManaged; 
            AesManaged and RijndaelManaged 差异见: http://blogs.msdn.com/b/shawnfa/archive/2006/10/09/the-differences-between-rijndael-and-aes.aspx
            </summary>
        </member>
        <member name="T:Data4Net.Encrypt.RSA4Pem">
            <summary>
            RSA4Pem Class
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RSA4Pem.GetPemContent(System.String)">
            <summary>
            读取pem文件到string对象中
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA4Pem.ConvertFromPemPublicKey(System.String)">
            <summary>
            将pem格式公钥(1024 or 2048)转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem公钥内容</param>
            <returns>转换得到的RSAParamenters</returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA4Pem.ConvertFromPemPrivateKey(System.String)">
            <summary>
            将pem格式私钥(1024 or 2048)转换为RSAParameters
            </summary>
            <param name="pemFileConent">pem私钥内容</param>
            <returns>转换得到的RSAParamenters</returns>
        </member>
        <member name="T:Data4Net.Encrypt.RSAKeyModel">
            <summary>
            RSAKeyModel
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RSAKeyModel.GetKey(System.String)">
            <summary>
            GetKey
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSAKeyModel.SetKey(System.String,System.String)">
            <summary>
            SetKey
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Data4Net.Encrypt.RSAKeyModel.GetKeyByHex(System.String)">
            <summary>
            GetKeyByHex
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSAKeyModel.SetKeyByHex(System.String,System.String)">
            <summary>
            SetKeyByHex
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:Data4Net.Encrypt.RSAKeyModel.KeyList">
            <summary>
            KeyList
            </summary>
        </member>
        <member name="P:Data4Net.Encrypt.RSAKeyModel.RSAPara">
            <summary>
            Get or Set RSAParameters Object
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RSAKeyModel.GetHex(System.String)">
            <summary>
            Get Hex list by format string
            </summary>
            <param name="formatStr">ex: {0}:{1}\n</param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Encrypt.RSAKeyModel.Xml">
            <summary>
            Xml
            
            Pubilc key format
            &lt;Modulus&gt;&lt;/Modulus&gt;
            &lt;Exponent&gt;&lt;/Exponent&gt;
            &lt;/RSAKeyValue&gt;
            
            Private key format
            &lt;RSAKeyValue&gt;
            &lt;Modulus&gt;&lt;/Modulus&gt;
            &lt;Exponent&gt;&lt;/Exponent&gt;
            &lt;P&gt;&lt;/P&gt;
            &lt;Q&gt;&lt;/Q&gt;
            &lt;DP&gt;&lt;/DP&gt;
            &lt;DQ&gt;&lt;/DQ&gt;
            &lt;InverseQ&gt;&lt;/InverseQ&gt;
            &lt;D&gt;&lt;/D&gt;
            &lt;/RSAKeyValue&gt;
            </summary>
        </member>
        <member name="T:Data4Net.Encrypt.SHA1">
            <summary>
            SHA1 Class
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.SHA1.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.SHA1.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.SHA1.EncryptWeb(System.String,System.String)">
            <summary>
            Encrypt ASP,网络标准 MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.SHA1.EncryptWeb(System.String,System.String,System.Boolean)">
            <summary>
            Encrypt ASP,网络标准 MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <param name="isLower">大写 小写</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.DES">
            <summary>
            DES Class
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.DES.KeyEncodeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.DES.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.DES.IV">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.DES.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Data4Net.Encrypt.DES.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Data4Net.Encrypt.DES.SetPadding(System.Security.Cryptography.PaddingMode)">
            <summary>
            设置填充模式 PaddingMode
            </summary>
            <param name="padMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.DES.SetMode(System.Security.Cryptography.CipherMode)">
            <summary>
            设置 CipherMode, .Net C#默认是CBC, php java 有用 ECB
            </summary>
            <param name="cipMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.DES.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.DES.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.DES.Decrypt(System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.DES.Decrypt(System.Byte[])">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.MD5">
            <summary>
            MD5 Class
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.MD5.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.MD5.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.MD5.EncryptWeb(System.String,System.String)">
            <summary>
            Encrypt ASP,网络标准 MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.MD5.EncryptWeb(System.String,System.String,System.Boolean)">
            <summary>
            Encrypt ASP,网络标准 MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <param name="isLower">大写 小写</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.RC2">
            <summary>
            RC2 Class
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.RC2.KeyEncodeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.RC2.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.RC2.IV">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.SetPadding(System.Security.Cryptography.PaddingMode)">
            <summary>
            设置填充模式
            </summary>
            <param name="padMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.SetMode(System.Security.Cryptography.CipherMode)">
            <summary>
            设置 CipherMode, .Net C#默认是CBC, php java 有用 ECB
            </summary>
            <param name="cipMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.Decrypt(System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RC2.Decrypt(System.Byte[])">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.Rijndael">
            <summary>
            Rijndael Class (AES)
            .Net 3.5 全新引入了 AesManaged 代替 RijndaelManaged; 
            AesManaged and RijndaelManaged 差异见: http://blogs.msdn.com/b/shawnfa/archive/2006/10/09/the-differences-between-rijndael-and-aes.aspx
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.Rijndael.KeyEncodeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.Rijndael.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.Rijndael.IV">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.SetPadding(System.Security.Cryptography.PaddingMode)">
            <summary>
            设置填充模式
            </summary>
            <param name="padMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.SetMode(System.Security.Cryptography.CipherMode)">
            <summary>
            设置 CipherMode, .Net C#默认是CBC, php java 有用 ECB
            </summary>
            <param name="cipMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.Decrypt(System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.Rijndael.Decrypt(System.Byte[])">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.RSA">
            <summary>
            RSA Class
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.GetPublicKey">
            <summary>
            得到公钥
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.GetPrivateKey">
            <summary>
            得到私钥
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="publicKey"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="privateKey"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.RSA.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Encrypt.TripleDES">
            <summary>
            TripleDES Class
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.TripleDES.KeyEncodeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.TripleDES.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Encrypt.TripleDES.IV">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.SetPadding(System.Security.Cryptography.PaddingMode)">
            <summary>
            设置填充模式
            </summary>
            <param name="padMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.SetMode(System.Security.Cryptography.CipherMode)">
            <summary>
            设置 CipherMode, .Net C#默认是CBC, php java 有用 ECB
            </summary>
            <param name="cipMod"></param>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.Encrypt(System.String,System.String)">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.Encrypt(System.Byte[])">
            <summary>
            Encrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.Decrypt(System.String,System.String)">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Encrypt.TripleDES.Decrypt(System.Byte[])">
            <summary>
            Decrypt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Json.JsonConvert">
            <summary>
            JsonConvert
            </summary>
        </member>
        <member name="F:Data4Net.Json.JsonConvert._SEMICOLON">
            <summary>
            分号转义符
            </summary>
        </member>
        <member name="F:Data4Net.Json.JsonConvert._COMMA">
            <summary>
            逗号转义符
            </summary>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.StrEncode(System.String)">
            <summary>
            字符串转义,将双引号内的:和,分别转成_SEMICOLON和_COMMA
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.StrDecode(System.String)">
            <summary>
            字符串转义,将_SEMICOLON和_COMMA分别转成:和,
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.DeserializeSingletonObject(System.String,Data4Net.Json.JsonObject)">
            <summary>
            最小对象转为JsonObject
            </summary>
            <param name="text"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.DeserializeSingletonArray(System.String,Data4Net.Json.JsonObject)">
            <summary>
            最小数组转为JsonArray
            </summary>
            <param name="text"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.Deserialize(System.String,Data4Net.Json.JsonObject)">
            <summary>
            反序列化
            </summary>
            <param name="text"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            反序列化JSONObject对象
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.DeserializeArray(System.String)">
            <summary>
            反序列化JSONArray对象
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.SerializeObject(Data4Net.Json.JsonObject)">
            <summary>
            序列化JSONObject对象
            </summary>
            <param name="jsonObject"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonConvert.SerializeArray(Data4Net.Json.JsonArray)">
            <summary>
            序列化JSONArray对象
            </summary>
            <param name="jsonArray"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Json.JsonObject">
            <summary>
            JsonObject
            </summary>
        </member>
        <member name="T:Data4Net.Json.JsonArray">
            <summary>
            JsonArray
            </summary>
        </member>
        <member name="T:Data4Net.Json.JsonGo">
            <summary>
            JsonGo Class
            </summary>
        </member>
        <member name="M:Data4Net.Json.JsonGo.GetJsonValue(System.String,System.String)">
            <summary>
            GetJsonValue
            </summary>
            <param name="text"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Json.JsonGo.ShowJsonString2Human(System.String,System.String,System.String)">
            <summary>
            格式化 Json String 显示, 增加换行和空格等易读格式
            </summary>
            <param name="text"></param>
            <param name="newline"></param>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Json.JsonString">
            <summary>
            任意类型数据转成JSON格式数据输出 JsonString Class
            </summary>
        </member>
        <member name="M:Data4Net.Json.JsonString.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>  
            List转成json   
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="jsonName"></param>  
            <param name="list"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.Json.JsonString.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>  
            List转成json   
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="list"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Object)">
            <summary>   
            对象转换为Json字符串   
            </summary>   
            <param name="jsonObject">对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Collections.IEnumerable)">
            <summary>   
            对象集合转换Json   
            </summary>   
            <param name="array">集合对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.ToArrayString(System.Collections.IEnumerable)">
            <summary>   
            普通集合转换Json   
            </summary>   
            <param name="array">集合对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Data.DataTable)">
            <summary>   
            Datatable转换为Json   
            </summary>   
            <param name="dt">Datatable对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Data.DataTable,System.String)">
            <summary>  
            DataTable转成Json   
            </summary>  
            <param name="jsonName"></param>  
            <param name="dt"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Data.Common.DbDataReader)">
            <summary>   
            DataReader转换为Json   
            </summary>   
            <param name="dataReader">DataReader对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.ToJson(System.Data.DataSet)">
            <summary>   
            DataSet转换为Json   
            </summary>   
            <param name="dataSet">DataSet对象</param>   
            <returns>Json字符串</returns>   
        </member>
        <member name="M:Data4Net.Json.JsonString.String2Json(System.String)">
            <summary>  
            过滤特殊字符  
            </summary>  
            <param name="s"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.Json.JsonString.StringFormat(System.String,System.Type)">
            <summary>  
            格式化字符型、日期型、布尔型  
            </summary>  
            <param name="str"></param>  
            <param name="type"></param>  
            <returns></returns>  
        </member>
        <member name="T:Data4Net.LogLevelConfig">
            <summary>
            LogLevel Config Class
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelConfig.XmlConfigPath">
            <summary>
            Get or set config file path.
            ex: AppDomain.CurrentDomain.BaseDirectory + "Data4NetLogLevel.config"
            </summary>
        </member>
        <member name="F:Data4Net.LogLevelConfig._xmlConfigPath">
            <summary>
            config file path
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelConfig.ConfigVersion">
            <summary>
            Get config file version, 2.0 or 1.0
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelData">
            <summary>
            LogLevelData Class
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.LogType">
            <summary>
            日志类型，如File、Mail
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.LogDesc">
            <summary>
            注解
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.LogError">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.LogContent">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.IsLogContentMax">
            <summary>
            内容是否已经达到配置的缓存最大值
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.FileNum">
            <summary>
            文件日志Index
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.FilePath">
            <summary>
            文件日志路径
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.FilePathClear">
            <summary>
            需要Clear文件日志路径
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.ToEmail">
            <summary>
            Email收件人
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelData.MailTitle">
            <summary>
            Email主题
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelEventHandler">
            <summary>
            LogLevelEventHandler, LogLevel外部事件类
            </summary>
        </member>
        <member name="E:Data4Net.LogLevelEventHandler.ErrorMethod">
            <summary>
            错误信息事件
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelEventHandler.ErrorMethodEventHandler">
            <summary>
            错误信息代理
            </summary>
            <param name="logData"></param>
            <returns></returns>
        </member>
        <member name="E:Data4Net.LogLevelEventHandler.MailContentMethod">
            <summary>
            自定义邮件监控系统信息事件
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelEventHandler.MailContentMethodEventHandler">
            <summary>
            自定义邮件监控系统信息代理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelEventHandler.Error(Data4Net.LogLevelData)">
            <summary>
            错误信息
            </summary>
            <param name="logData"></param>
        </member>
        <member name="M:Data4Net.LogLevelEventHandler.MailContent">
            <summary>
            自定义邮件监控系统信息
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelFile">
            <summary>
            LogLevelFile
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelFile.InitData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelFile.FormatFilePathByDate(System.DateTime)">
            <summary>
            按照日志得到日志文件路径
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelFile.ToFile(System.DateTime,System.String)">
            <summary>
            Log to file
            </summary>
            <param name="logTime"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelFile.GoAsyncFileLog(System.Object)">
            <summary>
            异步写文件函数
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Data4Net.LogLevelFile.CloseAsync">
            <summary>
            终止异步线程
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelFile.ClearFilePath(System.String)">
            <summary>
            自动清理删除日志
            </summary>
            <param name="clearPath"></param>
        </member>
        <member name="T:Data4Net.LogLevelLogData">
            <summary>
            LogLevelLogData数据对象, 目前主要在异步方法 ToLogAsync 用到
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelLogData.Time">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelLogData.Msg">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelLogData.Mark">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelLogData.LevelKeyItem">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelMail">
            <summary>
            LogLevelMail
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelMail.InitData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelMail.ToMail(System.DateTime,System.String,System.String)">
            <summary>
            Log to mail
            </summary>
            <param name="logTime"></param>
            <param name="errMsg"></param>
            <param name="logMark"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelMail.GoAsyncMailLog(System.Object)">
            <summary>
            异步发邮件函数
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Data4Net.LogLevelMail.CloseAsync">
            <summary>
            终止异步线程
            </summary>
        </member>
        <member name="T:Data4Net.LogLevelUtility">
            <summary>
            LogLevel公共方法类 LogLevelUtility
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelUtility.PidCurrent">
            <summary>
            当前进程的PID
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelUtility.TidCurrent">
            <summary>
            当前线程TID
            
            AppDomain.GetCurrentThreadId()实际上调用的是WIN32 API，其返回的是该线程在windows中的ThreadId；
            Thread.ManagedThreadId 返回的是作为一个ManagedThread在.NET CLR中的ThreadId；
            所以这和windows的ThreadId是完全不同的。
            </summary>
        </member>
        <member name="P:Data4Net.LogLevelUtility.ErrorId">
            <summary>
            得到一个唯一的ErrorId
            </summary>
        </member>
        <member name="M:Data4Net.LogLevelUtility.SetLevelKeyHashtable(System.Int32,System.String[],System.Collections.Hashtable)">
            <summary>
            设置LogLevelKey到Hashtable中, 用Hashtable做地图
            </summary>
            <param name="indexId"></param>
            <param name="levelKeyItem"></param>
            <param name="ht"></param>
        </member>
        <member name="M:Data4Net.LogLevelUtility.FormatMsg">
            <summary>
            format message with web or win, it can check in web or win.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelUtility.FormatMsgWeb">
            <summary>
            format message in web
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevelUtility.FormatMsgWin">
            <summary>
            format message in win
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.RedisSharp.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="T:Data4Net.RedisSharp.Redis.KeyType">
            <summary>
            KeyType
            </summary>
        </member>
        <member name="F:Data4Net.RedisSharp.Redis.KeyType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Data4Net.RedisSharp.Redis.KeyType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Data4Net.RedisSharp.Redis.KeyType.List">
            <summary>
            List
            </summary>
        </member>
        <member name="F:Data4Net.RedisSharp.Redis.KeyType.Set">
            <summary>
            Set
            </summary>
        </member>
        <member name="T:Data4Net.RedisSharp.Redis.ResponseException">
            <summary>
            ResponseException
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ResponseException.#ctor(System.String)">
            <summary>
            ResponseException
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.ResponseException.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.#ctor(System.String,System.Int32)">
            <summary>
            Redis
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.#ctor(System.String)">
            <summary>
            Redis
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.#ctor">
            <summary>
            Redis
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.RetryTimeout">
            <summary>
            RetryTimeout
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.RetryCount">
            <summary>
            RetryCount
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.SendTimeout">
            <summary>
            SendTimeout
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Db">
            <summary>
            Db
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Item(System.String)">
            <summary>
            this
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Set(System.String,System.String)">
            <summary>
            Set
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.SetNX(System.String,System.String)">
            <summary>
            SetNX
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Set(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Get(System.String)">
            <summary>
            Get
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetString(System.String)">
            <summary>
            GetString
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Sort(Data4Net.RedisSharp.SortOptions)">
            <summary>
            Sort
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetSet(System.String,System.String)">
            <summary>
            GetSet
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ContainsKey(System.String)">
            <summary>
            ContainsKey
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Remove(System.String)">
            <summary>
            Remove
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Remove(System.String[])">
            <summary>
            Remove
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Increment(System.String)">
            <summary>
            Increment
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Increment(System.String,System.Int32)">
            <summary>
            Increment
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Decrement(System.String)">
            <summary>
            Decrement
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Decrement(System.String,System.Int32)">
            <summary>
            Decrement
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.TypeOf(System.String)">
            <summary>
            TypeOf
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.RandomKey">
            <summary>
            RandomKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Rename(System.String,System.String)">
            <summary>
            Rename
            </summary>
            <param name="oldKeyname"></param>
            <param name="newKeyname"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Expire(System.String,System.Int32)">
            <summary>
            Expire
            </summary>
            <param name="key"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ExpireAt(System.String,System.Int32)">
            <summary>
            ExpireAt
            </summary>
            <param name="key"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.TimeToLive(System.String)">
            <summary>
            TimeToLive
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.DbSize">
            <summary>
            DbSize
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Save">
            <summary>
            Save
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.BackgroundSave">
            <summary>
            BackgroundSave
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.FlushAll">
            <summary>
            FlushAll
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.FlushDb">
            <summary>
            FlushDb
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.LastSave">
            <summary>
            LastSave
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetInfo">
            <summary>
            GetInfo
            </summary>
            <returns></returns>
        </member>
        <member name="P:Data4Net.RedisSharp.Redis.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetKeys(System.String)">
            <summary>
            GetKeys
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetKeys(System.String[])">
            <summary>
            GetKeys
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.SendDataCommandExpectMultiBulkReply(System.String)">
            <summary>
            SendDataCommandExpectMultiBulkReply
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ListRange(System.String,System.Int32,System.Int32)">
            <summary>
            ListRange
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.RightPush(System.String,System.String)">
            <summary>
            RightPush
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ListLength(System.String)">
            <summary>
            ListLength
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.ListIndex(System.String,System.Int32)">
            <summary>
            ListIndex
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.LeftPop(System.String)">
            <summary>
            LeftPop
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.AddToSet(System.String,System.String)">
            <summary>
            AddToSet
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.CardinalityOfSet(System.String)">
            <summary>
            CardinalityOfSet
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.IsMemberOfSet(System.String,System.String)">
            <summary>
            IsMemberOfSet
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetMembersOfSet(System.String)">
            <summary>
            GetMembersOfSet
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetRandomMemberOfSet(System.String)">
            <summary>
            GetRandomMemberOfSet
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.PopRandomMemberOfSet(System.String)">
            <summary>
            PopRandomMemberOfSet
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.RemoveFromSet(System.String,System.String)">
            <summary>
            RemoveFromSet
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetUnionOfSets(System.String[])">
            <summary>
            GetUnionOfSets
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.StoreUnionOfSets(System.String,System.String[])">
            <summary>
            StoreUnionOfSets
            </summary>
            <param name="destKey"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetIntersectionOfSets(System.String[])">
            <summary>
            GetIntersectionOfSets
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.StoreIntersectionOfSets(System.String,System.String[])">
            <summary>
            StoreIntersectionOfSets
            </summary>
            <param name="destKey"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.GetDifferenceOfSets(System.String[])">
            <summary>
            GetDifferenceOfSets
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.StoreDifferenceOfSets(System.String,System.String[])">
            <summary>
            StoreDifferenceOfSets
            </summary>
            <param name="destKey"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.MoveMemberToSet(System.String,System.String,System.String)">
            <summary>
            MoveMemberToSet
            </summary>
            <param name="srcKey"></param>
            <param name="destKey"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Finalize">
            <summary>
            ~Redis
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.Redis.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Data4Net.RedisSharp.SortOptions">
            <summary>
            SortOptions
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.Lexographically">
            <summary>
            Lexographically
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.LowerLimit">
            <summary>
            LowerLimit
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.UpperLimit">
            <summary>
            UpperLimit
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.By">
            <summary>
            By
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.StoreInKey">
            <summary>
            StoreInKey
            </summary>
        </member>
        <member name="P:Data4Net.RedisSharp.SortOptions.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="M:Data4Net.RedisSharp.SortOptions.ToCommand">
            <summary>
            ToCommand
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AdapterHelper">
            <summary>
            AdapterHelper Class
            </summary>
        </member>
        <member name="T:Data4Net.AdapterHelper.Info">
            <summary>
            Adapter configuration info
            </summary>
        </member>
        <member name="P:Data4Net.AdapterHelper.Info.IpEnabled">
            <summary>
            IpEnabled
            </summary>
        </member>
        <member name="P:Data4Net.AdapterHelper.Info.Ips">
            <summary>
            Ips
            </summary>
        </member>
        <member name="P:Data4Net.AdapterHelper.Info.Subnets">
            <summary>
            Subnets
            </summary>
        </member>
        <member name="P:Data4Net.AdapterHelper.Info.Gateways">
            <summary>
            Gateways
            </summary>
        </member>
        <member name="P:Data4Net.AdapterHelper.Info.Dnss">
            <summary>
            Dnss
            </summary>
        </member>
        <member name="M:Data4Net.AdapterHelper.GetIpAndDns_Win32">
            <summary>
            GetIpAndDns_Win32 by ManagementClass("Win32_NetworkAdapterConfiguration")
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AppSettingsHelper">
            <summary>
            appSettings in Web.config helper class
            </summary>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetString(System.String,System.String)">
            <summary>
            Get string
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetInt(System.String,System.Int32)">
            <summary>
            Get int
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetLong(System.String,System.Int64)">
            <summary>
            Get long
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetDouble(System.String,System.Double)">
            <summary>
            Get double
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetDecimal(System.String,System.Decimal)">
            <summary>
            Get decimal
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AppSettingsHelper.GetDateTime(System.String,System.DateTime)">
            <summary>
            Get DateTime
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.ArrayHelper">
            <summary>
            得到 Array 快速函数
            </summary>
        </member>
        <member name="M:Data4Net.ArrayHelper.GetString(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            得到一个String通过某char分割后的String Array
            </summary>
            <param name="source"></param>
            <param name="split"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ArrayHelper.GetInt32(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            得到一个String通过某char分割后的Int32 Array
            </summary>
            <param name="source"></param>
            <param name="split"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ArrayHelper.ArrayList2Strings(System.Collections.ArrayList)">
            <summary>
            通过一个ArrayList得到一个String[]
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ArrayHelper.Strings2ArrayList(System.String[])">
            <summary>
            通过一个String[]得到一个ArrayList
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AssemblyHelper">
            <summary>
            AssemblyComHelper
            </summary>
        </member>
        <member name="M:Data4Net.AssemblyHelper.GetComFilePath(System.String)">
            <summary>
            通过注册表得到COM对象路径
            </summary>
            <param name="regPath">TypeLib\{5C857145-E777-440E-81BC-60DA94F03165}\1.0\0\win32</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.RunTlbimp(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            RunTlbimp tlbimp.exe "SOCKETOBJ10Lib.dll" /out:Interop.SOCKETOBJ10Lib.dll /namespace:SOCKETOBJ10Lib /asmversion:1.0.0.0
            </summary>
            <param name="rootPath"></param>
            <param name="comFileName"></param>
            <param name="outFileName"></param>
            <param name="outNamespace"></param>
            <param name="outVersion"></param>
        </member>
        <member name="M:Data4Net.AssemblyHelper.LoadAssemblyType(System.String,System.String)">
            <summary>
            LoadAssemblyComType 得到类和接口列表
            </summary>
            <param name="fileName"></param>
            <param name="baseTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.LoadAssemblyMethod(Data4Net.AssemblyHelperData)">
            <summary>
            LoadAssemblyComMethod 得到方法列表
            </summary>
            <param name="preAssCom"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.LoadAssemblyParameter(Data4Net.AssemblyHelperData)">
            <summary>
            LoadAssemblyComParameter 得到参数列表
            </summary>
            <param name="preAssCom"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.ExecuteInvoke(System.Type,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            ExecuteInvoke 通过反射执行方法, 利用 type.GetConstructor 实例化对象
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="methodParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.ExecuteInvoke(System.Type,System.Reflection.MethodInfo,System.Object[],System.Object[])">
            <summary>
            ExecuteInvoke 通过反射执行方法, 利用 type.GetConstructor 实例化对象
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="classParameters"></param>
            <param name="methodParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.ExecuteInvoke2(System.Type,System.Reflection.MethodInfo)">
            <summary>
            ExecuteInvoke 通过反射执行方法, 利用 Activator.CreateInstance 实例化对象
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.ExecuteInvoke2(System.Type,System.Reflection.MethodInfo,System.Object[],System.Object[])">
            <summary>
            ExecuteInvoke 通过反射执行方法, 利用 Activator.CreateInstance 实例化对象
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="classParameters"></param>
            <param name="methodParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.ExecuteInvoke2(System.Type,System.Reflection.MethodInfo,System.Object[],System.Object[],System.Object@)">
            <summary>
            ExecuteInvoke 通过反射执行方法, 利用 Activator.CreateInstance 实例化对象
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="classParameters"></param>
            <param name="methodParameters"></param>
            <param name="classInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.AssemblyHelper.GetWebserviceCs(System.String,System.String,System.String)">
            <summary>
            得到Webservice的引用CS等文件
            </summary>
            <param name="url"></param>
            <param name="wsNamespace"></param>
            <param name="csname"></param>
        </member>
        <member name="M:Data4Net.AssemblyHelper.GetWebserviceDll(System.String,System.String,System.String)">
            <summary>
            得到Webservice的引用DLL等文件
            </summary>
            <param name="url"></param>
            <param name="wsNamespace"></param>
            <param name="dllname"></param>
        </member>
        <member name="M:Data4Net.AssemblyHelper.InvokeWebservice(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            动态Web服务代理方法
            </summary>
            <param name="url">传入URL参数, 如http://61.172.252.14:7123/PTSupport.asmx?WSDL</param>
            <param name="wsNamespace">传入空间命名</param>
            <param name="classname">传入类名</param>
            <param name="methodname">传入方法名</param>
            <param name="args">传入参数，本参数为顺序参数</param>
        </member>
        <member name="T:Data4Net.AssemblyHelperData">
            <summary>
            AssemblyComInfo
            </summary>
        </member>
        <member name="P:Data4Net.AssemblyHelperData.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Data4Net.AssemblyHelperData.ComObject">
            <summary>
            ComObject
            </summary>
        </member>
        <member name="P:Data4Net.AssemblyHelperData.TypeName">
            <summary>
            TypeName
            </summary>
        </member>
        <member name="M:Data4Net.AssemblyHelperData.#ctor(System.String,System.Object)">
            <summary>
            AssemblyComInfo
            </summary>
            <param name="name"></param>
            <param name="comObject"></param>
        </member>
        <member name="M:Data4Net.AssemblyHelperData.#ctor(System.String,System.Object,System.String)">
            <summary>
            AssemblyComInfo
            </summary>
            <param name="name"></param>
            <param name="comObject"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Data4Net.AssemblyHelperData.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Data4Net.AssemblyHelperData.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:Data4Net.AssemblyHelperData.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AssemblyWcfHelper">
            <summary>
            AssemblyWcfHelper (需要.net framework 3.5 or 4.0支持)
            </summary>
        </member>
        <member name="T:Data4Net.BusinessResult`1">
            <summary>
            The result is of business.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Data4Net.BusinessResult`1.BusinessObject">
            <summary>
            Data object
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.IsSuccess">
            <summary>
            Is success
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.ReturnCode">
            <summary>
            Return code
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.ReturnMsg">
            <summary>
            Return message
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.DebugMsg">
            <summary>
            debug message
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.ReturnGuid">
            <summary>
            Return GUID. It is only string in your system.
            </summary>
        </member>
        <member name="P:Data4Net.BusinessResult`1.ReturnObjNo">
            <summary>
            Return int code. It is only number in your system.
            </summary>
        </member>
        <member name="M:Data4Net.BusinessResult`1.#ctor">
            <summary>
            BusinessResult
            </summary>
        </member>
        <member name="M:Data4Net.BusinessResult`1.#ctor(`0,System.Boolean,System.Int32,System.String)">
            <summary>
            BusinessResult
            </summary>
            <param name="t">Data object</param>
            <param name="isSuccess">Is success</param>
            <param name="returnCode">Return code</param>
            <param name="returnMsg">Return message</param>
        </member>
        <member name="M:Data4Net.BusinessResult`1.#ctor(`0,System.Boolean,System.Int32,System.String,System.String,System.String)">
            <summary>
            BusinessResult
            </summary>
            <param name="t">Data object</param>
            <param name="isSuccess">Is success</param>
            <param name="returnCode">Return code</param>
            <param name="returnMsg">Return message</param>
            <param name="debugMsg">Debug message</param>
            <param name="returnGuid">Return GUID. It is only string in your system.</param>
        </member>
        <member name="M:Data4Net.BusinessResult`1.#ctor(`0,System.Boolean,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            BusinessResult
            </summary>
            <param name="t">Data object</param>
            <param name="isSuccess">Is success</param>
            <param name="returnCode">Return code</param>
            <param name="returnMsg">Return message</param>
            <param name="debugMsg">Debug message</param>
            <param name="returnGuid">Return GUID. It is only string in your system.</param>
            <param name="returnObjNo">Return int code. It is only number in your system.</param>
        </member>
        <member name="T:Data4Net.CaseConvert">
            <summary>
            全角(SBC case)半角(DBC case)转换类（C#）
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </summary>
        </member>
        <member name="M:Data4Net.CaseConvert.ToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:Data4Net.CaseConvert.ToDBC(System.String)">
             <summary>
             转半角的函数(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:Data4Net.CheckHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.CheckHelper.IsAllowValue(System.String,System.String,System.String)">
            <summary>
            Check value is in allow values.
            </summary>
            <param name="allowValues"></param>
            <param name="value"></param>
            <param name="separtor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.CheckHelper.IsContains(System.String,System.String)">
            <summary>
            check value contains
            </summary>
            <param name="allowValues"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.CheckHelper.IsContains(System.String,System.String,System.String)">
            <summary>
            check value contains
            </summary>
            <param name="allowValues"></param>
            <param name="value"></param>
            <param name="separtor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.CheckHelper.IsContainsStrong(System.String,System.String,System.String)">
            <summary>
            check value contains (strong), 自动判断allowValues,value是否已含有前后的separtor, 没有则自动加上
            </summary>
            <param name="allowValues"></param>
            <param name="value"></param>
            <param name="separtor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.CheckHelper.IsIdCard_China(System.String)">
            <summary>
            Check ID Card of China.
            </summary>
            <param name="idCard"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.CheckHelper.IsIdCard_China(System.String,System.String@)">
            <summary>
            Check ID Card of China.
            </summary>
            <param name="idCard"></param>
            <param name="realEndStr">正确的最后一位校验码字符</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Config.Data4NetConfigurationSectionHandler">
            <summary>
            Data4NetConfigurationSectionHandler Class（已废弃，推荐直接使用ConfigurationSectionHandler）
            </summary>
        </member>
        <member name="T:Data4Net.Config.ConfigurationSectionHandler">
            <summary>
            ConfigurationSectionHandler Class
            </summary>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Config.ConfigurationSectionHandler.Settings">
            <summary> 
            返回整个Data4Net 
            </summary> 
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetString(System.String)">
            <summary>
            Get string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetInt(System.String)">
            <summary>
            Get int
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetLong(System.String)">
            <summary>
            Get long
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDouble(System.String)">
            <summary>
            Get double
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDecimal(System.String)">
            <summary>
            Get decimal
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDateTime(System.String)">
            <summary>
            Get DateTime
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetString(System.String,System.String)">
            <summary>
            Get string
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetInt(System.String,System.Int32)">
            <summary>
            Get int
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetLong(System.String,System.Int64)">
            <summary>
            Get long
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDouble(System.String,System.Double)">
            <summary>
            Get double
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDecimal(System.String,System.Decimal)">
            <summary>
            Get decimal
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Config.ConfigurationSectionHandler.GetDateTime(System.String,System.DateTime)">
            <summary>
            Get DateTime
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.ConstantDefine">
            <summary>
            ConstantDefine Class
            </summary>
        </member>
        <member name="F:Data4Net.ConstantDefine.PRODUCT_NAME">
            <summary>
            PRODUCT_NAME
            </summary>
        </member>
        <member name="F:Data4Net.ConstantDefine.UNIQUE_NAME">
            <summary>
            using in session, javascript function name, etc...
            </summary>
        </member>
        <member name="T:Data4Net.Controls.Web.DropDownListExtend">
            <summary>
            DropDownListExtend Control, Not support IE8 beta1
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.DropDownListExtend.#ctor">
            <summary>
            Init DropDownListExtend Class
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.DropDownListExtend.Items">
            <summary>
            Values item
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.DropDownListExtend.DropDownListButtonWidth">
            <summary>
            DropDownList Button Width
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.DropDownListExtend.DropDownListButtonTop">
            <summary>
            DropDownList Button Top
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.DropDownListExtend.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:Data4Net.Controls.Web.FormActionFixerHelper">
            <summary>
            FormActionFixerHelper
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixerHelper.GetHttpUrl(System.Uri,System.String)">
            <summary>
            GetHttpUrl
            </summary>
            <param name="u"></param>
            <param name="httpPort"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixerHelper.GetHttpsUrl(System.Uri,System.String)">
            <summary>
            GetHttpsUrl
            </summary>
            <param name="u"></param>
            <param name="httpsPort"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixerHelper.GetHttpMainUrlApplicationPath(System.Uri,System.String)">
            <summary>
            GetHttpMainUrlApplicationPath
            </summary>
            <param name="u"></param>
            <param name="httpPort"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixerHelper.GetHttpsMainUrlApplicationPath(System.Uri,System.String)">
            <summary>
            GetHttpsMainUrlApplicationPath
            </summary>
            <param name="u"></param>
            <param name="httpsPort"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Controls.Web.FormActionFixer">
            <summary>
            重载form中action的值, 可以支持http浏览提交到https上, 在BasePage中重载Render方法, 如下: 
                protected override void Render(HtmlTextWriter writer)
                {
                    writer = new FormActionFixer(writer, delegate(string value)
                        {
                            string orgUrl = value;
                            Uri u = HttpContext.Current.Request.Url;
                            if (u.Scheme.ToLower() == "http")
                            {
                                return FormActionFixerHelper.GetHttpsUrl(u, "443");
                            }
                            return string.IsNullOrEmpty(orgUrl) ? u.ToString() : orgUrl;
                        });
                    base.Render(writer);
                }
            </summary>
        </member>
        <member name="T:Data4Net.Controls.Web.FormActionFixer.GetValueMethod">
            <summary>
            GetValueMethod
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixer.#ctor(System.IO.TextWriter,Data4Net.Controls.Web.FormActionFixer.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="getValue"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixer.#ctor(System.IO.TextWriter,System.String,Data4Net.Controls.Web.FormActionFixer.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="tagString"></param>
            <param name="getValue"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixer.WriteBeginTag(System.String)">
            <summary>
            
            </summary>
            <param name="tagName"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.FormActionFixer.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="fEncode"></param>
        </member>
        <member name="T:Data4Net.Controls.Web.PagerUserControlBase">
            <summary>
            Pager UserControl Base Class
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.PagerUserControlBase.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.PagerUserControlBase.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.PagerUserControlBase.PageSize">
            <summary>
            每页记录数，大于0
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.PagerUserControlBase.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.PagerUserControlBase.GetViewStateString(System.String,System.String)">
            <summary>
            得到 Viewstate 的 string 形式
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.PagerUserControlBase.GetViewStateInt(System.String,System.Int32)">
            <summary>
            得到 Viewstate 的 int 形式
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="E:Data4Net.Controls.Web.PagerUserControlBase.PageChanged">
            <summary>
            Event PageChanged
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.PagerUserControlBase.OnPageChanged(System.EventArgs)">
            <summary>
            OnPageChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Data4Net.Controls.Web.PagerUserControlBase.PageChangedEventHandler">
            <summary>
            PageChangedEventHandler
            </summary>
            <param name="src"></param>
            <param name="e"></param>
        </member>
        <member name="T:Data4Net.Controls.Web.Pager">
            <summary>
            分页控件
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.Controls">
            <summary>
            ControlCollection
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.CreateChildControls">
            <summary>
            Create Controls
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.AddPageButtons">
            <summary>
            导航页数
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.AddFirstLastHyperLinks">
            <summary>
            首页末页
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.AddPreviousNextHyperLinks">
            <summary>
            上一页下一页
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RaisePostBackEvent(System.String)">
            <summary>
            实现 IPostBackEventHandler 接口，使 Pager 控件能够处理将窗体发送到服务器时引发的事件。
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Data4Net.Controls.Web.Pager.PageChanged">
            <summary>
            Event PageChanged
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.OnPageChanged(System.EventArgs)">
            <summary>
            OnPageChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Data4Net.Controls.Web.Pager.PageChangedEventHandler">
            <summary>
            PageChangedEventHandler
            </summary>
            <param name="src"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.lnkbtnGo_Click(System.Object,System.EventArgs)">
            <summary>
            Button Click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.lnkbtnPages_Click(System.Object,System.EventArgs)">
            <summary>
            Link Button Click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示控件
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderFirst(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示第一页
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderLast(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示最后一页
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderPrevious(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示Previous
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderNext(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示Next
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderInput(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示输入框
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderGo(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示确定按钮
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.RenderPagingButtons(System.Web.UI.HtmlTextWriter)">
            <summary>
            显示每个页数
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.PageSize">
            <summary>
            每页记录数，大于0
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.ShowPageQuantity">
            <summary>
            中间部位显示几页，最小值为3
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.ShowFirstIndex">
            <summary>
            得到第一个显示的Index
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.ShowLastIndex">
            <summary>
            得到显示的最后一个Index
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.PageNumInPrevNextExtend">
            <summary>
            Extend 多少
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextSpace">
            <summary>
            间隔符号
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNum">
            <summary>
            数字样式
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNumCurrent">
            <summary>
            数字样式 当前页
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNumFirst">
            <summary>
            数字样式 首页
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNumLast">
            <summary>
            数字样式 尾页
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextPrevExtend">
            <summary>
            上X页 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNextExtend">
            <summary>
            下X页 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextPrev">
            <summary>
            上一页 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNext">
            <summary>
            下一页 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextPrevOmission">
            <summary>
            上一页 省略 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextNextOmission">
            <summary>
            下一页 省略 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.TextGo">
            <summary>
            确定 文字
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.CssPageIndex">
            <summary>
            当前页数字样式
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.CssLink">
            <summary>
            链接样式
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.CssInput">
            <summary>
            输入框样式
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.CssButton">
            <summary>
            Go样式
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.Url">
            <summary>
            Url分页方式, 如 http://xxx.xxx.com/xxx.aspx?pg={pg}
            </summary>
        </member>
        <member name="P:Data4Net.Controls.Web.Pager.UrlPg">
            <summary>
            Url分页方式的替换数字的字符表示，如{pg}
            </summary>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.GetViewStateString(System.String,System.String)">
            <summary>
            得到 Viewstate 的 string 形式
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Controls.Web.Pager.GetViewStateInt(System.String,System.Int32)">
            <summary>
            得到 Viewstate 的 int 形式
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.DataHelper">
            <summary>
            数据处理类
            </summary>
        </member>
        <member name="M:Data4Net.DataHelper.AddValue(System.String,System.String,System.String)">
            <summary>
            添加允许列表值
            </summary>
            <param name="orgValues"></param>
            <param name="newValue"></param>
            <param name="separtor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsEqualsIgnoreCase(System.Object,System.Object)">
            <summary>
            比较 2 object 忽略大小写是否相等
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetCountNo(System.Int32,System.Int32,System.Int32)">
            <summary>
            得到总的NO数
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="listNo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetPageCount(System.Int32,System.Int32)">
            <summary>
            Get page count
            </summary>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckPageIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check PageIndex
            </summary>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckPageIndex(System.Int32,System.Int32)">
            <summary>
            Check PageIndex
            </summary>
            <param name="pageCount"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetPagedView(System.Data.DataView,System.Int32,System.Int32)">
            <summary>
            对DataView进行分页
            </summary>
            <param name="dv"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetPagedTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            对DataTable进行分页,起始页为
            </summary>
            <param name="dt"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDataViewByIdx(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            在DataView数据不Clone的情况下，同一个DateView每次显示其中的一些行
            </summary>
            <param name="dt"></param>
            <param name="fieldName">关键字 如idx</param>
            <param name="startIndex">开始的第一个index</param>
            <param name="outCount">一共要输出多少行</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetOrderId(System.Int32)">
            <summary>
            Get order id, format is yyyyMMddHHmmssfff + random number.
            </summary>
            <param name="orderLength">Order length</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetOrderId(System.String,System.Int32)">
            <summary>
            Get order id, format is dateTime format + random number.
            </summary>
            <param name="dateTimeFormat">Example: yyyyMMddHHmmssfff</param>
            <param name="orderLength">Order length</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsNullDataSet(System.Data.DataSet)">
            <summary>
            Check DataSet is null or Rows.Count is 0
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsNullDataSet(System.Data.DataSet,System.Int32)">
            <summary>
            Check DataSet is null or Rows.Count is 0
            </summary>
            <param name="ds"></param>
            <param name="tableIndex">table index</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsNullDataTable(System.Data.DataTable)">
            <summary>
            Check DataTable is null or Rows.Count is 0
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDataRowValue(System.Data.DataColumnCollection,System.Data.DataRow,System.String)">
            <summary>
            得到一个DataRow的一列数据的object形式, 如果该列不存在, 或该列为null, DBNull.Value, 则返回null
            </summary>
            <param name="dcc"></param>
            <param name="dr"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDataRowValueToString(System.Data.DataColumnCollection,System.Data.DataRow,System.String)">
            <summary>
            得到一个DataRow的一列数据的string形式, 如果该列不存在, 或该列为null, DBNull.Value, 则返回""
            </summary>
            <param name="dcc"></param>
            <param name="dr"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Int16,System.Int16,System.Int16,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 short
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.UInt16,System.UInt16,System.UInt16,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 ushort
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Int32,System.Int32,System.Int32,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 int
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.UInt32,System.UInt32,System.UInt32,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 uint
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Int64,System.Int64,System.Int64,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 long
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.UInt64,System.UInt64,System.UInt64,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 ulong
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Single,System.Single,System.Single,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 float
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Double,System.Double,System.Double,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 double
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.Decimal,System.Decimal,System.Decimal,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 decimal
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CheckExtent(System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            检查数据取值范围 DateTime
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16(System.Object)">
            <summary>
            Check object's type is short
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16(System.Object,System.Int16,System.Int16)">
            <summary>
            Check object's type is short
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16(System.Object,System.Int16,System.Int16,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is short
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16(System.Object,System.Int16,System.Int16,Data4Net.DpMinMaxMethod,System.Int16@)">
            <summary>
            Check object's type is short
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is short
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt16ByBit(System.String,System.Int32,System.Int16@)">
            <summary>
            Check 16,10,8,2 string type is short
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16(System.Object)">
            <summary>
            Check object's type is ushort
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16(System.Object,System.UInt16,System.UInt16)">
            <summary>
            Check object's type is ushort
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16(System.Object,System.UInt16,System.UInt16,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is ushort
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16(System.Object,System.UInt16,System.UInt16,Data4Net.DpMinMaxMethod,System.UInt16@)">
            <summary>
            Check object's type is ushort
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is ushort
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt16ByBit(System.String,System.Int32,System.UInt16@)">
            <summary>
            Check 16,10,8,2 string type is ushort
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32(System.Object)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32(System.Object,System.Int32,System.Int32)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32(System.Object,System.Int32,System.Int32,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32(System.Object,System.Int32,System.Int32,Data4Net.DpMinMaxMethod,System.Int32@)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is int
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt32ByBit(System.String,System.Int32,System.Int32@)">
            <summary>
            Check 16,10,8,2 string type is int
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32(System.Object)">
            <summary>
            Check object's type is uint
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32(System.Object,System.UInt32,System.UInt32)">
            <summary>
            Check object's type is uint
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32(System.Object,System.UInt32,System.UInt32,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is uint
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32(System.Object,System.UInt32,System.UInt32,Data4Net.DpMinMaxMethod,System.UInt32@)">
            <summary>
            Check object's type is uint
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is uint
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt32ByBit(System.String,System.Int32,System.UInt32@)">
            <summary>
            Check 16,10,8,2 string type is uint
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64(System.Object)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64(System.Object,System.Int64,System.Int64)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64(System.Object,System.Int64,System.Int64,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64(System.Object,System.Int64,System.Int64,Data4Net.DpMinMaxMethod,System.Int64@)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is long
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsInt64ByBit(System.String,System.Int32,System.Int64@)">
            <summary>
            Check 16,10,8,2 string type is long
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64(System.Object)">
            <summary>
            Check object's type is ulong
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64(System.Object,System.UInt64,System.UInt64)">
            <summary>
            Check object's type is ulong
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64(System.Object,System.UInt64,System.UInt64,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is ulong
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64(System.Object,System.UInt64,System.UInt64,Data4Net.DpMinMaxMethod,System.UInt64@)">
            <summary>
            Check object's type is ulong
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64ByBit(System.String,System.Int32)">
            <summary>
            Check 16,10,8,2 string type is ulong
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsUInt64ByBit(System.String,System.Int32,System.UInt64@)">
            <summary>
            Check 16,10,8,2 string type is ulong
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsSingle(System.Object)">
            <summary>
            Check object's type is float
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsSingle(System.Object,System.Single,System.Single)">
            <summary>
            Check object's type is float
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsSingle(System.Object,System.Single,System.Single,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is float
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsSingle(System.Object,System.Single,System.Single,Data4Net.DpMinMaxMethod,System.Single@)">
            <summary>
            Check object's type is float
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDouble(System.Object)">
            <summary>
            Check object's type is Double
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDouble(System.Object,System.Double,System.Double)">
            <summary>
            Check object's type is Double
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDouble(System.Object,System.Double,System.Double,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Double
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDouble(System.Object,System.Double,System.Double,Data4Net.DpMinMaxMethod,System.Double@)">
            <summary>
            Check object's type is Double
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDecimal(System.Object)">
            <summary>
            Check object's type is Decimal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDecimal(System.Object,System.Decimal,System.Decimal)">
            <summary>
            Check object's type is Decimal
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDecimal(System.Object,System.Decimal,System.Decimal,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Decimal
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDecimal(System.Object,System.Decimal,System.Decimal,Data4Net.DpMinMaxMethod,System.Decimal@)">
            <summary>
            Check object's type is Decimal
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDateTime(System.Object)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDateTime(System.Object,System.DateTime,System.DateTime)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDateTime(System.Object,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsDateTime(System.Object,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod,System.DateTime@)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsBoolean(System.Object)">
            <summary>
            验证是否是Bool型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsBoolean(System.Object,System.Boolean@)">
            <summary>
            验证是否是Bool型
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.String[])">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.String[],System.Int32)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <param name="defaultIndex">default index.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <returns>默认值为Empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.String)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.Int32)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="maxLength"></param>
            <returns>默认值为Empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.Int32,System.String)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="maxLength"></param>
            <param name="omission"></param>
            <returns>默认值为Empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.Int32,Data4Net.StringLengthMethod)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="maxLength"></param>
            <param name="stringLengthMethod">区分中英文Binary,不区分Text</param>
            <returns>默认值为Empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.Int32,Data4Net.StringLengthMethod,System.String)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="maxLength"></param>
            <param name="stringLengthMethod">区分中英文Binary,不区分Text</param>
            <param name="omission"></param>
            <returns>默认值为Empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetString(System.Object,System.String,System.Int32,Data4Net.StringLengthMethod,System.String)">
            <summary>
            得到字符型数据
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <param name="maxLength">-1为无穷大</param>
            <param name="stringLengthMethod">区分中英文Binary,不区分Text</param>
            <param name="omission"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt16(System.Object)">
            <summary>
            Get short Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt16(System.Object,System.Int16)">
            <summary>
            Get short Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt16(System.Object,System.Int16,System.Int16,System.Int16)">
            <summary>
            Get short Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt16(System.Object,System.Int16,System.Int16,System.Int16,Data4Net.DpMinMaxMethod)">
            <summary>
            Get short Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt16ByBit(System.String,System.Int32,System.Int16)">
            <summary>
            Get short Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt16(System.Object)">
            <summary>
            Get ushort Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt16(System.Object,System.UInt16)">
            <summary>
            Get ushort Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt16(System.Object,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Get ushort Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt16(System.Object,System.UInt16,System.UInt16,System.UInt16,Data4Net.DpMinMaxMethod)">
            <summary>
            Get ushort Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt16ByBit(System.String,System.Int32,System.UInt16)">
            <summary>
            Get ushort Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object,System.Int32[])">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object,System.Int32[],System.Int32)">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <param name="defaultIndex">default index.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object)">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object,System.Int32)">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32(System.Object,System.Int32,System.Int32,System.Int32,Data4Net.DpMinMaxMethod)">
            <summary>
            Get int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt32ByBit(System.String,System.Int32,System.Int32)">
            <summary>
            Get int Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt32(System.Object)">
            <summary>
            Get uint Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt32(System.Object,System.UInt32)">
            <summary>
            Get uint Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt32(System.Object,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Get uint Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt32(System.Object,System.UInt32,System.UInt32,System.UInt32,Data4Net.DpMinMaxMethod)">
            <summary>
            Get uint Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt32ByBit(System.String,System.Int32,System.UInt32)">
            <summary>
            Get uint Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object,System.Int64[])">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object,System.Int64[],System.Int32)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <param name="defaultIndex">default index.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object,System.Int64)">
            <summary>
            Get long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Get long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64(System.Object,System.Int64,System.Int64,System.Int64,Data4Net.DpMinMaxMethod)">
            <summary>
            Get long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetInt64ByBit(System.String,System.Int32,System.Int64)">
            <summary>
            Get long Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt64(System.Object)">
            <summary>
            Get ulong Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt64(System.Object,System.UInt64)">
            <summary>
            Get ulong Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt64(System.Object,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Get ulong Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt64(System.Object,System.UInt64,System.UInt64,System.UInt64,Data4Net.DpMinMaxMethod)">
            <summary>
            Get ulong Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetUInt64ByBit(System.String,System.Int32,System.UInt64)">
            <summary>
            Get ulong Type Value
            </summary>
            <param name="str"></param>
            <param name="fromBase">2,8,10,16</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSingle(System.Object)">
            <summary>
            Get float Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0.0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSingle(System.Object,System.Single)">
            <summary>
            Get float Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSingle(System.Object,System.Single,System.Single,System.Single)">
            <summary>
            Get float Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSingle(System.Object,System.Single,System.Single,System.Single,Data4Net.DpMinMaxMethod)">
            <summary>
            Get float Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object,System.Double[])">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object,System.Double[],System.Int32)">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <param name="valueItem">value list.</param>
            <param name="defaultIndex">default index.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object)">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0.0</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object,System.Double)">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDouble(System.Object,System.Double,System.Double,System.Double,Data4Net.DpMinMaxMethod)">
            <summary>
            Get Double Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDecimal(System.Object)">
            <summary>
            Get Decimal Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0.0M</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDecimal(System.Object,System.Decimal)">
            <summary>
            Get Decimal Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDecimal(System.Object,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Get Decimal Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDecimal(System.Object,System.Decimal,System.Decimal,System.Decimal,Data4Net.DpMinMaxMethod)">
            <summary>
            Get Decimal Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDateTime(System.Object)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is DateTime min value</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDateTime(System.Object,System.DateTime)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDateTime(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetDateTime(System.Object,System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetBoolean(System.Object)">
            <summary>
            得到Bool型
            </summary>
            <param name="obj"></param>
            <returns>默认值为false</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetBoolean(System.Object,System.Boolean)">
            <summary>
            得到Bool型
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetObjectFromAllowList``1(``0,``0,``0[])">
            <summary>
            得到可用范围的数据列表中的一项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objNow">当前对象</param>
            <param name="objDef">默认返回对象</param>
            <param name="objAllows">允许返回对象列表</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsObjectFromAllowList``1(``0,``0[])">
            <summary>
            得到是否在可用范围的数据列表中的一项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objNow"></param>
            <param name="objAllows"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsObjectFromAllowList``1(``0,``0@,``0[])">
            <summary>
            得到是否在可用范围的数据列表中的一项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objNow"></param>
            <param name="objResult">得到允许列表中匹配到的值</param>
            <param name="objAllows"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetStringFromAllowList(System.String,System.String,System.StringComparison,System.String[])">
            <summary>
            得到可用范围的数据列表中的一项
            </summary>
            <param name="objNow">当前对象</param>
            <param name="objDef">默认返回对象</param>
            <param name="strCom">字符串比较类型（是否忽略大小写）</param>
            <param name="objAllows">允许返回对象列表</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsStringFromAllowList(System.String,System.StringComparison,System.String[])">
            <summary>
            得到是否在可用范围的数据列表中的一项
            </summary>
            <param name="objNow"></param>
            <param name="strCom">字符串比较类型（是否忽略大小写）</param>
            <param name="objAllows"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.IsStringFromAllowList(System.String,System.StringComparison,System.String@,System.String[])">
            <summary>
            得到是否在可用范围的数据列表中的一项
            </summary>
            <param name="objNow"></param>
            <param name="strCom">字符串比较类型（是否忽略大小写）</param>
            <param name="objResult">得到允许列表中匹配到的值</param>
            <param name="objAllows"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FillString(System.String,System.Int32)">
            <summary>
            填充字符串
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FillString(System.String,System.String,System.Int32)">
            <summary>
            填充字符串
            </summary>
            <param name="str"></param>
            <param name="fillStr"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FillString(System.String,System.Int32,Data4Net.StringLengthMethod)">
            <summary>
            填充字符串
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <param name="stringLengthMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FillString(System.String,System.String,System.Int32,Data4Net.StringLengthMethod)">
            <summary>
            填充字符串
            </summary>
            <param name="str"></param>
            <param name="fillStr"></param>
            <param name="length"></param>
            <param name="stringLengthMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatInt16(System.Object,System.String)">
            <summary>
            Format short
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatInt32(System.Object,System.String)">
            <summary>
            Format int
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatInt64(System.Object,System.String)">
            <summary>
            Format long
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatDouble(System.Object,System.String)">
            <summary>
            Format double
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatDecimal(System.Object,System.String)">
            <summary>
            Format decimal
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.FormatDateTime(System.Object,System.String)">
            <summary>
            Format datetime
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetPartPwd(System.Int32,System.Int32,System.String,System.Char)">
            <summary>
            得到字符串中部分为密码形式
            </summary>
            <param name="first">正数为从字符串左边开始, 负数为从字符串右边开始</param>
            <param name="length"></param>
            <param name="str"></param>
            <param name="pwdChar"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSpellCode(System.String)">
            <summary> 
            在指定的字符串列表CnStr中检索符合拼音索引字符串
            </summary> 
            <param name="cnStr">汉字字符串，如“我爱中国”</param> 
            <returns>相对应的汉语拼音首字母串，如“WAZG”</returns> 
        </member>
        <member name="M:Data4Net.DataHelper.GetSpellCodeChar(System.String)">
            <summary> 
            得到一个汉字的拼音第一个字母，如果是一个英文字母则直接返回大写字母
            </summary> 
            <param name="cnChar">单个汉字，如“我”</param> 
            <returns>单个大写字母，如“W”</returns> 
        </member>
        <member name="M:Data4Net.DataHelper.StringFormatExUrlEncode(System.String,System.String,System.Object[])">
            <summary>
            string.Format功能增加UrlEncode编码后再处理
            </summary>
            <param name="encodingName"></param>
            <param name="url"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetSplitInfoString(System.String,System.String[])">
            <summary>
            得到含有splitInfo分割符号的字符串组合，如：xxx|yyy|zzz
            </summary>
            <param name="splitInfo"></param>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetStringLengthEx(System.String)">
            <summary>   
            计算文本长度，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="sText">需计算长度的字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetStringLengthEx(System.String,Data4Net.StringLengthMethod)">
            <summary>
            计算文本长度
            </summary>
            <param name="sText">需计算长度的字符串</param>
            <param name="stringLengthMethod">Binary区分中英文, Text不区分中英文</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.CombinePage(System.String[],System.String)">
            <summary>
            根据指定的标记符，合并字符串，并返回string (SplitPage 反作用函数)
            </summary>
            <param name="source">string[] source</param>
            <param name="split">分隔标记符</param>
            <returns>if source == null, return string.empty</returns>
        </member>
        <member name="M:Data4Net.DataHelper.SplitPage(System.String,System.String)">
            <summary>
            根据指定的标记符，分隔字符串，并返回字符数组
            </summary>
            <param name="source">要分隔的字符</param>
            <param name="split">分隔标记符</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.ReplaceEx(System.String,System.String,System.String)">
            <summary>
            C#中String.Replace扩展, 忽略大小写
            </summary>
            <param name="original"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetMsSqlServerDateTime(System.Object)">
            <summary>
            得到一个Ms Sql Server中DateTime范围的日期 (1753-01-01 00:00:00.000 / 9999-12-31 23:59:59.999)
            超出范围返回 MinValue, 即 1753-01-01 00:00:00.000
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetMsSqlServerSmallDateTime(System.Object)">
            <summary>
            得到一个Ms Sql Server中SmallDateTime范围的日期 (1900-01-01 00:00:00.000 / 2079-06-06 23:59:00.000)
            超出范围返回 MinValue, 即 1900-01-01 00:00:00.000
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetExtensions(System.String)">
            <summary>
            得到任意字符串中的结尾扩展名, ex: "aaaa.bb" output "bb"
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetKeyIgnoreCase(System.Collections.Hashtable)">
            <summary>
            Get Hashtable key ignore case by Hashtable
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetKeyIgnoreCase(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get Dictionary key ignore case by Dictionary
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DataHelper.GetKeyIgnoreCase(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            Get SortedDictionary key ignore case by SortedDictionary
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.DateTimeHelper">
            <summary>
            DateTimeHelper
            </summary>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetUnixTicks(System.DateTime)">
            <summary>
            根据时间获取标准Unix时间
            
            Unix系统内核提供的基本时间服务是国际标准时间公元1970年1月1日00:00:00以来经过的秒数,这种秒数是以数据类型time_t表示的。
            我们称它们为日历时间。日历时间包括时间和日期。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_str(System.String)">
            <summary>
            根据时间yyyyMMddHHmmss获取DateTime类型
            
            支持:
            str = yyyyMMdd
            str = yyyyMMddHHmmss
            str = yyyyMMddHHmmssfff
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.CheckExtent(System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            检查日期是否在指定的范围内
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetMsSqlServerDateTime(System.DateTime)">
            <summary>
            得到一个Ms Sql Server中DateTime范围的日期 (1753-01-01 00:00:00.000 / 9999-12-31 23:59:59.999)
            超出范围返回 MinValue, 即 1753-01-01 00:00:00.000
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetMsSqlServerSmallDateTime(System.DateTime)">
            <summary>
            得到一个Ms Sql Server中SmallDateTime范围的日期 (1900-01-01 00:00:00.000 / 2079-06-06 23:59:00.000)
            超出范围返回 MinValue, 即 1900-01-01 00:00:00.000
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.DateFormat(System.DateTime,System.String)">
            <summary>
            格式化日期输出string, 使用区域无关性DateTimeFormatInfo.InvariantInfo
            </summary>
            <param name="dateValue"></param>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Invariant(System.Object)">
            <summary>
            Check object's type is DateTime (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Invariant(System.Object,System.DateTime,System.DateTime)">
            <summary>
            Check object's type is DateTime (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Invariant(System.Object,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is DateTime (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Invariant(System.Object,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod,System.DateTime@)">
            <summary>
            Check object's type is DateTime (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Invariant(System.Object)">
            <summary>
            Get DateTime Type Value (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <returns>Default value is DateTime min value</returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Invariant(System.Object,System.DateTime)">
            <summary>
            Get DateTime Type Value (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Invariant(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Get DateTime Type Value (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Invariant(System.Object,System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            Get DateTime Type Value (System.Globalization.DateTimeFormatInfo.InvariantInfo)
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Cn(System.String)">
            <summary>
            判断格式 yyyy-MM-dd HH:mm:ss.fff 是否是日期型, 是否补0、是否有时间、是否有毫秒都行
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ','
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Cn(System.String,System.DateTime,System.DateTime)">
            <summary>
            判断格式 yyyy-MM-dd HH:mm:ss.fff 是否是日期型, 是否补0、是否有时间、是否有毫秒都行
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ','
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTime_Cn(System.String,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            判断格式 yyyy-MM-dd HH:mm:ss.fff 是否是日期型, 是否补0、是否有时间、是否有毫秒都行
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ','
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Cn(System.String)">
            <summary>
            得到格式 yyyy-MM-dd HH:mm:ss.fff 日期型, 是否补0、是否有月、日、时间、毫秒等都行, 至少必须含有一个数字的年份日期字符串
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ',', '年', '月', '日'等所有非数字字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Cn(System.String,System.DateTime)">
            <summary>
            得到格式 yyyy-MM-dd HH:mm:ss.fff 日期型, 是否补0、是否有月、日、时间、毫秒等都行, 至少必须含有一个数字的年份日期字符串
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ',', '年', '月', '日'等所有非数字字符
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Cn(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            得到格式 yyyy-MM-dd HH:mm:ss.fff 日期型, 是否补0、是否有月、日、时间、毫秒等都行, 至少必须含有一个数字的年份日期字符串
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ',', '年', '月', '日'等所有非数字字符
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.GetDateTime_Cn(System.String,System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            得到格式 yyyy-MM-dd HH:mm:ss.fff 日期型, 是否补0、是否有月、日、时间、毫秒等都行, 至少必须含有一个数字的年份日期字符串
            支持只要是按照 年 月 日 小时 分钟 秒 毫秒 排列的任何字符串，分隔符可以是 ' ', '-', ':', '.', '/', '\\', ',', '年', '月', '日'等所有非数字字符
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateRegex_Cn(System.String)">
            <summary>
            是否为日期型字符串 (目前存在bug, 不能正确区分2月是否含有29日)
            </summary>
            <param name="strSource">日期字符串(2008-05-08)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsTimeRegex_Cn(System.String)">
            <summary>
            是否为时间型字符串
            </summary>
            <param name="strSource">时间字符串(15:00:00)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DateTimeHelper.IsDateTimeRegex_Cn(System.String)">
            <summary>
            是否为日期+时间型字符串 (目前存在bug, 不能正确区分2月是否含有29日)
            </summary>
            <param name="strSource">日期时间字符串(2008-05-08 15:00:00)</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.EncryptHelper">
            <summary>
            Encrypt Class
            </summary>
        </member>
        <member name="M:Data4Net.EncryptHelper.EncodeMd5(System.String,System.String)">
            <summary>
            Encode MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.EncryptHelper.EncodeSha1(System.String,System.String)">
            <summary>
            Encode SHA1
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.CmdHelper">
            <summary>
            Cmd Helper Class
            </summary>
        </member>
        <member name="M:Data4Net.CmdHelper.CmdProcess(System.String)">
            <summary>
            Cmd process dos line
            </summary>
            <param name="dosLine"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.StringLengthMethod">
            <summary>
            字符长度模式
            </summary>
        </member>
        <member name="F:Data4Net.StringLengthMethod.Binary">
            <summary>
            二进制(中文字符长度为2,英文为1)
            </summary>
        </member>
        <member name="F:Data4Net.StringLengthMethod.Text">
            <summary>
            文本(不区分中英文,长度都为1)
            </summary>
        </member>
        <member name="T:Data4Net.StringCompareMethod">
            <summary>
            字符比较模式
            </summary>
        </member>
        <member name="F:Data4Net.StringCompareMethod.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:Data4Net.StringCompareMethod.Text">
            <summary>
            文本(不区分大小写)
            </summary>
        </member>
        <member name="T:Data4Net.DpMinMaxMethod">
            <summary>
            Is has Min or Max
            </summary>
        </member>
        <member name="F:Data4Net.DpMinMaxMethod.HasAll">
            <summary>
            Has all (Min and Max) value
            </summary>
        </member>
        <member name="F:Data4Net.DpMinMaxMethod.HasMin">
            <summary>
            Has min value
            </summary>
        </member>
        <member name="F:Data4Net.DpMinMaxMethod.HasMax">
            <summary>
            Has max value
            </summary>
        </member>
        <member name="F:Data4Net.DpMinMaxMethod.HasNone">
            <summary>
            Has none
            </summary>
        </member>
        <member name="T:Data4Net.SortTypeEnum">
            <summary>
            排序设置
            </summary>
        </member>
        <member name="F:Data4Net.SortTypeEnum.Asc">
            <summary>
            正序排列
            </summary>
        </member>
        <member name="F:Data4Net.SortTypeEnum.Desc">
            <summary>
            倒序排列
            </summary>
        </member>
        <member name="T:Data4Net.ReadTypeEnum">
            <summary>
            字符串读取类型
            </summary>
        </member>
        <member name="F:Data4Net.ReadTypeEnum.ReadToEnd">
            <summary>
            从头到尾的读取
            </summary>
        </member>
        <member name="F:Data4Net.ReadTypeEnum.ReadLineFist">
            <summary>
            读取第一行
            </summary>
        </member>
        <member name="F:Data4Net.ReadTypeEnum.ReadLineArray">
            <summary>
            分别读取每一行
            </summary>
        </member>
        <member name="T:Data4Net.XmlTypeEnum">
            <summary>
            Xml信息类型
            </summary>
        </member>
        <member name="F:Data4Net.XmlTypeEnum.String">
            <summary>
            string
            </summary>
        </member>
        <member name="F:Data4Net.XmlTypeEnum.File">
            <summary>
            file
            </summary>
        </member>
        <member name="T:Data4Net.XmlInnerTypeEnum">
            <summary>
            XmlInner类型
            </summary>
        </member>
        <member name="F:Data4Net.XmlInnerTypeEnum.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Data4Net.XmlInnerTypeEnum.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="T:Data4Net.ErrLogHelper">
            <summary>
            Errer log class（建议直接使用 LogLevel）
            level: trace, debug, info, warn, error, fatal
            </summary>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogTrace(System.Exception,System.String)">
            <summary>
            Error log, the level is trace
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogTrace(System.String,System.String)">
            <summary>
            Error log, the level is trace
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogDebug(System.Exception,System.String)">
            <summary>
            Error log, the level is debug
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogDebug(System.String,System.String)">
            <summary>
            Error log, the level is debug
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogInfo(System.Exception,System.String)">
            <summary>
            Error log, the level is info
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogInfo(System.String,System.String)">
            <summary>
            Error log, the level is info
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogWarn(System.Exception,System.String)">
            <summary>
            Error log, the level is warn
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogWarn(System.String,System.String)">
            <summary>
            Error log, the level is warn
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogError(System.Exception,System.String)">
            <summary>
            Error log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogError(System.String,System.String)">
            <summary>
            Error log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogFatal(System.Exception,System.String)">
            <summary>
            Fatal log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.ErrLogHelper.LogFatal(System.String,System.String)">
            <summary>
            Fatal log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.FilterRealProxy">
            <summary>
             FilterRealProxy类：一个真实代理, 拦截它所代理对象中方法的返回值，并对需要过滤的返回值进行过滤。
             使用方法
                 public void xxx()
                 {
                     Class1 class1 = new Class1();//Class1必须从MarshalByRefObject继承
                     //以下是增加用来过滤的
                     FilterRealProxy proxy = new FilterRealProxy(class1);
                     class1 = (Class1)proxy.GetTransparentProxy();
                     //以上是增加用来过滤的
                     string s = class1.Method1();//要过滤得方法Method1要加属性[StringFilter(FilterType.html)]
                 }
            
             public class Class1 : MarshalByRefObject
             {
                 [StringFilter(FilterType.Iframe)]
                 [StringFilter(FilterType.Object)]
                 public string Method1()
                 {
                     return "";
                 }
             }
            </summary>
        </member>
        <member name="M:Data4Net.FilterRealProxy.#ctor(System.MarshalByRefObject)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Data4Net.FilterRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterRealProxy.Filter(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ReturnValue"></param>
            <param name="MethodName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterRealProxy.IsMatchType(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.StringFilter">
            <summary>
              StringFilter类：自定义属性类, 定义目标元素的过滤类型 
            </summary>
        </member>
        <member name="F:Data4Net.StringFilter._filterType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.StringFilter.#ctor(Data4Net.FilterType)">
            <summary>
            
            </summary>
            <param name="filterType"></param>
        </member>
        <member name="P:Data4Net.StringFilter.FilterType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Data4Net.FilterType">
            <summary>
            枚举类：用于指定过滤类型，例如：对script过滤还是对html进行过滤？
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Script">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Html">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.AHrefScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Iframe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Frameset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Src">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.BadWords">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.Include">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.FilterType.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Data4Net.FilterHandler">
            <summary>
             过滤处理类：根据过滤类型，调用相应的过滤处理方法。
            </summary>
        </member>
        <member name="P:Data4Net.FilterHandler.BadWords">
            <summary>
            这里的非法和不友好字符由你任意加，用“|”分隔，支持正则表达式,由于本Blog禁止贴非法和不友好字符，所以这里无法加上。
            </summary>
        </member>
        <member name="P:Data4Net.FilterHandler.BadWordsToString">
            <summary>
            设置非法和不友好字符所被替换的字符，默认为*
            </summary>
        </member>
        <member name="P:Data4Net.FilterHandler.IsRepeatBadWordsToString">
            <summary>
            设置非法和不友好字符替换时，true一个字符替换一个，false一个字符串替换一个，默认为true
            </summary>
        </member>
        <member name="M:Data4Net.FilterHandler.Process(Data4Net.FilterType,System.String)">
            <summary>
            
            </summary>
            <param name="filterType"></param>
            <param name="filterContent"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterScript(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterAHrefScript(System.String)">
            <summary>
            移除a href script
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterSrc(System.String)">
            <summary>
            移除content
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterInclude(System.String)">
            <summary>
            移除include
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterHtml(System.String)">
            <summary>
            移除html
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterObject(System.String)">
            <summary>
            移除object
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterIframe(System.String)">
            <summary>
            移除iframe
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterFrameset(System.String)">
            <summary>
            移除frameset
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterBadWords(System.String)">
            <summary>
            移除非法或不友好字符
            </summary>
            <param name="chkStr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.FilterHandler.FilterAll(System.String)">
            <summary>
            移除所有的不安全字符
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.HexBase64Conversion">
            <summary>
            HexBase64Conversion
            </summary>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetHexByBase64(System.String)">
            <summary>
            GetHexByBase64
            </summary>
            <param name="base64">ex: ae0MEecnOw==</param>
            <returns>ex: F1A6264</returns>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetBase64ByHex(System.String)">
            <summary>
            GetBase64ByHex
            </summary>
            <param name="hex">ex: F1A6264</param>
            <returns>ex: ae0MEecnOw==</returns>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetBase64(System.Byte[])">
            <summary>
            Get base64 string by byte[]
            </summary>
            <param name="b"></param>
            <returns>ex: ae0MEecnOw==</returns>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetHex(System.Byte[])">
            <summary>
            Get hex string by byte[]
            </summary>
            <param name="b"></param>
            <returns>ex: F1A6264</returns>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetByteByBase64(System.String)">
            <summary>
            Get byte[] by base64 string
            </summary>
            <param name="base64">ex: ae0MEecnOw==</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.HexBase64Conversion.GetByteByHex(System.String)">
            <summary>
            Get byte[] by hex string
            </summary>
            <param name="hex">ex: F1A6264</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.HiLogText">
            <summary>
            高性能日志文本记录类
            <p></p>
            <p>配置信息：</p>
            <p>1. 日志缓存最大尺寸1000000, 写文件堆栈最大尺寸0, 异步写文件时的休眠时间100)</p>
            <p>2. 循环写入2000000次</p>
            <p>性能测试结果：</p>
            <p>1. 同步：25.1秒 118M，即一天可以写406G</p>
            <p>2. 异步：17.5秒 118M，即一天可以写582G</p>
            <p>注：测试电脑为普通PC，即my home's notebook。</p>
            </summary>
        </member>
        <member name="P:Data4Net.HiLogText.DebugMsg">
            <summary>
            Debug信息
            </summary>
        </member>
        <member name="M:Data4Net.HiLogText.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="logTextMaxSize">日志缓存最大尺寸</param>
            <param name="writeFileType">0 同步写文件, 1 异步写文件</param>
            <param name="fsDataMaxSize">写文件堆栈最大尺寸</param>
            <param name="fileSleepTime">异步写文件时的休眠时间</param>
        </member>
        <member name="M:Data4Net.HiLogText.AddLog(System.String,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="filePath"></param>
            <param name="logMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.HiLogText.AddLogOnEndApp">
            <summary>
            当App结束或需要停止日志记录时把缓存中的数据记录到日志文件中时调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.HiLogTextData">
            <summary>
            LogLevelData Class
            </summary>
        </member>
        <member name="P:Data4Net.HiLogTextData.LogContent">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Data4Net.HiLogTextData.FilePath">
            <summary>
            文件日志路径
            </summary>
        </member>
        <member name="T:Data4Net.HiPerfTimer">
            <summary>
            高精度计时器
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.QueryPerformanceCounter(System.Int64@)">
            <summary>
            调用Kernel32.dll
            </summary>
            <param name="lpPerformanceCount"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.HiPerfTimer.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            调用Kernel32.dll
            </summary>
            <param name="lpFrequency"></param>
            <returns></returns>
        </member>
        <member name="F:Data4Net.HiPerfTimer.startTime">
            <summary>
            开始结束时间
            </summary>
        </member>
        <member name="F:Data4Net.HiPerfTimer.stopTime">
            <summary>
            开始结束时间
            </summary>
        </member>
        <member name="F:Data4Net.HiPerfTimer.freq">
            <summary>
            倍频
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.#ctor">
            <summary>
            构造高精度计时器
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.#ctor(System.Boolean)">
            <summary>
            构造高精度计时器
            </summary>
            <param name="isStart"></param>
        </member>
        <member name="M:Data4Net.HiPerfTimer.Init">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:Data4Net.HiPerfTimer.Duration">
            <summary>
            返回执行周期
            </summary>
        </member>
        <member name="M:Data4Net.HiPerfTimer.Stop2Reset">
            <summary>
            停止返回时间间隔并重置开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.HiPerfTimer.Stop2Continue">
            <summary>
            停止返回时间间隔并继续, 不改变开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Hz2Py">
            <summary>
            Hz2Py 汉字转拼音类
            </summary>
        </member>
        <member name="F:Data4Net.Hz2Py.pyValue">
            <summary>
            pyValue
            </summary>
        </member>
        <member name="F:Data4Net.Hz2Py.pyName">
            <summary>
            pyName
            </summary>
        </member>
        <member name="M:Data4Net.Hz2Py.Convert(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="hzString">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="M:Data4Net.Hz2Py.Convert(System.String,System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="hzString">汉字字符串</param>
            <param name="split">分隔符</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:Data4Net.ImageHelper">
            <summary>
            Image helper class
            </summary>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageSize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            得到变换后的图片尺寸
            </summary>
            <param name="imgWidth"></param>
            <param name="imgHeight"></param>
            <param name="maxWidth"></param>
            <param name="maxHeight"></param>
            <param name="outWidth"></param>
            <param name="outHeight"></param>
        </member>
        <member name="M:Data4Net.ImageHelper.IsImage(System.IO.Stream)">
            <summary>
            Check this stream object is image object. 
            调用返回后, imgStream的Postion为被置为0
            </summary>
            <param name="imgStream"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.IsImage(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Check this stream object is image object. 
            调用返回后, imgStream的Postion为被置为0
            </summary>
            <param name="imgStream"></param>
            <param name="width">图片宽度, 如果非图片则返回0</param>
            <param name="height">图片高度, 如果非图片则返回0</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.SaveImage(System.String,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            处理图像后保存到文件
            </summary>
            <param name="destImgFile"></param>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
        </member>
        <member name="M:Data4Net.ImageHelper.SaveImage(System.String,System.IO.Stream,System.Drawing.Imaging.ImageFormat,Data4Net.ImageAddInfo)">
            <summary>
            处理图像后保存到文件
            </summary>
            <param name="destImgFile"></param>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="addInfo"></param>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageByte(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            处理图像后返回二进制流
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageByte(System.IO.Stream,System.Drawing.Imaging.ImageFormat,Data4Net.ImageAddInfo)">
            <summary>
            处理图像后返回二进制流
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="addInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetThumbnailImage(System.String,System.Boolean,System.Byte[]@,System.IO.Stream,System.Drawing.Imaging.ImageFormat,Data4Net.ImageAddInfo)">
            <summary>
            图片处理函数, 输入的来源图片地址 pic file path.
            </summary>
            <param name="destImgFile"></param>
            <param name="isOutByteDestImg"></param>
            <param name="destImg"></param>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="addInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetThumbnailImage(System.String,System.Boolean,System.Byte[]@,System.Byte[],System.Drawing.Imaging.ImageFormat,Data4Net.ImageAddInfo)">
            <summary>
            图片处理函数, 输入的来源图片二进制 pic byte[].
            </summary>
            <param name="destImgFile"></param>
            <param name="isOutByteDestImg"></param>
            <param name="destImg"></param>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="addInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.PostClientSubmitImage(System.String,System.Byte[],System.Drawing.Imaging.ImageFormat,Data4Net.ImageAddInfo,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            PostClient SubmitImage
            <p></p>
            <p>外部使用实例</p>
            <p>        private static void PostImage(string urls, byte[] imgSave)</p>
            <p>        {</p>
            <p>            string imgName = DateTime.Now.ToString(&quot;yyyy-MM&quot;) + &quot;\\&quot;</p>
            <p>                + DateTime.Now.ToString(&quot;yyyyMMddHHmmssfff&quot;)</p>
            <p>                + RandomHelper.GetRndStr(&quot;0123456789&quot;, 4) + &quot;.jpg&quot;; //图片文件名</p>
            <p>            string dataPost = &quot;img={IMG}&quot;</p>
            <p>                    + &quot;&amp;imgname=&quot;</p>
            <p>                    + HttpUtility.UrlEncode(imgName, Encoding.GetEncoding(&quot;utf-8&quot;))</p>
            <p>                    + &quot;&amp;key=&quot;</p>
            <p>                    + Utility.GetCodeByMd5(imgName)</p>
            <p>                    + &quot;&amp;time=&quot;</p>
            <p>                    + HttpUtility.UrlEncode(DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;), Encoding.GetEncoding(&quot;utf-8&quot;));</p>
            <p></p>
            <p>            string error = &quot;&quot;, result = &quot;&quot;;</p>
            <p>            bool r = ImageHelper.PostClientSubmitImage(urls, imgSave, System.Drawing.Imaging.ImageFormat.Jpeg,</p>
            <p>                    GetAddInfo(), dataPost, 20000,</p>
            <p>                    &quot;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)&quot;, &quot;utf-8&quot;,</p>
            <p>                    &quot;^$^&quot;, Environment.NewLine, out result, out error);</p>
            <p>            if (!string.IsNullOrEmpty(error))</p>
            <p>            {</p>
            <p>                LogHelper.WarnMail(&quot;PostImage [EX]&quot; + error);</p>
            <p>            }</p>
            <p>            LogHelper.Info(&quot;PostImage [R=&quot; + r + &quot;][RESULT=&quot; + result + &quot;][URL=&quot; + urls + &quot;]&quot;);</p>
            <p>        }</p>
            <p></p>
            </summary>
            <param name="urls">支持多个URL, 英文字符逗号分割</param>
            <param name="img">图片的二进制数据</param>
            <param name="destImgFormat">图片格式, 如System.Drawing.Imaging.ImageFormat.Jpeg</param>
            <param name="addInfo">图片处理规范数据</param>
            <param name="dataStr">img={IMG}&amp;aa=1&amp;bb=2&amp;cc=3, 其中{IMG}将被替换成byte[] imgSave这个的Convert.ToBase64String()形式, {IMG}区分大写小</param>
            <param name="timeout">20000</param>
            <param name="userAgent">"User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)"; //模拟IE6</param>
            <param name="encodingName">"utf-8"</param>
            <param name="resultSplit">当含有多个result时的分隔符 如 #</param>
            <param name="errorSplit">当含有多个error时的分隔符, 如 System.Environment.NewLine</param>
            <param name="result"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.PostServerSaveImage(System.String,System.String,System.String@,System.String@)">
            <summary>
            PostServer SaveImage
            </summary>
            <param name="imgStr">图片的Base64数据</param>
            <param name="imgFileName">图片路径, 含图片文件名和扩展名 如: c:\xxx\xxx.jpg</param>
            <param name="result"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.PostServerShowImage(System.String,System.String@,System.String@)">
            <summary>
            PostServer ShowImage
            </summary>
            <param name="imgFileName">图片路径, 含图片文件名和扩展名 如: c:\xxx\xxx.jpg</param>
            <param name="result"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.SaveIco(System.String,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            保存为ICO文件
            </summary>
            <param name="filePath">原始图片路径</param>
            <param name="savePath">保存ICO路径</param>
            <param name="saveWidth">ICO宽度</param>
            <param name="saveHeight">ICO高度</param>
            <param name="error">异常信息</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageByCanvas(System.Byte[],System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            图片填充到指定大小的画布上, 图片在画布正中央
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="canvasWidth"></param>
            <param name="canvasHeight"></param>
            <param name="canvasColor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageByCanvas(System.Byte[],System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            图片填充到指定大小的画布上, 图片在画布的位置用 imgX imgY 决定
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="canvasWidth"></param>
            <param name="canvasHeight"></param>
            <param name="canvasColor"></param>
            <param name="imgX"></param>
            <param name="imgY"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetImageByCanvas(System.Byte[],System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Boolean)">
            <summary>
            图片填充到指定大小的画布上, 全功能
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="canvasWidth"></param>
            <param name="canvasHeight"></param>
            <param name="canvasColor"></param>
            <param name="imgX"></param>
            <param name="imgY"></param>
            <param name="imgCenter"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetGifFrameCount(System.Byte[],System.Int32)">
            <summary>
            得到一个Gif含有帧的个数
            </summary>
            <param name="sourceImg"></param>
            <param name="frameDimensions"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GetGifFrame(System.Byte[],System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>
            得到Gif某一个frame并输出
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <param name="frameDimensions"></param>
            <param name="frameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ImageHelper.GrayScale(System.Byte[],System.Drawing.Imaging.ImageFormat)">
            <summary>
            图片灰度处理
            </summary>
            <param name="sourceImg"></param>
            <param name="destImgFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.ImageAddInfo">
            <summary>
            ImageAddInfo
            </summary>
        </member>
        <member name="M:Data4Net.ImageAddInfo.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.imgWidth">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.imgHeight">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.content">
            <summary>
            水印文字
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.fontName">
            <summary>
            水印文字 字体, default value: Arial Black
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.fontSize">
            <summary>
            水印文字 字体尺寸, default value: 8.0F
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.alpha">
            <summary>
            水印文字 字体颜色, 三原色, alpha 0-255
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.red">
            <summary>
            水印文字 字体颜色, 三原色, red 0-255
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.green">
            <summary>
            水印文字 字体颜色, 三原色, green 0-255
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.blue">
            <summary>
            水印文字 字体颜色, 三原色, blue 0-255
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoOpacity">
            <summary>
            水印文字 透明度
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoType">
            <summary>
            水印文字 模式：1=XY模式（类似右下角文字水印），2=全屏填充（类似倾斜文字全部背景）
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoX">
            <summary>
            水印文字 坐标 X（当 infoType=1 时有效）
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoY">
            <summary>
            水印文字 坐标 Y（当 infoType=1 时有效）
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoRotateTransform">
            <summary>
            水印文字 倾斜角度（当 infoType=2 时有效）
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoFont">
            <summary>
            水印文字 字体
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.infoFontColor">
            <summary>
            水印文字 字体颜色
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.wateImgFile">
            <summary>
            水印图片地址 file path
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.wateX">
            <summary>
            水印图片 坐标 X
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.wateY">
            <summary>
            水印图片 坐标 Y
            </summary>
        </member>
        <member name="P:Data4Net.ImageAddInfo.wateOpacity">
            <summary>
            水印图片 透明度
            </summary>
        </member>
        <member name="T:Data4Net.IniHelper">
            <summary>
            读取.ini文件类
            </summary>
        </member>
        <member name="M:Data4Net.IniHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            通过kernel32写Ini文件
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IniHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            通过kernel32读Ini文件
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="def"></param>
            <param name="retVal"></param>
            <param name="size"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IniHelper.ReadIniData(System.String,System.String,System.String,System.String)">
            <summary>
            读Ini文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="NoText"></param>
            <param name="iniFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IniHelper.WriteIniData(System.String,System.String,System.String,System.String)">
            <summary>
            写Ini文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Value"></param>
            <param name="iniFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.IOCPData">
            <summary>
            IOCPData
            </summary>
        </member>
        <member name="P:Data4Net.IOCPData.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Data4Net.IOCPData.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Data4Net.IOCPData.ObjValue">
            <summary>
            Object
            </summary>
        </member>
        <member name="T:Data4Net.IOCPSafeThreadPool">
            <summary> This class provides the ability to create a thread pool to manage work.  The
                      class abstracts the Win32 IOCompletionPort API so it requires the use of
                      unmanaged code.  Unfortunately the .NET framework does not provide this functionality </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.CreateIoCompletionPort(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary> Win32Func: Create an IO Completion Port Thread Pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.CloseHandle(System.Runtime.InteropServices.SafeHandle)">
            <summary> Win32Func: Closes an IO Completion Port Thread Pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.PostQueuedCompletionStatus(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary> Win32Func: Posts a context based event into an IO Completion Port Thread Pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.GetQueuedCompletionStatus(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32)">
            <summary> Win32Func: Waits on a context based event from an IO Completion Port Thread Pool.
                      All threads in the pool wait in this Win32 Function </summary>
        </member>
        <member name="F:Data4Net.IOCPSafeThreadPool.INVALID_HANDLE_VALUE">
            <summary> SimTypeConst: This represents the Win32 Invalid Handle Value Macro </summary>
        </member>
        <member name="F:Data4Net.IOCPSafeThreadPool.INIFINITE">
            <summary> SimTypeConst: This represents the Win32 INFINITE Macro </summary>
        </member>
        <member name="F:Data4Net.IOCPSafeThreadPool.SHUTDOWN_IOCPTHREAD">
            <summary> SimTypeConst: This tells the IOCP Function to shutdown </summary>
        </member>
        <member name="T:Data4Net.IOCPSafeThreadPool.USER_FUNCTION">
            <summary> DelType: This is the type of user function to be supplied for the thread pool </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetHandle">
            <summary> SimType: Contains the IO Completion Port Thread Pool handle for this instance </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetMaxConcurrency">
            <summary> SimType: The maximum number of threads that may be running at the same time </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetMinThreadsInPool">
            <summary> SimType: The minimal number of threads the thread pool maintains </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetMaxThreadsInPool">
            <summary> SimType: The maximum number of threads the thread pool maintains </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetCriticalSection">
            <summary> RefType: A serialization object to protect the class state </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetUserFunction">
            <summary> DelType: A reference to a user specified function to be call by the thread pool </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.IsDisposed">
            <summary> SimType: Flag to indicate if the class is disposing </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetCurThreadsInPool">
            <summary> SimType: The current number of threads in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.IncCurThreadsInPool">
            <summary> SimType: Increment current number of threads in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.DecCurThreadsInPool">
            <summary> SimType: Decrement current number of threads in the thread pool </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetActThreadsInPool">
            <summary> SimType: The current number of active threads in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.IncActThreadsInPool">
            <summary> SimType: Increment current number of active threads in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.DecActThreadsInPool">
            <summary> SimType: Decrement current number of active threads in the thread pool </summary>
        </member>
        <member name="P:Data4Net.IOCPSafeThreadPool.GetCurWorkInPool">
            <summary> SimType: The current number of Work posted in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.IncCurWorkInPool">
            <summary> SimType: Increment current number of Work posted in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.DecCurWorkInPool">
            <summary> SimType: Decrement current number of Work posted in the thread pool </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.#ctor(System.Int32,System.Int32,System.Int32,Data4Net.IOCPSafeThreadPool.USER_FUNCTION)">
            <summary> Constructor </summary>
            <param name = "iMaxConcurrency"> SimType: Max number of running threads allowed </param>
            <param name = "iMinThreadsInPool"> SimType: Min number of threads in the pool </param>
            <param name = "iMaxThreadsInPool"> SimType: Max number of threads in the pool </param>
            <param name = "pfnUserFunction"> DelType: Reference to a function to call to perform work </param>
            <exception cref = "T:System.Exception"> Unhandled Exception </exception>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.Finalize">
            <summary> Finalize called by the GC </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.Dispose">
            <summary> Called when the object will be shutdown.  This
                      function will wait for all of the work to be completed
                      inside the queue before completing </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.IOCPFunction">
            <summary> IOCP Worker Function that calls the specified user function </summary>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.PostEvent(Data4Net.IOCPData)">
            <summary> IOCP Worker Function that calls the specified user function </summary>
            <param name="obj"> SimType: A value to be passed with the event </param>
            <exception cref = "T:System.Exception"> Unhandled Exception </exception>
        </member>
        <member name="M:Data4Net.IOCPSafeThreadPool.PostEvent">
            <summary> IOCP Worker Function that calls the specified user function </summary>
            <exception cref = "T:System.Exception"> Unhandled Exception </exception>
        </member>
        <member name="T:Data4Net.IoHelper">
            <summary>
            IO类
            </summary>
        </member>
        <member name="M:Data4Net.IoHelper.CreateDirectory(System.String)">
            <summary>
            Create Directory
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Data4Net.IoHelper.FormatFilePathByDate(System.String)">
            <summary>
            Format file path by date
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.FormatFilePathByDate(System.String,System.DateTime)">
            <summary>
            Format file path by date
            </summary>
            <param name="filePath"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.WriteFile(System.String,System.Byte[],System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Write file by byte file info
            </summary>
            <param name="filePath"></param>
            <param name="byteFileStream"></param>
            <param name="fm">OpenOrCreate</param>
            <param name="fa">Write</param>
        </member>
        <member name="M:Data4Net.IoHelper.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
            Write file
            </summary>
            <param name="content"></param>
            <param name="filePath"></param>
            <param name="isAppend"></param>
        </member>
        <member name="M:Data4Net.IoHelper.WriteFile(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Write file
            </summary>
            <param name="content"></param>
            <param name="filePath"></param>
            <param name="isAppend"></param>
            <param name="encodeName"></param>
        </member>
        <member name="M:Data4Net.IoHelper.WriteFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Write file
            </summary>
            <param name="content"></param>
            <param name="filePath"></param>
            <param name="isAppend"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Data4Net.IoHelper.ReadFile(System.String)">
            <summary>
            Read file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.ReadFile(System.String,System.String)">
            <summary>
            Read file
            </summary>
            <param name="filePath"></param>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            Read file
            </summary>
            <param name="filePath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.ReadFile2Byte(System.String)">
            <summary>
            Read file to byte[]
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.SaveSerializeObjToBinFile(System.Object,System.String)">
            <summary>
            可序列化对象保存为二进制文件
            </summary>
            <param name="obj"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Data4Net.IoHelper.GetSerializeObjByBinFile(System.String)">
            <summary>
            从二进制文件获取可序列化对象
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IoHelper.LoadFileList(System.String,System.Boolean,System.Collections.Generic.List{System.IO.FileSystemInfo}@)">
            <summary>
            得到目录中的文件列表, 支持递归
            </summary>
            <param name="path"></param>
            <param name="isSubdirectory"></param>
            <param name="fsiItem"></param>
        </member>
        <member name="M:Data4Net.IoHelper.FormatFileSize(System.Int64)">
            <summary>
            格式换文件大小输出
            </summary>
            <param name="fileSize"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.IpHelper">
            <summary>
            IpHelper Class
            </summary>
        </member>
        <member name="M:Data4Net.IpHelper.IsIpV4(System.String)">
            <summary>
            判断一个 IP String 是否是 IPV4 的格式
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IpHelper.Int2Ip(System.UInt32)">
            <summary>
            Int2Ip, int to ip string
            
            我们知道 IP地址就是给每个连接在Internet上的主机分配的一个32bit地址。
            按照TCP/IP协议规定，IP地址用二进制来表示，每个IP地址长32bit，比特换算成字节，就是4个字节。
            而c#中int32的数就是四个字节的，但是符号要占掉一位所以就不够了，但是无符号的 UInt32 就没有这样的问题。
            所以理论上讲：UInt32是可以完整保存一个IP地址的。那下面的两个方法就是对IP与UInt32之间的互转换。
            </summary>
            <param name="ipCode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.IpHelper.Ip2Int(System.String)">
            <summary>
            Ip2Int, ip string to int
            
            我们知道 IP地址就是给每个连接在Internet上的主机分配的一个32bit地址。
            按照TCP/IP协议规定，IP地址用二进制来表示，每个IP地址长32bit，比特换算成字节，就是4个字节。
            而c#中int32的数就是四个字节的，但是符号要占掉一位所以就不够了，但是无符号的 UInt32 就没有这样的问题。
            所以理论上讲：UInt32是可以完整保存一个IP地址的。那下面的两个方法就是对IP与UInt32之间的互转换。
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.LogErrHelper">
            <summary>
            LogErrHelper Class（建议直接使用 LogLevel）
            </summary>
        </member>
        <member name="T:Data4Net.LogLevel">
            <summary>
            Log level class
            <p>level: trace, debug, info, warn, error, fatal</p>
            <p>thread: 每个配置的item都为独立的后台线程运行，即 IsBackground 为 true</p>
            <p>配置说明 2.0版本：</p>
            <p>注：程序或站点根目录存放配置文件 Data4NetLogLevel.config</p>
            <p>fileClear: 是否自动删除过期的日志文件, double类型, 单位秒, 默认0.0为不自动删除, 如: 一天前为86400, 三天前为259200 </p>
            <p>fileMsgWriteSize: 最大取值范围在int.MaxValue</p>
            <p>%PID (区分大小写): 日志格式中输出PID (CurrentProcessID), 已支持IIS线程池中配置"最大工作进程数">1时的情况. 即同一个站点在IIS访问时会启用多个进程, 则需要日志按照进程独立记录以便防止发生文件占用和竞争使用.</p>
            <p>%yyyy 或 yyyy: 四位年 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>%MM 或 MM: 两位月 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>%dd 或 dd: 两位日 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>%HH 或 HH: 两位24制小时 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>%mm 或 mm: 两位分钟 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>%ss 或 ss: 两位秒 (如果存在%的前缀, 则该条路径配置不存在%前缀的则不会做替换动作)</p>
            <p>mailSendClass: 0 SmtpClient, 1 MailGo短链接, 2 MailGo长连接</p>
            <p></p>
            <p>&lt;?xml version=&quot;1.0&quot;?&gt;</p>
            <p>&lt;Data4Net&gt;</p>
            <p>  &lt;logLevel isOpen=&quot;1&quot; msgInitialTime=&quot;yyyy-MM-dd HH:mm:ss.fff ## &quot;&gt;</p>
            <p>    &lt;item type=&quot;file&quot; keys=&quot;info,warn&quot;&gt;</p>
            <p>      &lt;fileEncoding&gt;UTF-8&lt;/fileEncoding&gt;</p>
            <p>      &lt;filePath&gt;c:\downloads\xxx1\yyyy-MM-dd-infowarn-%PID.log&lt;/filePath&gt;</p>
            <p>      &lt;fileClear&gt;0&lt;/fileClear&gt;</p>
            <p>      &lt;fileMsgWriteSize&gt;10&lt;/fileMsgWriteSize&gt;</p>
            <p>      &lt;threadArrayMax&gt;100&lt;/threadArrayMax&gt;</p>
            <p>      &lt;sleepTime&gt;100&lt;/sleepTime&gt;</p>
            <p>    &lt;/item&gt;</p>
            <p>    &lt;item type=&quot;file&quot; keys=&quot;info,warn&quot;&gt;</p>
            <p>      &lt;fileEncoding&gt;UTF-8&lt;/fileEncoding&gt;</p>
            <p>      &lt;filePath&gt;c:\downloads\xxx1\%yyyy-%MM-%dd-infowarn-%PID.log&lt;/filePath&gt;</p>
            <p>      &lt;fileClear&gt;0&lt;/fileClear&gt;</p>
            <p>      &lt;fileMsgWriteSize&gt;10&lt;/fileMsgWriteSize&gt;</p>
            <p>      &lt;threadArrayMax&gt;100&lt;/threadArrayMax&gt;</p>
            <p>      &lt;sleepTime&gt;100&lt;/sleepTime&gt;</p>
            <p>    &lt;/item&gt;</p>
            <p>    &lt;item type=&quot;mail&quot; keys=&quot;info,warn&quot;&gt;</p>
            <p>      &lt;mailSendClass&gt;0&lt;/mailSendClass&gt;</p>
            <p>      &lt;mailHost&gt;smtp.163.com&lt;/mailHost&gt;</p>
            <p>      &lt;mailUserName&gt;xxx&lt;/mailUserName&gt;</p>
            <p>      &lt;mailPassword&gt;xxx&lt;/mailPassword&gt;</p>
            <p>      &lt;mailFromName&gt;yyy&lt;/mailFromName&gt;</p>
            <p>      &lt;mailFromEmail&gt;xxx&lt;/mailFromEmail&gt;</p>
            <p>      &lt;mailToEmail&gt;xxx1@xxx.com.cn,xxx1@xxx.com.cn&lt;/mailToEmail&gt;</p>
            <p>      &lt;mailTitle&gt;Data4Net TestWeb Info Warn %ip&lt;/mailTitle&gt;</p>
            <p>      &lt;mailInterval&gt;10&lt;/mailInterval&gt;</p>
            <p>      &lt;threadArrayMax&gt;100&lt;/threadArrayMax&gt;</p>
            <p>      &lt;sleepTime&gt;100&lt;/sleepTime&gt;</p>
            <p>    &lt;/item&gt;</p>
            <p>  &lt;/logLevel&gt;</p>
            <p>&lt;/Data4Net&gt;</p>
            <p></p>
            <p>配置说明 1.0版本，废弃，不建议使用：</p>
            <p>&lt;add key="Data4NetLogLevelIsOpen" value=""/&gt; 0关闭,Others开启</p>
            <p>&lt;add key="Data4NetLogLevelMsgInitialTime" value="yyyy-MM-dd HH:mm:ss.fff ## "/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFileLevel" value="0,0,0,0,0,0"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailLevel" value="-1,-1,-1,0,1,2"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFileEncoding" value="UTF-8"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFilePath0" value="c:\downloads\xxx1\yyyy-MM-dd.log"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFilePath1" value="c:\downloads\xxx1\yyyy-MM-dd-Debug.log"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFileMsgWriteSize" value="100"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFileThreadArrayMax" value="100"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelFileSleepTime" value="100"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailSendClass" value="0"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailHost" value="smtp.163.com"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailUserName" value="xxxx"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailPassword" value="xxx"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailFromName" value=""/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailFromEmail" value="xxx@xxx.com"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailToEmail0" value="xxx1@xxx.com.cn"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailToEmail1" value="xxx2@xxx.com.cn"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailToEmail2" value="xxx3@xxx.com.cn"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailTitle0" value="Warn"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailTitle1" value="Error"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailTitle2" value="Fatal"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailInterval" value="10"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailThreadArrayMax" value="100"/&gt;</p>
            <p>&lt;add key="Data4NetLogLevelMailSleepTime" value="100"/&gt;</p>
            <p>性能测试结果 (Version: 2.173)：</p>
            <p>1. 配置单个日志文件，日志缓存配置为20M(FileMsgWriteSize=20000000,ThreadArrayMax=100)，循环200万次日志接口方法调用，方法调用耗时16.1秒，文件完全写入耗时19.1秒，日志文件450M+，无一次日志丢失，CPU 60%；</p>
            <p>   按照该数据计算，理论上一天可以记录2.03T+的文本数据。</p>
            <p>性能测试结果 (Version: 2.169)：</p>
            <p>1. 配置单个日志文件，日志缓存配置为20M(FileMsgWriteSize=20000000,ThreadArrayMax=100)，循环200万次日志接口方法调用，方法调用耗时15.1秒，文件完全写入耗时18.1秒，日志文件450M+，无一次日志丢失；</p>
            <p>   按照该数据计算，理论上一天可以记录2.1T+的文本数据。</p>
            <p>性能测试结果 (Version: 2.159)：</p>
            <p>1. 配置单个日志文件，日志缓存配置为20M(FileMsgWriteSize=20000000,ThreadArrayMax=100)，循环200万次日志接口方法调用，方法调用耗时19秒，文件完全写入耗时22秒，日志文件450M+，无一次日志丢失；</p>
            <p>   按照该数据计算，理论上一天可以记录1.7T+的文本数据。</p>
            <p>性能测试结果 (Version: 2.106)：</p>
            <p>1. 配置单个日志文件，日志缓存配置为20M(FileMsgWriteSize=20000000,ThreadArrayMax=100)，循环200万次日志接口方法调用，耗时31秒，日志文件420M+，无一次日志丢失；</p>
            <p>2. 配置单个日志文件，日志缓存配置为1M(FileMsgWriteSize=1000000,ThreadArrayMax=100)，循环200万次日志接口方法调用，耗时31秒，日志文件420M+，无一次日志丢失；</p>
            <p>   按照该数据计算，理论上一天可以记录1.2T+的文本数据。</p>
            <p>注：测试电脑为普通PC，即我的办公用机，</p>
            <p></p>
            <p></p>
            <p></p>
            <p>Debug LogLevel: new file in website, name is "LogRunInfo.ashx"</p>
            <p>&lt;%@ WebHandler Language=&quot;C#&quot; Class=&quot;LogRunInfo&quot; %&gt;</p>
            <p></p>
            <p>using System;</p>
            <p>using System.Web;</p>
            <p></p>
            <p>public class LogRunInfo : IHttpHandler {</p>
            <p>    </p>
            <p>    public void ProcessRequest (HttpContext context) {</p>
            <p>        string msg = &quot;&quot;;</p>
            <p>        msg += Data4Net.LogLevel.PrintLogLevelRunInfo(Environment.NewLine); //日志状态</p>
            <p>        msg += Environment.NewLine + Environment.NewLine + Environment.NewLine;</p>
            <p>        msg += Data4Net.MonitorGo.GetAllInfo(Environment.NewLine); //监控数据</p>
            <p>        context.Response.ContentType = &quot;text/plain&quot;;</p>
            <p>        context.Response.Cache.SetCacheability(HttpCacheability.NoCache);</p>
            <p>        context.Response.Write(msg);</p>
            <p>    }</p>
            <p> </p>
            <p>    public bool IsReusable {</p>
            <p>        get {</p>
            <p>            return false;</p>
            <p>        }</p>
            <p>    }</p>
            <p></p>
            <p>}</p>
            <p></p>
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._logLevelFunctionRunTimes">
            <summary>
            构造函数执行的次数统计
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._logIsOpen">
            <summary>
            是否打开
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._logMsgInitialTime">
            <summary>
            日志格式
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._fileLog">
            <summary>
            文本配置信息
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._mailLog">
            <summary>
            邮件配置信息
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._asyncIsRuning">
            <summary>
            异步日志背景线程是否开启
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._asyncLockObj">
            <summary>
            异步日志锁定用对象
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel._errorMsgLast">
            <summary>
            错误记录
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.HtLevelKeyFile">
            <summary>
            存放所有的 File LevelKey 对象集合, 忽略大小写
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.HtLevelKeyMail">
            <summary>
            存放所有的 Mail LevelKey 对象集合, 忽略大小写
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.HtLevelKeyRunning">
            <summary>
            存放所有的 ToLog Running 时的实时 LevelKey 对象集合, 忽略大小写
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.NewLine">
            <summary>
            换行符 windows: \r\n, linux:\n
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.AsyncLogDataItem">
            <summary>
            异步日志队列 (MSDN:此类型的公共静态（在 Visual Basic 中为 Shared）成员是线程安全的。但不能保证任何实例成员是线程安全的。)
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.AsyncLogDataMax">
            <summary>
            异步日志队列数据最大容量, 默认值 10000 (按照一条log 100字节, 10000*100=1M的内存)
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.AsyncLogMaxRun">
            <summary>
            异步方法 ToLogAsync 背景线程数量, 默认值 1
            </summary>
        </member>
        <member name="F:Data4Net.LogLevel.AsyncLogSleepTime">
            <summary>
            异步方法 ToLogAsync 背景线程休眠时间, 单位毫秒, 默认值 100ms
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.GetLogLevelValue(System.String,System.Int32,System.Int32)">
            <summary>
            得到每个等级日志对应的日志对象数组index
            </summary>
            <param name="type"></param>
            <param name="level"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetLogRouteNum(System.String)">
            <summary>
            得到日志对象的index最大值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetConfigInt32Item(System.String,System.Int32,System.Int32)">
            <summary>
            得到一个配置文件的值
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetConfigStringItem(System.String,System.Int32)">
            <summary>
            得到一个配置文件的值
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetConfigStringItem(System.String)">
            <summary>
            得到一组配置文件的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.InitConfig_1">
            <summary>
            1.0版本初始化程序，废弃，不维护
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.InitConfig_2">
            <summary>
            2.0版本初始化程序
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.Init">
            <summary>
            Init class function
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.CloseAsync">
            <summary>
            终止异步线程
            </summary>
        </member>
        <member name="M:Data4Net.LogLevel.Trace(System.Exception,System.String)">
            <summary>
            Error log, the level is trace
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Trace(System.String,System.String)">
            <summary>
            Error log, the level is trace
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.Debug(System.Exception,System.String)">
            <summary>
            Error log, the level is debug
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Debug(System.String,System.String)">
            <summary>
            Error log, the level is debug
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.Info(System.Exception,System.String)">
            <summary>
            Error log, the level is info
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Info(System.String,System.String)">
            <summary>
            Error log, the level is info
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.Warn(System.Exception,System.String)">
            <summary>
            Error log, the level is warn
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Warn(System.String,System.String)">
            <summary>
            Error log, the level is warn
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.Error(System.Exception,System.String)">
            <summary>
            Error log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Error(System.String,System.String)">
            <summary>
            Error log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.Fatal(System.Exception,System.String)">
            <summary>
            Fatal log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
        </member>
        <member name="M:Data4Net.LogLevel.Fatal(System.String,System.String)">
            <summary>
            Fatal log, the level is error
            </summary>
            <param name="ex"></param>
            <param name="customInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.String)">
            <summary>
            ToLog 2.0版本，建议使用
            </summary>
            <param name="msg">错误信息</param>
            <param name="levelKeys">错误等级，例如info, warn, error等</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.String,System.String)">
            <summary>
            ToLog 2.0版本，建议使用
            </summary>
            <param name="msg">错误信息</param>
            <param name="levelKeys">错误等级，例如info, warn, error等</param>
            <param name="logMark">log标识，目前如果有信息，会在mail的title中体现</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.String,System.String,System.DateTime)">
            <summary>
            ToLog 2.0版本，建议使用
            </summary>
            <param name="msg">错误信息</param>
            <param name="levelKeys">错误等级，例如info, warn, error等</param>
            <param name="logMark">log标识，目前如果有信息，会在mail的title中体现</param>
            <param name="logTime">日志时间</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.String[],System.String,System.DateTime)">
            <summary>
            ToLog 2.0版本，推荐使用
            </summary>
            <param name="msg">错误信息</param>
            <param name="levelKeyItem">错误等级，例如info, warn, error等</param>
            <param name="logMark">log标识，目前如果有信息，会在mail的title中体现</param>
            <param name="logTime">日志时间</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLogAsync(System.String,System.String[],System.String,System.DateTime)">
            <summary>
            ToLog 2.0版本，建议使用, 异步版本 (目前性能不稳定，不推荐使用，在极高速情况下会有丢失日志的现象)
            </summary>
            <param name="msg"></param>
            <param name="levelKeyItem"></param>
            <param name="logMark"></param>
            <param name="logTime"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.AsyncToLogRuning(System.Object)">
            <summary>
            异步日志背景线程处理函数
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            ToLog 1.0版本 保持之前1.0版本兼容性，废弃，不建议使用
            </summary>
            <param name="msg"></param>
            <param name="msg2"></param>
            <param name="fileNum"></param>
            <param name="emailNum"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLog(System.String,System.Int32,System.Int32)">
            <summary>
            ToLog 1.0版本 保持之前1.0版本兼容性，废弃，不建议使用
            </summary>
            <param name="msg"></param>
            <param name="fileNum"></param>
            <param name="emailNum"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.ToLogOnEndApp">
            <summary>
            当 Application 结束时把内存中的所有日志信息记录到文本中
            如在 Application_End 或 Application_Disposed 中使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetErrMsg(System.DateTime,System.String)">
            <summary>
            Get error message
            </summary>
            <param name="logTime"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.AddErrorMsgItem(Data4Net.LogLevelData)">
            <summary>
            记录最后一个出错信息
            </summary>
            <param name="logData"></param>
        </member>
        <member name="M:Data4Net.LogLevel.PrintLogLevelRunInfo">
            <summary>
            打印出LogLevel运行信息和最后一个出错信息，Debug时使用，正式运营请勿使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.PrintLogLevelRunInfo(System.String)">
            <summary>
            打印出LogLevel运行信息和最后一个出错信息，Debug时使用，正式运营请勿使用
            </summary>
            <param name="nl"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GoMailContentMethod">
            <summary>
            执行邮件预定义事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeStart">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            返回Stopwatch, 并Start()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeStop(System.Diagnostics.Stopwatch)">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            Stopwatch.Stop(), 并返回Milliseconds
            </summary>
            <param name="sw"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeStop(System.Diagnostics.Stopwatch,System.String@)">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            Stopwatch.Stop(), 并返回Milliseconds
            </summary>
            <param name="sw"></param>
            <param name="levelKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeSpan(System.DateTime)">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            得到接口调用时间
            </summary>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeSpan(System.DateTime,System.String@)">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            得到接口调用时间, 并按照规则返回接口性能等级
            </summary>
            <param name="startTime"></param>
            <param name="levelKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.LogLevel.GetRunTimeLevelKey(System.Double)">
            <summary>
            废弃, 推荐使用MonitorUtility下的该方法
            返回针对double时间间隔评级, 评级标准 poor fair average good excellent
            </summary>
            <param name="tms"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.MailGo">
            <summary>
            MailGo
            </summary>
        </member>
        <member name="T:Data4Net.MailGo.MailTypes">
            <summary>
            邮件格式 html or text
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.MailTypes.Html">
            <summary>
            Html
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.MailTypes.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:Data4Net.MailGo.SmtpValidateTypes">
            <summary>
            smtp服务器的验证方式
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.SmtpValidateTypes.None">
            <summary>
            不需要验证
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.SmtpValidateTypes.Login">
            <summary>
            通用的auth login验证
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.SmtpValidateTypes.Plain">
            <summary>
            通用的auth plain验证
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.SmtpValidateTypes.CRAMMD5">
            <summary>
            CRAM-MD5验证
            </summary>
        </member>
        <member name="T:Data4Net.MailGo.MailMessage">
            <summary>
            邮件内容
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.MailMessage.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="encodeName">邮件的编码方式, 如: System.Text.Encoding.UTF8.BodyName</param>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.Sender">
            <summary>
            获取或设置发件人
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.SenderName">
            <summary>
            获取或设置发件人姓名
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.ReceiverItem">
            <summary>
            获取收件人地址集合
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.Receiver">
            <summary>
            获取, 设置收件人地址集合
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.Subject">
            <summary>
            获取或设置邮件主题
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.SubjectByte">
            <summary>
            获取邮件主题二进制编码
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.XMailer">
            <summary>
            获取或设置邮件传送者, 如: FoxMail 4.0 beta 1 [cn]
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.Attachments">
            <summary>
            获取附件列表
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.MailEncoding">
            <summary>
            获取邮件的编码方式, 如: "UTF-8", "GB2312", System.Text.Encoding.UTF8.BodyName, etc.
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.MailType">
            <summary>
            获取或设置邮件格式
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.MailBody">
            <summary>
            获取或设置邮件正文
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.MailMessage.MailBodyString">
            <summary>
            设置邮件正文
            </summary>
        </member>
        <member name="T:Data4Net.MailGo.Smtp">
            <summary>
            邮件发送类
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._tc">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._ns">
            <summary>
            网络流
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._keepConnect">
            <summary>
            是否保持连接, 长连接
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._errorCodes">
            <summary>
            错误的代码字典
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._rightCodes">
            <summary>
            操作执行成功后的响应代码字典
            </summary>
        </member>
        <member name="F:Data4Net.MailGo.Smtp._CRLF">
            <summary>
            换行常数
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.Smtp.UserID">
            <summary>
            获取或设置登录smtp服务器的帐号
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.Smtp.Password">
            <summary>
            获取或设置登录smtp服务器的密码
            </summary>
        </member>
        <member name="P:Data4Net.MailGo.Smtp.SmtpValidateType">
            <summary>
            获取或设置要使用登录Smtp服务器的验证方式
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="server">主机名</param>
            <param name="port">端口</param>
            <param name="keepConnect">是否保持连接</param>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="ip">主机ip</param>
            <param name="port">端口</param>
            <param name="keepConnect">是否保持连接</param>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.ConvertBase64String(System.String,System.String)">
             <summary>
            将字符串转换为base64
             </summary>
             <param name="str"></param>
             <param name="encodingName"></param>
             <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            建立连接
            </summary>
            <param name="server"></param>
            <param name="port"></param>
            <param name="keepConnect"></param>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.Connect">
            <summary>
            重新建立连接
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.CloseByLock">
            <summary>
            关闭连接 线程安全的
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.Close">
            <summary>
            关闭连接 线程不安全的
            </summary> 
        </member>
        <member name="M:Data4Net.MailGo.Smtp.InitialFields">
            <summary>
            初始化连接
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendCommandInfo(System.String)">
            <summary>
            向SMTP发送命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendCommandMail(System.String,System.String)">
            <summary>
            向SMTP发送命令
            </summary>
            <param name="cmd"></param>
            <param name="mailEncodingName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendCommand(System.String,System.Boolean,System.String)">
            <summary>
            向SMTP发送命令
            </summary>
            <param name="cmd"></param>
            <param name="isMailData"></param>
            <param name="mailEncodingName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.LandingByLogin">
            <summary>
            通过auth login方式登录smtp服务器
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.LandingByPlain">
            <summary>
            通过auth plain方式登录服务器
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.LandingByCRAMMD5">
            <summary>
            通过auth CRAM-MD5方式登录
            </summary>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendMailAsync(Data4Net.MailGo.MailMessage)">
            <summary>
            发送邮件, 异步方法
            </summary>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendMailStable(Data4Net.MailGo.MailMessage)">
            <summary>
            发送邮件, 不抛出异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.SendMail(Data4Net.MailGo.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.AddLogs(System.String)">
            <summary>
            AddLogs
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Data4Net.MailGo.Smtp.GetLogs(System.String)">
            <summary>
            GetLogs
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.MonitorGo">
            <summary>
            监控公共函数类, 供外部应用调用使用
            </summary>
        </member>
        <member name="F:Data4Net.MonitorGo.MaxTsLogs">
            <summary>
            耗时内部数据队列保存最大数量, 该日志保存在内存的一个List对象中, default value is 100
            </summary>
        </member>
        <member name="F:Data4Net.MonitorGo._tsLogs">
            <summary>
            耗时内部数据队列
            </summary>
        </member>
        <member name="F:Data4Net.MonitorGo._tsLogs_LockObj">
            <summary>
            耗时锁定对象
            </summary>
        </member>
        <member name="T:Data4Net.MonitorGo.GetTsMethod">
            <summary>
            耗时代理外部事件
            </summary>
        </member>
        <member name="M:Data4Net.MonitorGo.GetTs(System.String,Data4Net.MonitorGo.GetTsMethod,System.String@)">
            <summary>
            获得处理过程的耗时, 日志格式如: " [LK=" + tsKey + "] [TS=" + ts.ToString("0.00") + "]"
            </summary>
            <param name="name"></param>
            <param name="proc"></param>
            <param name="tsKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetTsLogs(System.String)">
            <summary>
            获得最近1000个处理过程的耗时排名
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetBinFileInfoByWeb(System.String)">
            <summary>
            获取网站DLL文件版本信息等
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetBinFileInfo(System.String,System.String)">
            <summary>
            获取任意路径DLL文件版本信息等
            </summary>
            <param name="newline"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetSysRunInfo(System.String)">
            <summary>
            得到系统信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetSysRunInfo(System.String,System.String)">
            <summary>
            得到系统信息
            </summary>
            <param name="newline"></param>
            <param name="infoPerformanceCounter">分号;分割组, 逗号,分割三个属性, 如: "Processor,% Processor Time,_Total;Memory,Available MBytes,"</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetHardDiskInfo(System.String)">
            <summary>
            得到磁盘空间信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetAdapterInfo(System.String)">
            <summary>
            得到网卡配置信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorGo.GetAllInfo(System.String)">
            <summary>
            Get all info by MonitorGo, MonitorSession, MonitorPage, etc.
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.NetHelper">
            <summary>
            Net Helper Class
            </summary>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnFirstLine(System.String,System.String)">
            <summary>
            Post first line string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnFirstLine(System.String,System.String,System.String)">
            <summary>
            Post first line string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnFirstLine(System.String,System.String,System.Text.Encoding)">
            <summary>
            Post first line string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnFirstLine(System.String,System.String,System.String,System.Int32)">
            <summary>
            Post first line string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnFirstLine(System.String,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Post first line string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturn(System.String,System.String)">
            <summary>
            Post all string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturn(System.String,System.String,System.String)">
            <summary>
            Post all string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturn(System.String,System.String,System.Text.Encoding)">
            <summary>
            Post all string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturn(System.String,System.String,System.String,System.Int32)">
            <summary>
            Post all string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturn(System.String,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Post all string by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnList(System.String,System.String)">
            <summary>
            Post string[] by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnList(System.String,System.String,System.String)">
            <summary>
            Post string[] by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnList(System.String,System.String,System.Text.Encoding)">
            <summary>
            Post string[] by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnList(System.String,System.String,System.String,System.Int32)">
            <summary>
            Post string[] by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnList(System.String,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Post string[] by url
            </summary>
            <param name="url"></param>
            <param name="dataStr"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnFirstLine(System.String)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnFirstLine(System.String,System.String)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnFirstLine(System.String,System.Text.Encoding)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnFirstLine(System.String,System.String,System.Int32)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnFirstLine(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturn(System.String)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturn(System.String,System.String)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturn(System.String,System.Text.Encoding)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturn(System.String,System.String,System.Int32)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturn(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnList(System.String)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnList(System.String,System.String)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnList(System.String,System.Text.Encoding)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnList(System.String,System.String,System.Int32)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnList(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetString(System.String)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetString(System.String,System.String)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetString(System.String,System.Text.Encoding)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetString(System.String,System.String,System.Int32)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetString(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get first line string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringAll(System.String)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringAll(System.String,System.String)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringAll(System.String,System.Text.Encoding)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringAll(System.String,System.String,System.Int32)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringAll(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get all string by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringList(System.String)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringList(System.String,System.String)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringList(System.String,System.Text.Encoding)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringList(System.String,System.String,System.Int32)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetStringList(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Get string[] by url
            </summary>
            <param name="url"></param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="timeout">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetUrlReturnByType(Data4Net.ReadTypeEnum,System.Text.Encoding,System.Net.HttpWebRequest)">
            <summary>
            Get string[] by url
            </summary>
            <param name="type">0 ReadToEnd, 1 ReadLineFirst, 2 ReadLineArrayList</param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="webRequest">
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            httpWebReq.UserAgent = @"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
            webRequest.Timeout = 5000;
            
            //解决HttpWebResponse无法获取cookie的解决办法, 需要在GetResponse()之前new CookieContainer()
            //msdn: 默认情况下，CookieContainer 为 null。 必须将 CookieContainer 对象分配给该属性以在由 GetResponse 方法返回的 HttpWebResponse 的 Cookies 属性中返回 Cookie。
            //msdn: 为安全起见，默认情况下禁用 Cookie。 如果您希望使用 Cookie，请使用 CookieContainer 属性启用 Cookie。
            webRequest.CookieContainer = new CookieContainer();
            
            PS:
            1. 解决HttpWebResponse无法获取cookie的解决办法, 需要在GetResponse()之前new CookieContainer()
            </param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.PostUrlReturnByType(System.String,Data4Net.ReadTypeEnum,System.Text.Encoding,System.Net.HttpWebRequest)">
            <summary>
            Post string[] by url
            </summary>
            <param name="dataStr"></param>
            <param name="type">0 ReadToEnd, 1 ReadLineFirst, 2 ReadLineArrayList</param>
            <param name="encoding">ex: GB2312,UTF-8</param>
            <param name="webRequest">
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            httpWebReq.UserAgent = @"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
            webRequest.Timeout = 5000;
            
            //解决HttpWebResponse无法获取cookie的解决办法, 需要在GetResponse()之前new CookieContainer()
            //msdn: 默认情况下，CookieContainer 为 null。 必须将 CookieContainer 对象分配给该属性以在由 GetResponse 方法返回的 HttpWebResponse 的 Cookies 属性中返回 Cookie。
            //msdn: 为安全起见，默认情况下禁用 Cookie。 如果您希望使用 Cookie，请使用 CookieContainer 属性启用 Cookie。
            webRequest.CookieContainer = new CookieContainer();
            
            PS:
            1. 解决HttpWebResponse无法获取cookie的解决办法, 需要在GetResponse()之前new CookieContainer()
            </param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetWebResponse(System.Net.WebRequest)">
            <summary>
            通过WebRequest得到WebResponse
            
            ex:
            webRequest = (HttpWebRequest)WebRequest.Create(url);
            webRequest.Timeout = timeout; //超时时间
            //webRequest.UserAgent = &quot;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)&quot;; //模拟IE6
            webRequest.UserAgent = userAgent;
            //Post
            webRequest.Method = &quot;POST&quot;;
            Encoding encoding = Encoding.GetEncoding(encodingName);
            byte[] data = encoding.GetBytes(dataStr);
            webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;
            webRequest.ContentLength = data.Length;
            
            // Send the data.
            Stream smreq = webRequest.GetRequestStream();
            smreq.Write(data, 0, data.Length);
            smreq.Close();
            
            webResponse = (HttpWebResponse)NetHelper.GetWebResponse(webRequest);
            using (StreamReader Reader = new StreamReader(webResponse.GetResponseStream(), Encoding.GetEncoding(&quot;utf-8&quot;)))
            {
                result += Reader.ReadToEnd() + resultSplit;
            }
            </summary>
            <param name="webRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetWebResponse(System.Net.HttpWebRequest)">
            <summary>
            通过HttpWebRequest得到WebResponse
            
            ex:
            webRequest = (HttpWebRequest)WebRequest.Create(url);
            webRequest.Timeout = timeout; //超时时间
            //webRequest.UserAgent = &quot;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)&quot;; //模拟IE6
            webRequest.UserAgent = userAgent;
            //Post
            webRequest.Method = &quot;POST&quot;;
            Encoding encoding = Encoding.GetEncoding(encodingName);
            byte[] data = encoding.GetBytes(dataStr);
            webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;
            webRequest.ContentLength = data.Length;
            
            // Send the data.
            Stream smreq = webRequest.GetRequestStream();
            smreq.Write(data, 0, data.Length);
            smreq.Close();
            
            webResponse = (HttpWebResponse)NetHelper.GetWebResponse(webRequest);
            using (StreamReader Reader = new StreamReader(webResponse.GetResponseStream(), Encoding.GetEncoding(&quot;utf-8&quot;)))
            {
                result += Reader.ReadToEnd() + resultSplit;
            }
            </summary>
            <param name="webRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.NetHelper.LocalAddr">
            <summary>
            Get first ip of this machine
            </summary>
        </member>
        <member name="P:Data4Net.NetHelper.LocalAddrs">
            <summary>
            Get ip list of this machine
            </summary>
        </member>
        <member name="M:Data4Net.NetHelper.LocalAddrStringAll(System.String)">
            <summary>
            得到该计算机所有网卡IP的字符串形式, 并用separtor隔开
            </summary>
            <param name="separtor"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetFullIP(System.String)">
            <summary>
            得到全补形式的IP地址,如127.0.0.1-->>127.000.000.001
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send mail by .net control, HTML UTF-8, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Send mail by .net control, UTF-8, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <param name="isBodyHtml">If mail's format is html, set this value to true</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Send mail by .net control, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <param name="isBodyHtml">If mail's format is html, set this value to true</param>
            <param name="encodingName">mail encoding name</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Send mail by .net control, with attachments, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <param name="isBodyHtml">If mail's format is html, set this value to true</param>
            <param name="encodingName">mail encoding name</param>
            <param name="filePath">attachments path</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String[],System.Net.Mail.Attachment[])">
            <summary>
            Send mail by .net control, with attachments, file path or class attachment, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <param name="isBodyHtml">If mail's format is html, set this value to true</param>
            <param name="encodingName">mail encoding name</param>
            <param name="filePath">attachments path</param>
            <param name="attachs">attachments</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String[],System.Net.Mail.Attachment[],System.Boolean,System.String)">
            <summary>
            Send mail by .net control, with attachments, file path or class attachment, 不推荐使用
            </summary>
            <param name="smtpHost">SMTP Address,ex:61.172.242.14</param>
            <param name="smtpUserName">SMTP username, default is empty</param>
            <param name="smtpPassword">SMTP password, default is empty</param>
            <param name="fromName">From name</param>
            <param name="fromEmail">From email address</param>
            <param name="toEamil">To email address</param>
            <param name="title">Title of email</param>
            <param name="content">Conent of email</param>
            <param name="isBodyHtml">If mail's format is html, set this value to true</param>
            <param name="encodingName">mail encoding name</param>
            <param name="filePath">attachments path</param>
            <param name="attachs">attachments</param>
            <param name="isAddBoundary">isAddBoundary</param>
            <param name="boundaryValue">boundaryValue</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.Net.Mail.MailMessage,System.String,System.Int32,System.String,System.String)">
            <summary>
            Send mail by .net control, 推荐使用
            </summary>
            <param name="mailMsg"></param>
            <param name="smtpHost"></param>
            <param name="smtpPort"></param>
            <param name="smtpUserName"></param>
            <param name="smtpPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.NetHelper.SendMailCompletedCallback">
            <summary>
            SendMailCompletedCallback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.NetHelper.SendMail(System.Net.Mail.MailMessage,System.String,System.Int32,System.String,System.String,System.Boolean,Data4Net.NetHelper.SendMailCompletedCallback,System.Object)">
            <summary>
            Send mail by .net control, 推荐使用
            </summary>
            <param name="mailMsg"></param>
            <param name="smtpHost"></param>
            <param name="smtpPort"></param>
            <param name="smtpUserName"></param>
            <param name="smtpPassword"></param>
            <param name="isSendAsync"></param>
            <param name="sendCallback"></param>
            <param name="userToken"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.NetHelper.GetMailMessage(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            GetMailMessage
            </summary>
            <param name="fromName"></param>
            <param name="fromEmail"></param>
            <param name="toEamil"></param>
            <param name="title"></param>
            <param name="content"></param>
            <param name="isBodyHtml"></param>
            <param name="encodingName"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AcceptAllCertificatePolicy2">
            <summary>
            服务器证书认证, For 2.0
            </summary>
        </member>
        <member name="M:Data4Net.AcceptAllCertificatePolicy2.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            服务器证书认证, For 2.0
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.AcceptAllCertificatePolicy">
            <summary>
            服务器证书认证, For 1.1
            </summary>
        </member>
        <member name="M:Data4Net.AcceptAllCertificatePolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
            <summary>
            服务器证书认证, For 1.1
            </summary>
            <param name="srvPoint"></param>
            <param name="certificate"></param>
            <param name="request"></param>
            <param name="certificateProblem"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.QueueSolid">
            <summary>
            QueueSolid Class
            <p>性能测试结果:</p>
            <p>10000 ComeBack 8.3s, 20000 Enqueue 34.8s, 10000 Dequeue 4.9s</p>
            </summary>
        </member>
        <member name="E:Data4Net.QueueSolid.ErrorMethod">
            <summary>
            错误信息事件
            </summary>
        </member>
        <member name="T:Data4Net.QueueSolid.ErrorMethodEventHandler">
            <summary>
            错误信息代理
            </summary>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.QueueSolid.#ctor(System.String)">
            <summary>
            QueueSolid 构造函数
            </summary>
            <param name="basePath"></param>
        </member>
        <member name="M:Data4Net.QueueSolid.Enqueue(System.Object)">
            <summary>
            进队列
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Data4Net.QueueSolid.Dequeue">
            <summary>
            出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.QueueSolid.ComeBack(System.Object@)">
            <summary>
            处于上次异常后残留的文本文件队列
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.QueueSolid.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Data4Net.QueueSolidData">
            <summary>
            QueueSolidData Class
            </summary>
        </member>
        <member name="P:Data4Net.QueueSolidData.Data">
            <summary>
            队列数据
            </summary>
        </member>
        <member name="P:Data4Net.QueueSolidData.FilePath">
            <summary>
            固化文件地址
            </summary>
        </member>
        <member name="T:Data4Net.RandomHelper">
            <summary>
            Random helper class
            </summary>
        </member>
        <member name="P:Data4Net.RandomHelper.ValidationKey">
            <summary>
            ValidationKey
            </summary>
        </member>
        <member name="P:Data4Net.RandomHelper.DecryptionKey">
            <summary>
            DecryptionKey
            </summary>
        </member>
        <member name="M:Data4Net.RandomHelper.CreateKey(System.Int32)">
            <summary>
            Create key by RNGCryptoServiceProvider
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetPwd(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get random password
            </summary>
            <param name="numLen"></param>
            <param name="lowLen"></param>
            <param name="UppLen"></param>
            <param name="SpeLen"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetRndStr(System.String,System.Int32)">
            <summary>
            Get random string
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetRndStrDistinct(System.String,System.Int32)">
            <summary>
            Get random string, distinct
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetRndInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get random int item
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetRndIntDistinct(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get random int item, distinct
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RandomHelper.GetRndIntDistinct(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get random int item, distinct
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="len"></param>
            <param name="whileCount"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.RegexHelper">
            <summary>
            正则表达式帮助类
            </summary>
        </member>
        <member name="M:Data4Net.RegexHelper.ReplaceUrlKeyToEmpty(System.String,System.String)">
            <summary>
            Replace Url Key To Empty, 
            ex: key=aa
            http://aaa.com/aa.aspx?aa=aa -&gt; http://aaa.com/aa.aspx
            http://aaa.com/aa.aspx?bb=bb&amp;aa=aa -&gt; http://aaa.com/aa.aspx?bb=bb
            http://aaa.com/aa.aspx?aa=aa&amp;cc=cc -&gt; http://aaa.com/aa.aspx?cc=cc
            http://aaa.com/aa.aspx?bb=bb&amp;aa=aa&amp;cc=cc -&gt; http://aaa.com/aa.aspx?bb=bb&amp;cc=cc
            http://aaa.com/aa.aspx?bb=vvv&amp;aa=xxx&amp;cc=yyy -&gt; http://aaa.com/aa.aspx?bb=vvv&amp;cc=yyy
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RegexHelper.FilterHtmlEditToUrl(System.String)">
            <summary>
            把Html Edit编辑出的Url字符串过滤成string类型的Url
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsNumber(System.String)">
            <summary>
            是否是存数字的字符串组合
            </summary>
            <param name="value"></param>
            <returns>Empty返回Flase</returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsInt(System.String)">
            <summary>
            是否是整形数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsDouble(System.String)">
            <summary>
            是否是小数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsPostcode(System.String)">
            <summary>
            邮编的检查
            </summary>
            <param name="value"></param>
            <returns>Empty返回Flase</returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsEmail(System.String)">
            <summary>
            邮箱地址的检查
            </summary>
            <param name="value"></param>
            <returns>Empty返回Flase</returns>
        </member>
        <member name="M:Data4Net.RegexHelper.IsWord(System.String)">
            <summary>
            只允许输入英文字母,数字,以及下划线, 可用于电话,手机,身份证的简单验证
            </summary>
            <param name="value"></param>
            <returns>Empty返回Flase</returns>
        </member>
        <member name="T:Data4Net.ScheduledTaskHelper">
            <summary>
            ScheduledTaskHelper Class
            </summary>
        </member>
        <member name="F:Data4Net.ScheduledTaskHelper._taskItem">
            <summary>
            TaskItem
            </summary>
        </member>
        <member name="P:Data4Net.ScheduledTaskHelper.TaskItem">
            <summary>
            TaskItem
            </summary>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.CreateTaskItem(System.Int32)">
            <summary>
            创建 TaskItem
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.DisposeTaskItem">
            <summary>
            销毁 TaskItem
            </summary>
        </member>
        <member name="T:Data4Net.ScheduledTaskHelper.LogMethod">
            <summary>
            log method delegate
            </summary>
            <param name="isRunning"></param>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="returnValue"></param>
            <param name="msg"></param>
        </member>
        <member name="P:Data4Net.ScheduledTaskHelper.IsRunning">
            <summary>
            正在运行的线程数
            </summary>
        </member>
        <member name="P:Data4Net.ScheduledTaskHelper.MaxRunning">
            <summary>
            最大运行的线程数, 默认为1
            </summary>
        </member>
        <member name="P:Data4Net.ScheduledTaskHelper.AddLog">
            <summary>
            日志记录函数
            </summary>
        </member>
        <member name="E:Data4Net.ScheduledTaskHelper.OnAddLog">
            <summary>
            日志记录函数事件
            </summary>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.AddMethod(System.String,System.String)">
            <summary>
            加入类和方法
            </summary>
            <param name="className"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.AddMethod(System.String,System.String,System.String)">
            <summary>
            加入类和方法
            </summary>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="hasReturn">0 or 1</param>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.DeleteMethod(System.String,System.String)">
            <summary>
            删除方法
            </summary>
            <param name="className"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.ClearMethod">
            <summary>
            清空方法
            </summary>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.Start(System.Int64,System.Int64)">
            <summary>
            Start
            </summary>
            <param name="dueTime"></param>
            <param name="period"></param>
        </member>
        <member name="M:Data4Net.ScheduledTaskHelper.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:Data4Net.SecondTimer">
            <summary>
            普通秒计数器
            </summary>
        </member>
        <member name="F:Data4Net.SecondTimer.startTime">
            <summary>
            开始结束时间
            </summary>
        </member>
        <member name="F:Data4Net.SecondTimer.stopTime">
            <summary>
            开始结束时间
            </summary>
        </member>
        <member name="M:Data4Net.SecondTimer.#ctor">
            <summary>
            构造高精度计时器
            </summary>
        </member>
        <member name="M:Data4Net.SecondTimer.#ctor(System.Boolean)">
            <summary>
            构造高精度计时器
            </summary>
            <param name="isStart"></param>
        </member>
        <member name="M:Data4Net.SecondTimer.Init">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="M:Data4Net.SecondTimer.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:Data4Net.SecondTimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:Data4Net.SecondTimer.Duration">
            <summary>
            返回执行周期
            </summary>
        </member>
        <member name="M:Data4Net.SecondTimer.Stop2Reset">
            <summary>
            停止返回时间间隔并重置开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SecondTimer.Stop2Continue">
            <summary>
            停止返回时间间隔并继续, 不改变开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SnapLibrary.NativeMethods">
            <summary>
            从 .Net 2.0 的 System.Windows.Forms.Dll 库提取
            版权所有：微软公司
            </summary>
        </member>
        <member name="T:Data4Net.SnapLibrary.Snapshot">
            <summary>
            ActiveX 组件快照类
            AcitveX 必须实现 IViewObject 接口
            </summary>
        </member>
        <member name="M:Data4Net.SnapLibrary.Snapshot.TakeSnapshot(System.Object,System.Drawing.Rectangle)">
            <summary>
            取快照
            </summary>
            <param name="pUnknown">Com 对象</param>
            <param name="bmpRect">图象大小</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SnapLibrary.SnapWebBrowser">
            <summary>
            SnapWebBrowser
            </summary>
        </member>
        <member name="M:Data4Net.SnapLibrary.SnapWebBrowser.GetImage(System.String,System.Int32,System.Int32)">
            <summary>
            GetImage
            </summary>
            <param name="url"></param>
            <param name="browserWidth"></param>
            <param name="browserHeight"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SnapLibrary.UnsafeNativeMethods">
            <summary>
            从 .Net 2.0 的 System.Windows.Forms.Dll 库提取
            版权所有：微软公司
            </summary>
        </member>
        <member name="T:Data4Net.SerializeHelper">
            <summary>
            SerializeHelper Class
            </summary>
        </member>
        <member name="M:Data4Net.SerializeHelper.SerializeObjToFile(System.Object,System.String)">
            <summary>
            SerializeObjToFile 可序列化对象保存为二进制文件
            </summary>
            <param name="obj"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Data4Net.SerializeHelper.DeserializeObjByFile(System.String)">
            <summary>
            DeserializeObjByFile 从二进制文件获取可序列化对象
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SerializeHelper.SerializeObjToXmlStr(System.Object)">
            <summary>
            SerializeObjToXmlStr 通过对 Object 序列化得到 xml string 类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SerializeHelper.SerializeObjToBin(System.Object)">
            <summary>
            把对象序列化为字节数组
            </summary>
        </member>
        <member name="M:Data4Net.SerializeHelper.DeserializeObjByBin(System.Byte[])">
            <summary>
            把字节数组反序列化成对象
            </summary>
        </member>
        <member name="T:Data4Net.ShareMemoryWin">
            <summary>
            ShareMemoryWin
            </summary>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            SendMessage
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.CreateFileMapping(System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            CreateFileMapping
            </summary>
            <param name="hFile"></param>
            <param name="lpAttributes"></param>
            <param name="flProtect"></param>
            <param name="dwMaxSizeHi"></param>
            <param name="dwMaxSizeLow"></param>
            <param name="lpName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.OpenFileMapping(System.Int32,System.Boolean,System.String)">
            <summary>
            OpenFileMapping
            </summary>
            <param name="dwDesiredAccess"></param>
            <param name="bInheritHandle"></param>
            <param name="lpName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.MapViewOfFile(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            MapViewOfFile
            </summary>
            <param name="hFileMapping"></param>
            <param name="dwDesiredAccess"></param>
            <param name="dwFileOffsetHigh"></param>
            <param name="dwFileOffsetLow"></param>
            <param name="dwNumberOfBytesToMap"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.UnmapViewOfFile(System.IntPtr)">
            <summary>
            UnmapViewOfFile
            </summary>
            <param name="pvBaseAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.CloseHandle(System.IntPtr)">
            <summary>
            CloseHandle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.GetLastError">
            <summary>
            GetLastError
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.#ctor">
            <summary>
            ShareMemoryWin
            
            ex: 
            ShareMemoryWin MemDB = new ShareMemoryWin();
            MemDB.Init("MemTest", 10240);
            </summary>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Finalize">
            <summary>
            ~ShareMemoryWin
            </summary>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Init(System.String,System.Int64)">
            <summary>  
            初始化共享内存  
            </summary>  
            <param name="strName">共享内存名称</param>  
            <param name="lngSize">共享内存大小</param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Close">
            <summary>  
            关闭共享内存  
            </summary>  
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Read(System.Byte[]@,System.Int32,System.Int32,System.Int32)">
            <summary>  
            读数据  
            </summary>  
            <param name="bytData">数据</param>  
            <param name="memIndex">起始地址</param>  
            <param name="length">个数</param>  
            <param name="byteIndex"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Read(System.String@,System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            读数据
            </summary>
            <param name="data"></param>
            <param name="encode"></param>
            <param name="memIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Write(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>  
            写数据  
            </summary>  
            <param name="bytData">数据</param>  
            <param name="memIndex">起始地址</param>  
            <param name="length">个数</param>  
            <param name="byteIndex"></param>  
            <returns></returns>  
        </member>
        <member name="M:Data4Net.ShareMemoryWin.Write(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="data"></param>
            <param name="encode"></param>
            <param name="memIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SqlInjection">
            <summary>
            Sql Injection Class
            </summary>
        </member>
        <member name="P:Data4Net.SqlInjection.LawlessesSql">
            <summary>
            Example: "',''|;|--|and |or |exec |insert |select |delete |update |count |chr |mid |master |truncate |char |declare "
            Default value is "',''"
            </summary>
        </member>
        <member name="M:Data4Net.SqlInjection.IsSafeSql(System.String,System.Object[])">
            <summary>
            分析SQL是否安全
            </summary>
            <param name="lawlessesSql">Custom lawlesses sql</param>
            <param name="args">SQL</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Data4Net.SqlInjection.CheckSql(System.String)">
            <summary>
            Check sql
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SqlInjection.CheckSql(System.String,System.String)">
            <summary>
            Check sql
            </summary>
            <param name="lawlessesSql">Custom lawlesses sql</param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SqlInjection.FilterRquest(System.String)">
            <summary>
            Filter Request, return string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SqlInjection.FilterIdx(System.String)">
            <summary>
            Filter Request, return int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.URLRewriter.BaseModuleRewriter">
            <summary>
            The base class for module rewriting.  This class is abstract, and therefore must be derived from.
            </summary>
            <remarks>Provides the essential base functionality for a rewriter using the HttpModule approach.</remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.BaseModuleRewriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.URLRewriter.BaseModuleRewriter.Init(System.Web.HttpApplication)">
            <summary>
            Executes when the module is initialized.
            </summary>
            <param name="app">A reference to the HttpApplication object processing this request.</param>
            <remarks>Wires up the HttpApplication's AuthorizeRequest event to the
            <see cref="M:Data4Net.URLRewriter.BaseModuleRewriter.BaseModuleRewriter_AuthorizeRequest(System.Object,System.EventArgs)"/> event handler.</remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.BaseModuleRewriter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.URLRewriter.BaseModuleRewriter.BaseModuleRewriter_AuthorizeRequest(System.Object,System.EventArgs)">
            <summary>
            Called when the module's AuthorizeRequest event fires.
            </summary>
            <remarks>This event handler calls the <see cref="M:Data4Net.URLRewriter.BaseModuleRewriter.Rewrite(System.String,System.Web.HttpApplication)"/> method, passing in the
            <b>RawUrl</b> and HttpApplication passed in via the <b>sender</b> parameter.</remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.BaseModuleRewriter.Rewrite(System.String,System.Web.HttpApplication)">
            <summary>
            The <b>Rewrite</b> method must be overriden.  It is where the logic for rewriting an incoming
            URL is performed.
            </summary>
            <param name="requestedPath">The requested RawUrl.  (Includes full path and querystring.)</param>
            <param name="app">The HttpApplication instance.</param>
        </member>
        <member name="T:Data4Net.URLRewriter.Config.RewriterConfigSerializerSectionHandler">
            <summary>
            Deserializes the markup in Web.config into an instance of the <see cref="T:Data4Net.URLRewriter.Config.RewriterConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Data4Net.URLRewriter.Config.RewriterConfigSerializerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an instance of the <see cref="T:Data4Net.URLRewriter.Config.RewriterConfiguration"/> class.
            </summary>
            <remarks>Uses XML Serialization to deserialize the XML in the Web.config file into an
            <see cref="T:Data4Net.URLRewriter.Config.RewriterConfiguration"/> instance.</remarks>
            <returns>An instance of the <see cref="T:Data4Net.URLRewriter.Config.RewriterConfiguration"/> class.</returns>
        </member>
        <member name="T:Data4Net.URLRewriter.Config.RewriterConfiguration">
            <summary>
            Specifies the configuration settings in the Web.config for the RewriterRule.
            </summary>
            <remarks>This class defines the structure of the Rewriter configuration file in the Web.config file.
            Currently, it allows only for a set of rewrite rules; however, this approach allows for customization.
            For example, you could provide a ruleset that <i>doesn't</i> use regular expression matching; or a set of
            constant names and values, which could then be referenced in rewrite rules.
            <p />
            The structure in the Web.config file is as follows:
            <code>
            &lt;configuration&gt;
            	&lt;configSections&gt;
            		&lt;section name="RewriterConfig" 
            		            type="URLRewriter.Config.RewriterConfigSerializerSectionHandler, URLRewriter" /&gt;
            	&lt;/configSections&gt;
            	
            	&lt;RewriterConfig&gt;
            		&lt;Rules&gt;
            			&lt;RewriterRule&gt;
            				&lt;LookFor&gt;<i>pattern</i>&lt;/LookFor&gt;
            				&lt;SendTo&gt;<i>replace with</i>&lt;/SendTo&gt;
            			&lt;/RewriterRule&gt;
            			&lt;RewriterRule&gt;
            				&lt;LookFor&gt;<i>pattern</i>&lt;/LookFor&gt;
            				&lt;SendTo&gt;<i>replace with</i>&lt;/SendTo&gt;
            			&lt;/RewriterRule&gt;
            			...
            			&lt;RewriterRule&gt;
            				&lt;LookFor&gt;<i>pattern</i>&lt;/LookFor&gt;
            				&lt;SendTo&gt;<i>replace with</i>&lt;/SendTo&gt;
            			&lt;/RewriterRule&gt;
            		&lt;/Rules&gt;
            	&lt;/RewriterConfig&gt;
            	
            	&lt;system.web&gt;
            		...
            	&lt;/system.web&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.Config.RewriterConfiguration.GetConfig">
            <summary>
            GetConfig() returns an instance of the <b>RewriterConfiguration</b> class with the values populated from
            the Web.config file.  It uses XML deserialization to convert the XML structure in Web.config into
            a <b>RewriterConfiguration</b> instance.
            </summary>
            <returns>A <see cref="T:Data4Net.URLRewriter.Config.RewriterConfiguration"/> instance.</returns>
        </member>
        <member name="P:Data4Net.URLRewriter.Config.RewriterConfiguration.Rules">
            <summary>
            A <see cref="T:Data4Net.URLRewriter.Config.RewriterRuleCollection"/> instance that provides access to a set of <see cref="T:Data4Net.URLRewriter.Config.RewriterRule"/>s.
            </summary>
        </member>
        <member name="T:Data4Net.URLRewriter.Config.RewriterRule">
            <summary>
            Represents a rewriter rule.  A rewriter rule is composed of a pattern to search for and a string to replace
            the pattern with (if matched).
            </summary>
        </member>
        <member name="P:Data4Net.URLRewriter.Config.RewriterRule.LookFor">
            <summary>
            Gets or sets the pattern to look for.
            </summary>
            <remarks><b>LookFor</b> is a regular expression pattern.  Therefore, you might need to escape
            characters in the pattern that are reserved characters in regular expression syntax (., ?, ^, $, etc.).
            <p />
            The pattern is searched for using the <b>System.Text.RegularExpression.Regex</b> class's <b>IsMatch()</b>
            method.  The pattern is case insensitive.</remarks>
        </member>
        <member name="P:Data4Net.URLRewriter.Config.RewriterRule.SendTo">
            <summary>
            The string to replace the pattern with, if found.
            </summary>
            <remarks>The replacement string may use grouping symbols, like $1, $2, etc.  Specifically, the
            <b>System.Text.RegularExpression.Regex</b> class's <b>Replace()</b> method is used to replace
            the match in <see cref="P:Data4Net.URLRewriter.Config.RewriterRule.LookFor"/> with the value in <b>SendTo</b>.</remarks>
        </member>
        <member name="T:Data4Net.URLRewriter.Config.RewriterRuleCollection">
            <summary>
            The RewriterRuleCollection models a set of RewriterRules in the Web.config file.
            </summary>
            <remarks>
            The RewriterRuleCollection is expressed in XML as:
            <code>
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            ...
            &lt;RewriterRule&gt;
              &lt;LookFor&gt;<i>pattern to search for</i>&lt;/LookFor&gt;
              &lt;SendTo&gt;<i>string to redirect to</i>&lt;/LookFor&gt;
            &lt;RewriterRule&gt;
            </code>
            </remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.Config.RewriterRuleCollection.Add(Data4Net.URLRewriter.Config.RewriterRule)">
            <summary>
            Adds a new RewriterRule to the collection.
            </summary>
            <param name="r">A RewriterRule instance.</param>
        </member>
        <member name="P:Data4Net.URLRewriter.Config.RewriterRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets a RewriterRule at a specified ordinal index.
            </summary>
        </member>
        <member name="T:Data4Net.URLRewriter.ModuleRewriter">
            <summary>
            Provides a rewriting HttpModule.
            </summary>
        </member>
        <member name="M:Data4Net.URLRewriter.ModuleRewriter.Rewrite(System.String,System.Web.HttpApplication)">
            <summary>
            This method is called during the module's BeginRequest event.
            </summary>
            <param name="requestedPath">The RawUrl being requested (includes path and querystring).</param>
            <param name="app">The HttpApplication instance.</param>
        </member>
        <member name="T:Data4Net.URLRewriter.RewriterFactoryHandler">
            <summary>
            Provides an HttpHandler that performs redirection.
            </summary>
            <remarks>The RewriterFactoryHandler checks the rewriting rules, rewrites the path if needed, and then
            delegates the responsibility of processing the ASP.NET page to the <b>PageParser</b> class (the same one
            used by the <b>PageHandlerFactory</b> class).</remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterFactoryHandler.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            GetHandler is executed by the ASP.NET pipeline after the associated HttpModules have run.  The job of
            GetHandler is to return an instance of an HttpHandler that can process the page.
            </summary>
            <param name="context">The HttpContext for this request.</param>
            <param name="requestType">The HTTP data transfer method (<b>GET</b> or <b>POST</b>)</param>
            <param name="url">The RawUrl of the requested resource.</param>
            <param name="pathTranslated">The physical path to the requested resource.</param>
            <returns>An instance that implements IHttpHandler; specifically, an HttpHandler instance returned
            by the <b>PageParser</b> class, which is the same class that the default ASP.NET PageHandlerFactory delegates
            to.</returns>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterFactoryHandler.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Data4Net.URLRewriter.RewriterUtils">
            <summary>
            Provides utility helper methods for the rewriting HttpModule and HttpHandler.
            </summary>
            <remarks>This class is marked as internal, meaning only classes in the same assembly will be
            able to access its methods.</remarks>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterUtils.RewriteUrl(System.Web.HttpContext,System.String)">
            <summary>
            Rewrite's a URL using <b>HttpContext.RewriteUrl()</b>.
            </summary>
            <param name="context">The HttpContext object to rewrite the URL to.</param>
            <param name="sendToUrl">The URL to rewrite to.</param>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterUtils.RewriteUrl(System.Web.HttpContext,System.String,System.String@,System.String@)">
            <summary>
            Rewrite's a URL using <b>HttpContext.RewriteUrl()</b>.
            </summary>
            <param name="context">The HttpContext object to rewrite the URL to.</param>
            <param name="sendToUrl">The URL to rewrite to.</param>
            <param name="sendToUrlLessQString">Returns the value of sendToUrl stripped of the querystring.</param>
            <param name="filePath">Returns the physical file path to the requested page.</param>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterUtils.ResolveUrl(System.String,System.String)">
            <summary>
            Converts a URL into one that is usable on the requesting client.
            </summary>
            <remarks>Converts ~ to the requesting application path.  Mimics the behavior of the 
            <b>Control.ResolveUrl()</b> method, which is often used by control developers.</remarks>
            <param name="appPath">The application path.</param>
            <param name="url">The URL, which might contain ~.</param>
            <returns>A resolved URL.  If the input parameter <b>url</b> contains ~, it is replaced with the
            value of the <b>appPath</b> parameter.</returns>
        </member>
        <member name="M:Data4Net.URLRewriter.RewriterUtils.ResolveMatchPath(System.String,System.String,System.String)">
            <summary>
            当配置不是 ~ 开始头, 支持二级域名, by mars
            </summary>
            <param name="matchPath"></param>
            <param name="absoluteUri"></param>
            <param name="originalLookFor"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SqlSimpleDevelop">
            <summary>
            SqlSimpleDevelop
            </summary>
        </member>
        <member name="M:Data4Net.SqlSimpleDevelop.GetSqlSpSimpleDevelop(System.String,System.Data.DataTable,System.Data.IDataReader,System.String)">
            <summary>
            GetSqlSpSimpleDevelop
            </summary>
            <param name="tableName"></param>
            <param name="schemaTable"></param>
            <param name="reader"></param>
            <param name="newLine"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SqlSimpleDevelop.GetSqlSpSimpleDevelopMsSql(System.String,System.String,System.String)">
            <summary>
            得到MsSql的SP
            </summary>
            <param name="connStr"></param>
            <param name="tableName"></param>
            <param name="newLine"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.SqlSimpleDevelop.GetSqlSpSimpleDevelopOleDb(System.String,System.String,System.String)">
            <summary>
            得到OleDb的SP
            </summary>
            <param name="connStr"></param>
            <param name="tableName"></param>
            <param name="newLine"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.SqlSpSimpleDevelop">
            <summary>
            SqlSpSimpleDevelop
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.TableName">
            <summary>
            TableName
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterType">
            <summary>
            Parameter item object type item
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterSize">
            <summary>
            Parameter item object size item
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.Parameter">
            <summary>
            ex: Name varchar(50), IDX int(4)
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterAt">
            <summary>
            ex: @Name varchar(50), @IDX int(4)
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterList">
            <summary>
            ex: Name,IDX
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterListAt">
            <summary>
            ex: @Name,@IDX
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterWhere">
            <summary>
            ex: Name=@Name AND IDX=@IDX
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.ParameterSet">
            <summary>
            ex: Name=@Name, IDX=@IDX
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.SqlSelect">
            <summary>
            SqlSelect
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.SqlInsert">
            <summary>
            SqlInsert
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.SqlUpdate">
            <summary>
            SqlUpdate
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.SqlDelete">
            <summary>
            SqlDelete
            </summary>
        </member>
        <member name="P:Data4Net.SqlSpSimpleDevelop.SqlCreate">
            <summary>
            SqlCreate
            </summary>
        </member>
        <member name="T:Data4Net.StructHelper">
            <summary>
            StructHelper Class
            </summary>
        </member>
        <member name="M:Data4Net.StructHelper.StructToBytes(System.Object)">
            <summary>
            StructToBytes
            </summary>
            <param name="structObj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.StructHelper.BytesToStruct(System.Byte[],System.Type)">
            <summary>
            BytesToStruct
            </summary>
            <param name="bytes"></param>
            <param name="strcutType"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.VBString">
            <summary>
            参考Microsoft VisualBasic RunTime(Microsoft.VisualBasic.DLL)，里面有一个Strings类，用C#方式实现
            </summary>
        </member>
        <member name="F:Data4Net.VBString.m_InvariantCompareInfo">
            <summary>
            比较模式
            </summary>
        </member>
        <member name="M:Data4Net.VBString.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Data4Net.StringCompareMethod)">
            <summary>
            替换
            </summary>
            <param name="Expression"></param>
            <param name="Find"></param>
            <param name="Replacement"></param>
            <param name="Start"></param>
            <param name="Count"></param>
            <param name="Compare"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.VBString.Join(System.String[],System.String)">
            <summary>
            加入
            </summary>
            <param name="SourceArray"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.VBString.IsArrayEmpty(System.Array)">
            <summary>
            Array是否为空
            </summary>
            <param name="ary"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.VBString.Split(System.String,System.String,System.Int32,Data4Net.StringCompareMethod)">
            <summary>
            分割
            </summary>
            <param name="Expression"></param>
            <param name="Delimiter"></param>
            <param name="Limit">输入字符串应拆分为的子字符串的最大数量。默认值为 –1，指示应在 Delimiter 字符串的每个匹配项处拆分输入字符串。</param>
            <param name="Compare"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.VBString.SplitHelper(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分割帮助
            </summary>
            <param name="sSrc"></param>
            <param name="sFind"></param>
            <param name="cMaxSubStrings"></param>
            <param name="Compare"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.VBString.CopyArray(System.Array,System.Array)">
            <summary>
            复制Array
            </summary>
            <param name="arySrc"></param>
            <param name="aryDest"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.GetCacheDataMethod`1">
            <summary>
            缓存数据代理方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ProcessOnHasCacheDataMethod">
            <summary>
            缓存数据存在处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ProcessGetOnHasCacheDataMethod`1">
            <summary>
            缓存数据存在处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ProcessSetOnHasCacheDataMethod`1">
            <summary>
            缓存数据存在处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ProcessSetWithTimeOnHasCacheDataMethod`1">
            <summary>
            缓存数据存在处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.CacheHelper">
            <summary>
            缓存控制（建议使用, 时间单位由分变为秒）
            </summary>
        </member>
        <member name="F:Data4Net.Web.CacheHelper.SysCache">
            <summary>
            系统Cache
            </summary>
        </member>
        <member name="F:Data4Net.Web.CacheHelper._keyList">
            <summary>
            Cache Key List
            </summary>
        </member>
        <member name="P:Data4Net.Web.CacheHelper.KeyList">
            <summary>
            Cache Key List
            </summary>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData(System.String)">
            <summary>
            Get data.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String)">
            <summary>
            Get data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},System.Double)">
            <summary>
            Get data. if data is not in cache, to add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},System.Double,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessOnHasCacheDataMethod,System.Double,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheSeconds"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessGetOnHasCacheDataMethod{``0},System.Double,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheSeconds"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessSetOnHasCacheDataMethod{``0},System.Double,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheSeconds"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessSetWithTimeOnHasCacheDataMethod{``0},System.Double,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheSeconds"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.InsertData``1(System.String,``0,System.Double)">
            <summary>
            Insert cache, 向 Cache 对象插入项。使用此方法的某一版本改写具有相同 key 参数的现有 Cache 项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.InsertData``1(System.String,``0,System.Double,System.Boolean)">
            <summary>
            Insert cache, 向 Cache 对象插入项。使用此方法的某一版本改写具有相同 key 参数的现有 Cache 项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
            <param name="isAddKeyList"></param>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.AddData``1(System.String,``0,System.Double)">
            <summary>
            Add cache, 将指定项添加到 Cache 对象，该对象具有依赖项、过期和优先级策略以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）。如果 Cache 中已保存了具有相同 key 参数的项，则对此方法的调用将失败。若要使用相同的 key 参数改写现有的 Cache 项，请使用 Insert 方法。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.AddData``1(System.String,``0,System.Double,System.Boolean)">
            <summary>
            Add cache, 将指定项添加到 Cache 对象，该对象具有依赖项、过期和优先级策略以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）。如果 Cache 中已保存了具有相同 key 参数的项，则对此方法的调用将失败。若要使用相同的 key 参数改写现有的 Cache 项，请使用 Insert 方法。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheSeconds">Seconds, -1 is forever</param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.RefreshData(System.String)">
            <summary>
            Clear cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Data4Net.Web.CacheHelper.RefreshDataAll">
            <summary>
            Clear all cache
            </summary>
        </member>
        <member name="T:Data4Net.Web.CacheManager">
            <summary>
            缓存控制（因时间单位为分, 继承CacheHelper Class, 增加了时间单位为分的支持, 建议使用CacheHelper）
            </summary>
        </member>
        <member name="M:Data4Net.Web.CacheManager.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},System.Int32)">
            <summary>
            Get data. if data is not in cache, to add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheMinutes">minutes, -1 is forever</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheManager.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},System.Int32,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheMinutes">minutes, -1 is forever</param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheManager.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessOnHasCacheDataMethod,System.Int32,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheMinutes"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheManager.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessGetOnHasCacheDataMethod{``0},System.Int32,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheMinutes"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheManager.GetData``1(System.String,Data4Net.Web.GetCacheDataMethod{``0},Data4Net.Web.ProcessSetOnHasCacheDataMethod{``0},System.Int32,System.Boolean)">
            <summary>
            Get data. if data is not in cache, to add cache, else to process custom function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <param name="proc"></param>
            <param name="cacheMinutes"></param>
            <param name="isAddKeyList"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.CacheManager.AddData``1(System.String,``0,System.Int32)">
            <summary>
            Add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheMinutes">minutes, -1 is forever</param>
        </member>
        <member name="M:Data4Net.Web.CacheManager.AddData``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Add cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="targetObject"></param>
            <param name="cacheMinutes">minutes, -1 is forever</param>
            <param name="isAddKeyList"></param>
        </member>
        <member name="T:Data4Net.Web.HandlersPageExecuteTime">
            <summary>
            HandlersPageExecuteTime
            </summary>
        </member>
        <member name="F:Data4Net.Web.HandlersPageExecuteTime.IsStopwatch">
            <summary>
            是否使用高精度Stopwatch计时
            </summary>
        </member>
        <member name="E:Data4Net.Web.HandlersPageExecuteTime.BeginRequestMethod">
            <summary>
            BeginRequest记录页面执行时间事件
            </summary>
        </member>
        <member name="T:Data4Net.Web.HandlersPageExecuteTime.BeginRequestMethodEventHandler">
            <summary>
            BeginRequest记录页面执行时间代理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="E:Data4Net.Web.HandlersPageExecuteTime.EndRequestMethod">
            <summary>
            EndRequest记录页面执行时间事件
            </summary>
        </member>
        <member name="T:Data4Net.Web.HandlersPageExecuteTime.EndRequestMethodEventHandler">
            <summary>
            EndRequest记录页面执行时间代理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.HandlersPageExecuteTime.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Override the ProcessRequest property.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Data4Net.Web.HandlersPageExecuteTime.IsReusable">
            <summary>
            Override the IsReusable property.
            </summary>
        </member>
        <member name="T:Data4Net.Web.LoginSsoLocalHelper">
            <summary>
            LoginSsoLocalHelper Class <br/>
            First Redirect Url: http://localhost/LoginSsoLocal.aspx?appId=100001ZIelVNmOrriG&amp;urlback=http://localhost/a.asp&amp;urlencode=gb2312 <br/>
            Second Redirect Url: http://localhost/a.asp?appId=xxxx&amp;timer=xxxx <br/>
            Thrid Redirect Url: http://localhost/LoginSsoLocal.aspx?data=xxxx&amp;appId=100001&amp;vkey=xxxx&amp;urlencode=gb2312&amp;md5type=asp <br/>
            <br/>
            Suggest MD5 key length is greater than 20. <br/>
            MD5: data + appId + timer + key
            </summary>
        </member>
        <member name="T:Data4Net.Web.LoginSsoLocalHelper.LoginSsoLocalMethodProcessData">
            <summary>
            处理data自定义函数
            </summary>
            <param name="appId"></param>
            <param name="data"></param>
            <param name="urlGo"></param>
        </member>
        <member name="T:Data4Net.Web.LoginSsoLocalHelper.LoginSsoLocalMethodLog">
            <summary>
            日志自定义函数
            </summary>
            <param name="log"></param>
        </member>
        <member name="F:Data4Net.Web.LoginSsoLocalHelper._LoginSsoLocalXmlDoc">
            <summary>
            xml配置文件
            </summary>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.PageLoad(System.String,System.String,Data4Net.Web.LoginSsoLocalHelper.LoginSsoLocalMethodProcessData,Data4Net.Web.LoginSsoLocalHelper.LoginSsoLocalMethodLog)">
            <summary>
            LoginSsoLocal 入口
            </summary>
            <param name="xml"></param>
            <param name="ip"></param>
            <param name="processDataMethod"></param>
            <param name="logMethod"></param>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.GetTimer(System.String,System.String,System.String@,System.String@)">
            <summary>
            得到timer, 即guid
            </summary>
            <param name="xml"></param>
            <param name="appId"></param>
            <param name="urlBack"></param>
            <param name="debugMsg"></param>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.ProcessData(System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@,Data4Net.Web.LoginSsoLocalHelper.LoginSsoLocalMethodProcessData)">
            <summary>
            处理过来的data和比对vkey
            </summary>
            <param name="xml"></param>
            <param name="data"></param>
            <param name="appId"></param>
            <param name="vkey"></param>
            <param name="encode"></param>
            <param name="md5Type"></param>
            <param name="vkeyLocal"></param>
            <param name="urlGo"></param>
            <param name="debugMsg"></param>
            <param name="processDataMethod"></param>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.GetString(System.Object,System.String)">
            <summary>
            字符串处理
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.EncodeMd5(System.String,System.String,System.String)">
            <summary>
            Encode MD5
            </summary>
            <param name="s"></param>
            <param name="encode"></param>
            <param name="md5Type"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.LoginSsoLocalHelper.GetLoginSsoLocalValue(System.String,System.String,System.String)">
            <summary>
            得到本地SSO属性
            </summary>
            <param name="xml"></param>
            <param name="appId"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ModulePageExecuteTime">
            <summary>
            ModulePageExecuteTime
            </summary>
        </member>
        <member name="F:Data4Net.Web.ModulePageExecuteTime.IsStopwatch">
            <summary>
            是否使用高精度Stopwatch计时
            </summary>
        </member>
        <member name="E:Data4Net.Web.ModulePageExecuteTime.BeginRequestMethod">
            <summary>
            BeginRequest记录页面执行时间事件
            </summary>
        </member>
        <member name="T:Data4Net.Web.ModulePageExecuteTime.BeginRequestMethodEventHandler">
            <summary>
            BeginRequest记录页面执行时间代理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="E:Data4Net.Web.ModulePageExecuteTime.EndRequestMethod">
            <summary>
            EndRequest记录页面执行时间事件
            </summary>
        </member>
        <member name="T:Data4Net.Web.ModulePageExecuteTime.EndRequestMethodEventHandler">
            <summary>
            EndRequest记录页面执行时间代理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ModulePageExecuteTime.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Data4Net.Web.ModulePageExecuteTime.Init(System.Web.HttpApplication)">
            <summary>
            Init
            </summary>
            <param name="httpApp"></param>
        </member>
        <member name="M:Data4Net.Web.ModulePageExecuteTime.OnBeginRequest(System.Object,System.EventArgs)">
            <summary>
            OnBeginRequest
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Data4Net.Web.ModulePageExecuteTime.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            OnEndRequest
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Data4Net.Web.MonitorPage">
            <summary>
            MonitorPage, 当前分钟数据
            </summary>
        </member>
        <member name="T:Data4Net.Web.MonitorPage.MethodLog">
            <summary>
            日志Delegate
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Data4Net.Web.MonitorPage.ToProcessCountBegin">
            <summary>
            进入Process统计, 初始化
            </summary>
        </member>
        <member name="M:Data4Net.Web.MonitorPage.ToProcessCountEnd(Data4Net.Web.MonitorPage.MethodLog,System.Int32)">
            <summary>
            进入Process统计
            </summary>
            <param name="mlog"></param>
            <param name="nowMinute">当前时间(分)</param>
        </member>
        <member name="M:Data4Net.Web.MonitorPage.GetProcessCount(System.String)">
            <summary>
            获取最近10次ProcessCount的信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="F:Data4Net.Web.MonitorPage.MaxTsLogs">
            <summary>
            耗时内部数据队列保存最大数量, 该日志保存在内存的一个List对象中, default value is 100
            </summary>
        </member>
        <member name="F:Data4Net.Web.MonitorPage.MaxHashList">
            <summary>
            PageTimes队列,IPTimes队列保存最大数量, 该日志保存在内存的一个Dictionary对象中, default value is 100
            </summary>
        </member>
        <member name="F:Data4Net.Web.MonitorPage.MaxDetails">
            <summary>
            细节输出最大个数
            </summary>
        </member>
        <member name="F:Data4Net.Web.MonitorPage._tsLogs">
            <summary>
            耗时内部数据队列
            </summary>
        </member>
        <member name="M:Data4Net.Web.MonitorPage.ToPageCount(System.String,Data4Net.Web.MonitorPage.MethodLog,System.String,System.Double,System.Int32)">
            <summary>
            获得统计数据
            </summary>
            <param name="ip"></param>
            <param name="mlog"></param>
            <param name="pageName">页面名字</param>
            <param name="ts">页面耗时</param>
            <param name="nowMinute">当前时间(分)</param>
        </member>
        <member name="M:Data4Net.Web.MonitorPage.GetPageCount(System.String)">
            <summary>
            获取最近10次PageCount的信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.MonitorSession">
            <summary>
            MonitorSession, 当前分钟数据
            </summary>
        </member>
        <member name="T:Data4Net.Web.MonitorSession.MethodLog">
            <summary>
            日志Delegate
            </summary>
            <param name="msg"></param>
        </member>
        <member name="F:Data4Net.Web.MonitorSession.MaxHashList">
            <summary>
            SessionTimes队列保存最大数量, 该日志保存在内存的一个Dictionary对象中, default value is 100
            </summary>
        </member>
        <member name="F:Data4Net.Web.MonitorSession.MaxDetails">
            <summary>
            细节输出最大个数
            </summary>
        </member>
        <member name="M:Data4Net.Web.MonitorSession.ToUserCount(System.String,Data4Net.Web.MonitorSession.MethodLog,System.Int32)">
            <summary>
            获得统计数据
            </summary>
            <param name="ip"></param>
            <param name="mlog"></param>
            <param name="nowMinute">当前时间(分)</param>
        </member>
        <member name="M:Data4Net.Web.MonitorSession.GetUserCount(System.String)">
            <summary>
            获取最近10次UserCount的信息
            </summary>
            <param name="newline"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.PageExecuteTimeData">
            <summary>
            PageExecuteTimeData Class
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.ExecuteTime">
            <summary>
            页面执行时间
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.StartTime">
            <summary>
            页面开始时间
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.EndTime">
            <summary>
            页面结束时间
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.Timewatch">
            <summary>
            高精度计数器
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.sender">
            <summary>
            函数入口对象sender
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageExecuteTimeData.e">
            <summary>
            函数入口对象e
            </summary>
        </member>
        <member name="T:Data4Net.Web.PageHelper">
            <summary>
            Web Page Helper Class
            </summary>
        </member>
        <member name="M:Data4Net.Web.PageHelper.AlertFormHead(System.Web.UI.Page,System.String)">
            <summary>
            Alert at aspx page form head
            </summary>
            <param name="pg"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Data4Net.Web.PageHelper.AlertFormFoot(System.Web.UI.Page,System.String)">
            <summary>
            Alert at aspx page form foot
            </summary>
            <param name="pg"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Data4Net.Web.PageHelper.Alert(System.String)">
            <summary>
            Alert at aspx page
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.Alert(System.String,System.String)">
            <summary>
            Alert at aspx page
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.Alert(System.String,System.String,System.Int32)">
            <summary>
            Alert at aspx page
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
            <param name="parentDeep">If parentDeep value is -1, function returns window.top javascript code.</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.Alert(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Alert at aspx page
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
            <param name="parentDeep">If parentDeep value is -1, function returns window.top javascript code.</param>
            <param name="targets"></param>
        </member>
        <member name="M:Data4Net.Web.PageHelper.AlertBack(System.String)">
            <summary>
            Alert and back at aspx page
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.AlertClose(System.String)">
            <summary>
            Alert and close aspx page
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetFormGet(System.String,System.String)">
            <summary>
            得到通过Get传递的参数
            </summary>
            <param name="requestEncodeName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetFormGet(System.String)">
            <summary>
            得到通过Get传递的参数
            </summary>
            <param name="requestEncodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetQueryStringGet(System.String,System.String,System.String)">
            <summary>
            得到自定义QueryString的参数
            </summary>
            <param name="queryString"></param>
            <param name="requestEncodeName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetQueryStringGet(System.String,System.String)">
            <summary>
            得到自定义QueryString的参数
            </summary>
            <param name="queryString"></param>
            <param name="requestEncodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetFormPost(System.String,System.String)">
            <summary>
            得到通过Post传递的参数
            </summary>
            <param name="requestEncodeName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetFormPost(System.String)">
            <summary>
            得到通过Post传递的参数
            </summary>
            <param name="requestEncodeName"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Web.PageHelper.PageName">
            <summary>
            格式 Default.aspx,  UserList.aspx, 纯页面名字
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageHelper.PageNameWithAllPath">
            <summary>
            格式 Default.aspx,  Manage/UserList.aspx, 从根目录下的开始算起
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageHelper.PageNameWithAllQueryString">
            <summary>
            格式 Default.aspx?a=x,  UserList.aspx?a=x, 纯页面名字
            </summary>
        </member>
        <member name="P:Data4Net.Web.PageHelper.PageNameWithAllPathAllQueryString">
            <summary>
            格式 Default.aspx?a=x,  Manage/UserList.aspx?a=x, 从根目录下的开始算起
            </summary>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetPagerUrl(System.String)">
            <summary>
            Get Control Pager Url
            </summary>
            <param name="pageIndexName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.PageHelper.GetPagerUrlKey(System.String)">
            <summary>
            Get Control Pager UrlKey
            </summary>
            <param name="pageIndexName"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.SessionHelper">
            <summary>
            Session helper class
            </summary>
        </member>
        <member name="M:Data4Net.Web.SessionHelper.IsNull(System.String)">
            <summary>
            is null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.SessionHelper.IsNullOrEmpty(System.String)">
            <summary>
            is null or empty
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.SessionHelper.GetValueStr(System.String)">
            <summary>
            get string from session
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.SessionHelper.IsEqualValueStr(System.String,System.String)">
            <summary>
            check string from session
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.UriHelper">
            <summary>
            Uri Helper Class
            </summary>
        </member>
        <member name="M:Data4Net.Web.UriHelper.GetQueryString(System.String)">
            <summary> 
            将查询字符串解析转换为名值集合. 
            </summary> 
            <param name="queryString">
            Uri uri = new Uri(url);
            string queryString = uri.Query; 
            </param> 
            <returns></returns> 
        </member>
        <member name="M:Data4Net.Web.UriHelper.GetQueryString(System.String,System.Text.Encoding,System.Boolean)">
            <summary> 
            将查询字符串解析转换为名值集合. 
            </summary> 
            <param name="queryString">
            Uri uri = new Uri(url);
            string queryString = uri.Query; 
            </param> 
            <param name="encoding"></param> 
            <param name="isEncoded"></param> 
            <returns></returns> 
        </member>
        <member name="M:Data4Net.Web.UriHelper.MyUrlDeCode(System.String,System.Text.Encoding)">
            <summary> 
            解码URL. 
            </summary> 
            <param name="encoding">null为自动选择编码</param> 
            <param name="str"></param> 
            <returns></returns> 
        </member>
        <member name="T:Data4Net.Web.UrlHelper">
            <summary>
            UrlHelper Class
            </summary>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.GetValueCollection">
            <summary>
            Get NameValueCollection by gb2312.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.GetValueCollection(System.String)">
            <summary>
            Get NameValueCollection by custom encode name.
            </summary>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.GetValue(System.String)">
            <summary>
            Get string by gb2312.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.GetValue(System.String,System.String)">
            <summary>
            Get string by custom encode name.
            </summary>
            <param name="key"></param>
            <param name="encodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.ShortUrl(System.String)">
            <summary>
            获得短地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.ShortUrl(System.String,System.String)">
            <summary>
            获得短地址
            </summary>
            <param name="url"></param>
            <param name="key">可以自定义生成MD5加密字符传前的混合KEY</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.UrlHelper.GetMD5Hash(System.String)">
            <summary>
            获得短地址MD5算法
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeImg">
            <summary>
            验证码图片生成类
            <p>web.config - httpHandlers add</p>
            <p>&lt;add verb="*" path="*/ValidateCodeImgShow*.aspx" type="Data4Net.Web.ValidateCodeImg, Data4Net" /&gt;</p>
            <p>配置说明 2.0版本：</p>
            <p>注：程序或站点根目录存放配置文件 Data4NetValidateCodeImg.config</p>
            <p>&lt;?xml version=&quot;1.0&quot;?&gt;</p>
            <p>&lt;Data4Net&gt;</p>
            <p>  &lt;validateCodeImg isOpen=&quot;1&quot;&gt;</p>
            <p>    &lt;item sessionId=&quot;CodeImg&quot;&gt;</p>
            <p>      &lt;char&gt;0123456789&lt;/char&gt;</p>
            <p>      &lt;length&gt;6&lt;/length&gt;</p>
            <p>      &lt;showMode&gt;2&lt;/showMode&gt;</p>
            <p>      &lt;noiseLineNumber&gt;2&lt;/noiseLineNumber&gt;</p>
            <p>      &lt;noiseLineWidth&gt;10&lt;/noiseLineWidth&gt;</p>
            <p>      &lt;noiseLineOffsetX&gt;5&lt;/noiseLineOffsetX&gt;</p>
            <p>      &lt;noiseRectangleNumber&gt;0&lt;/noiseRectangleNumber&gt;</p>
            <p>      &lt;noiseDotNumber&gt;200&lt;/noiseDotNumber&gt;</p>
            <p>      &lt;fontName&gt;Arial,Tahoma,Georgia,courier new&lt;/fontName&gt;</p>
            <p>      &lt;fontSize&gt;14&lt;/fontSize&gt;</p>
            <p>      &lt;fontColor&gt;133FA8,999999,CCCC00,FF0000&lt;/fontColor&gt;</p>
            <p>      &lt;backgroundColor&gt;EEEEEE&lt;/backgroundColor&gt;</p>
            <p>      &lt;imgWidth&gt;120&lt;/imgWidth&gt;</p>
            <p>      &lt;imgHeigth&gt;40&lt;/imgHeigth&gt;</p>
            <p>      &lt;showFontSpace&gt;2&lt;/showFontSpace&gt;</p>
            <p>      &lt;showFontLeftInit&gt;2&lt;/showFontLeftInit&gt;</p>
            <p>      &lt;showFontLeftRun&gt;9&lt;/showFontLeftRun&gt;</p>
            <p>      &lt;showFontTopRunMin&gt;-3&lt;/showFontTopRunMin&gt;</p>
            <p>      &lt;showFontTopRunMax&gt;16&lt;/showFontTopRunMax&gt;</p>
            <p>    &lt;/item&gt;</p>
            <p>    &lt;item sessionId=&quot;CodeImg1&quot;&gt;</p>
            <p>      &lt;char&gt;我是你的好人吗不知道啊就上海北京中国纽约&lt;/char&gt;</p>
            <p>      &lt;length&gt;6&lt;/length&gt;</p>
            <p>      &lt;showMode&gt;2&lt;/showMode&gt;</p>
            <p>      &lt;noiseLineNumber&gt;2&lt;/noiseLineNumber&gt;</p>
            <p>      &lt;noiseLineWidth&gt;10&lt;/noiseLineWidth&gt;</p>
            <p>      &lt;noiseLineOffsetX&gt;5&lt;/noiseLineOffsetX&gt;</p>
            <p>      &lt;noiseRectangleNumber&gt;0&lt;/noiseRectangleNumber&gt;</p>
            <p>      &lt;noiseDotNumber&gt;200&lt;/noiseDotNumber&gt;</p>
            <p>      &lt;fontName&gt;Arial,Tahoma,Georgia,courier new&lt;/fontName&gt;</p>
            <p>      &lt;fontSize&gt;14&lt;/fontSize&gt;</p>
            <p>      &lt;fontColor&gt;133FA8,999999,CCCC00,FF0000&lt;/fontColor&gt;</p>
            <p>      &lt;backgroundColor&gt;EEEEEE&lt;/backgroundColor&gt;</p>
            <p>      &lt;imgWidth&gt;120&lt;/imgWidth&gt;</p>
            <p>      &lt;imgHeigth&gt;40&lt;/imgHeigth&gt;</p>
            <p>      &lt;showFontSpace&gt;2&lt;/showFontSpace&gt;</p>
            <p>      &lt;showFontLeftInit&gt;2&lt;/showFontLeftInit&gt;</p>
            <p>      &lt;showFontLeftRun&gt;9&lt;/showFontLeftRun&gt;</p>
            <p>      &lt;showFontTopRunMin&gt;-3&lt;/showFontTopRunMin&gt;</p>
            <p>      &lt;showFontTopRunMax&gt;16&lt;/showFontTopRunMax&gt;</p>
            <p>    &lt;/item&gt;</p>
            <p>  &lt;/validateCodeImg&gt;</p>
            <p>&lt;/Data4Net&gt;</p>
            <p></p>
            <p>配置说明 1.0版本，废弃，不建议使用：</p>
            <p>web.config - appSettings</p>
            <p>&lt;add key="Data4NetValidateCodeIsOpen" value="1"/&gt; 0关闭,Others打开</p>
            <p>&lt;add key="Data4NetValidateCodeChar" value="0123456789"/&gt; 0123456789|我是你的好人吗不知道啊就上海北京中国纽约</p>
            <p>&lt;add key="Data4NetValidateCodeLength" value="6"/&gt;</p>
            <p>&lt;add key="Data4NetValidateCodeShowMode" value="3"/&gt; 1普通,2噪音线,3噪音线扭曲</p>
            <p>&lt;add key="Data4NetValidateCodeNoiseLineNumber" value="1"/&gt; 1,2,3</p>
            <p>&lt;add key="Data4NetValidateCodeNoiseLineWidth" value="10"/&gt; 10,20,30</p>
            <p>&lt;add key="Data4NetValidateCodeNoiseLineOffsetX" value="1"/&gt; 噪音曲线X轴偏移量,x=img.width/offsetX,其中offset就是该配置的值:1(default),5,6</p>
            <p>&lt;add key="Data4NetValidateCodeNoiseRectangleNumber" value="0"/&gt; 10,20,30</p>
            <p>&lt;add key="Data4NetValidateCodeNoiseDotNumber" value="0"/&gt; 10,20,30</p>
            <p>&lt;add key="Data4NetValidateCodeFontName" value="Tahoma"/&gt; Arial,Tahoma,Georgia,courier new</p>
            <p>&lt;add key="Data4NetValidateCodeFontSize" value="14"/&gt;</p>
            <p>&lt;add key="Data4NetValidateCodeFontColor" value="133FA8"/&gt; 133FA8,999999</p>
            <p>&lt;add key="Data4NetValidateCodeBackgroundColor" value="EEEEEE"/&gt; EEEEEE,CCCCCC</p>
            <p>&lt;add key="Data4NetValidateCodeImgWidth" value="100"/&gt;</p>
            <p>&lt;add key="Data4NetValidateCodeImgHeigth" value="40"/&gt;</p>
            <p>&lt;add key="Data4NetValidateCodeShowFontSpace" value="2"/&gt; 字体间隔</p>
            <p>&lt;add key="Data4NetValidateCodeShowFontLeftInit" value="2"/&gt; 字体左右漂移初始值</p>
            <p>&lt;add key="Data4NetValidateCodeShowFontLeftRun" value="9"/&gt; 字体左右漂移随机值</p>
            <p>&lt;add key="Data4NetValidateCodeShowFontTopRunMin" value="-3"/&gt; 字体上下漂移随机最小值</p>
            <p>&lt;add key="Data4NetValidateCodeShowFontTopRunMax" value="5"/&gt; 字体上下漂移随机最大值</p>
            <p>&lt;add key="Data4NetValidateCodeSessionID" value="Code"/&gt; Code|Code1</p>
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg.IsOpen">
            <summary>
            打开状态, 如果关闭则验证码图片不显示且验证函数都返回True
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg.CodeImgDataList">
            <summary>
            具体配置信息
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.GetColors(System.String)">
            <summary>
            Get colors
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.GetColor(System.String)">
            <summary>
            Get color
            </summary>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Override the ProcessRequest property.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg.IsReusable">
            <summary>
            Override the IsReusable property.
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.CreateValidateCodeImg(System.Web.HttpContext)">
            <summary>
            Create validate code image on web page
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.RndChar(System.String,System.Int32)">
            <summary>
            产生指定长度的由数字和字符组成的随机字符串
            </summary>
            <param name="codeChar">设定返回随机字符串所包含哪些字符</param>
            <param name="codeNum">设定返回随机字符串的位数</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片。函数可以迭加使用，以获得不同方式不同程度的效果
            </summary>
            <param name="srcBmp"></param>
            <param name="bXDir">扭曲方式</param>
            <param name="dMultValue">波形的幅度倍数</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeHelper">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeHelper.CheckValidateCode(System.String)">
            <summary>
            检查验证码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeHelper.CheckValidateCode(System.Int32,System.String,System.Boolean)">
            <summary>
            检查验证码
            </summary>
            <param name="num"></param>
            <param name="code"></param>
            <param name="isToLower"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeImgData">
            <summary>
            验证码配置数据类
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.Char">
            <summary>
            随即出现字符集合
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.Length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowMode">
            <summary>
            显示模式
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.NoiseLineNumber">
            <summary>
            噪音线数量
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.NoiseLineWidth">
            <summary>
            噪音线宽度
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.NoiseLineOffsetX">
            <summary>
            噪音线坐标
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.NoiseRectangleNumber">
            <summary>
            噪音矩阵数量
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.NoiseDotNumber">
            <summary>
            噪音点像素数量
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.FontName">
            <summary>
            字体列表集合，配置文件中逗号分隔
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.FontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.FontColor">
            <summary>
            字体颜色集合，配置文件中逗号分隔
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.BackgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ImgWidth">
            <summary>
            图片宽度
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ImgHeigth">
            <summary>
            图片高度
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowFontSpace">
            <summary>
            字体间距
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowFontLeftInit">
            <summary>
            字体左边间距
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowFontLeftRun">
            <summary>
            字体左边随即开始距离
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowFontTopRunMin">
            <summary>
            字体上部随即最小距离
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImgData.ShowFontTopRunMax">
            <summary>
            字体上部随即最大距离
            </summary>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeImg2">
            <summary>
            验证码图片生成类 ValidateCodeImg2 （仅做代码参考，请勿使用！）
            <p></p>    
            1）	生成验证码图片（见ValidateCodeImg.aspx文件），用户请求此aspx文件时会返回图片。
            <p>&lt;%@ Import Namespace=&quot;Data4Net.Web&quot; %&gt;</p>
            <p>&lt;%         </p>
            <p>    if (ValidateCodeImg2._ConfigData == null)</p>
            <p>    {</p>
            <p>        ValidateCodeImg2._ConfigData = new ValidateCodeImg2.ValidateCodeImg2Config();</p>
            <p>        //最重要的四个参数</p>
            <p>        ValidateCodeImg2._ConfigData.CodeShowMode = 2;           //1：只显示文字  2：显示干扰点和干扰线 3：显示干扰点，干扰线并扭曲文字</p>
            <p>        ValidateCodeImg2._ConfigData.CodeShowFontSpace = -1;     //字符之间的间隔距离，间隔距离越小，用户和自动识别程序的识别难度都越高</p>
            <p>        ValidateCodeImg2._ConfigData.CodeScanPixLeft = 1;        //粘连时水平方向每次扫描多少个像素点，可选1,2,3,每次扫描点越多，性能越好，但粘连的精度会降低</p>
            <p>        ValidateCodeImg2._ConfigData.CodeScanPixTop = 1;         //粘连时垂直方向每次扫描多少个像素点，同上，精度越低，用户和自动识别程序的识别难度都越高</p>
            <p></p>
            <p>        ValidateCodeImg2._ConfigData.PI = 3.14159265358979;</p>
            <p>        ValidateCodeImg2._ConfigData.PI2 = 6.28318530717959;</p>
            <p></p>
            <p>        ValidateCodeImg2._ConfigData.CodeChar = &quot;2345689ABCDEFGHKPQRSUWXYZ&quot;;     //建议把一些不容易识别的字符去掉，比如0和o,1,i,7等;</p>
            <p>        ValidateCodeImg2._ConfigData.CodeLength = 6;                             //验证码字符数量</p>
            <p></p>
            <p>        ValidateCodeImg2._ConfigData.CodeNoiseLineNumber = 0;            //干扰线数量</p>
            <p>        ValidateCodeImg2._ConfigData.CodeNoiseLineWidth = 20;            //干扰线宽度，20-30比较合适</p>
            <p>        ValidateCodeImg2._ConfigData.CodeNoiseRectangleNumber = 15;      //干扰矩形数量</p>
            <p>        ValidateCodeImg2._ConfigData.CodeNoiseDotNumber = 5;             //干扰点数量</p>
            <p></p>
            <p>        //Font Name, 支持多个用,分割, 如Tahoma,Arial</p>
            <p>        ValidateCodeImg2._ConfigData.CodeFontName = &quot;Arial,Arial Black,TahomaAgency FB,Tahoma,Book Antiqua&quot;; //支持的字体，可根据安装了的字体进行配置，但每添加一种字体进来的时候需要单独测试一下字体的效果</p>
            <p>        //Font Size</p>
            <p>        ValidateCodeImg2._ConfigData.CodeFontSize = 27;                                      //字体大小，这儿只是基数，在这个大小的基础上还会增加一个随机值</p>
            <p>        ValidateCodeImg2._ConfigData.CodeFontColor = &quot;133FA8,133EA8,233EA8,999999,499699&quot;;   //颜色对安全性没有太大影响，主要考虑美观方面</p>
            <p>        //Background Color</p>
            <p>        ValidateCodeImg2._ConfigData.CodeBackgroundColor = &quot;EEEEEE&quot;;                         //背景色</p>
            <p></p>
            <p>        //Img Width</p>
            <p>        ValidateCodeImg2._ConfigData.ImgWidth = 150;     //可配合_CodeLength和字体大小来做相应改变，修改大小后同时记得修改引用的地方</p>
            <p>        //Img Heigth</p>
            <p>        ValidateCodeImg2._ConfigData.ImgHeigth = 50;     //建议50左右，不要太小，否则很难显示清楚旋转后的文字</p>
            <p></p>
            <p>        //Show Font Position</p>
            <p>        ValidateCodeImg2._ConfigData.CodeShowFontLeftInit = 2;   //左边距</p>
            <p>        ValidateCodeImg2._ConfigData.CodeShowFontTop = 1;        //右边距</p>
            <p></p>
            <p>        ValidateCodeImg2._ConfigData.CodeFontSizeRandScope = 3;  //字体大小随机变化的范围，和_CodeFontSize配合使用</p>
            <p>        ValidateCodeImg2._ConfigData.CodeMaxTurnAngle = 10;      //随机旋转最大角度</p>
            <p>        ValidateCodeImg2._ConfigData.CodeFontRealSpace = 0;      //字体之间的粘连距离，建议取-1或者0，-1表示充分粘连，安全性更高，同时用户识别也更加费劲一些</p>
            <p></p>
            <p>        // Session ID</p>
            <p>        ValidateCodeImg2._ConfigData.CodeSessionID = &quot;ValidateCodeSessionID&quot;;</p>
            <p>    }</p>
            <p>    </p>
            <p>    ValidateCodeImg2 p = new ValidateCodeImg2();</p>
            <p>    p.ProcessRequest(HttpContext.Current);   </p>
            <p>%&gt;</p>
            <p></p>    
            2）	在Html中添加对该图片的引用
            <p>用src属性引用图片即可，类似于引用普通图片（见Default.aspx）：</p>
            <p>&lt;img src=&quot;./ValidateCodeImg.aspx&quot;&gt;</p>
            <p></p>    
            3）	验证用户输入的验证码是否正确
            <p>Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Ex.CheckValidateCode("123456");</p>
            <p></p>
            </summary>
            <remarks>
            _CodeShowMode可以控制显示的复杂度，1最容易，2中等，3最难，3对性能要求较高，建议1或2
            _CodeShowFontSpace可以控制字符间距，越小字符连接越紧密，自动程序分割更加困难，同时人眼识别难度也会增加
            其他参数项见下面的注释说明
            </remarks>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Data4Net.Web.ValidateCodeImg2._ConfigData">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.GetColors(System.String)">
            <summary>
            Get colors
            </summary>
            <param name="colors"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.GetColor(System.String)">
            <summary>
            Get color
            </summary>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Override the ProcessRequest property.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.IsReusable">
            <summary>
            Override the IsReusable property.
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.CreateValidateCodeImg(System.Web.HttpContext)">
            <summary>
            Create validate code image on web page
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.RndChar(System.String,System.Int32)">
            <summary>
            产生指定长度的由数字和字符组成的随机字符串
            </summary>
            <param name="codeChar">设定返回随机字符串所包含哪些字符</param>
            <param name="codeNum">设定返回随机字符串的位数</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片。函数可以迭加使用，以获得不同方式不同程度的效果
            </summary>
            <param name="srcBmp"></param>
            <param name="bXDir">扭曲方式</param>
            <param name="dMultValue">波形的幅度倍数</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config">
            <summary>
            配置类
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeShowMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeShowFontSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeScanPixLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeScanPixTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.PI">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.PI2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeChar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeNoiseLineNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeNoiseLineWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeNoiseRectangleNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeNoiseDotNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeFontName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeFontSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeFontColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeBackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.ImgWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.ImgHeigth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeShowFontLeftInit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeShowFontTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeFontSizeRandScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeMaxTurnAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeFontRealSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Config.CodeSessionID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Ex">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Ex.CheckValidateCode(System.String)">
            <summary>
            检查验证码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.ValidateCodeImg2.ValidateCodeImg2Ex.CheckValidateCode(System.String,System.Boolean)">
            <summary>
            检查验证码
            </summary>
            <param name="code"></param>
            <param name="isToLower"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Web.WebControlHelper">
            <summary>
            Web控件帮助类
            </summary>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.SetEnterControl(System.Web.UI.Control)">
            <summary> 
            Setting Page Enter Button
            </summary> 
            <param name="Ctrl">Enter Button Name</param> 
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Show confirm message on web control
            </summary>
            <param name="wc"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GetCheckBoxListSelect(System.Web.UI.WebControls.CheckBoxList,System.String)">
            <summary>
            CheckBoxList取值
            </summary>
            <param name="cbl"></param>
            <param name="splitString">例如: ,</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.SetCheckBoxListSelect(System.Web.UI.WebControls.CheckBoxList,System.String,System.String)">
            <summary>
            CheckBoxList勾选上
            </summary>
            <param name="cbl"></param>
            <param name="selectValues">例如: a,b,c</param>
            <param name="splitString">例如: ,</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.SelectCheckBoxAll(System.Web.UI.WebControls.GridView,System.String,System.String)">
            <summary>
            选择GridView中所有的CheckBox
            </summary>
            <param name="gv">GridView控件</param>
            <param name="headerCheckBoxControlName">标题栏CheckBox控件名字,即ID</param>
            <param name="checkBoxControlName">其他行CheckBox控件名字,即ID</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GetSelectIds(System.Web.UI.WebControls.GridView,System.String,System.String)">
            <summary>
            得到GridView中Checkbox选中行的ID
            </summary>
            <param name="gv">GridView控件</param>
            <param name="checkBoxControlName">CheckBox控件名字,即ID</param>
            <param name="hiddenFieldIDControlName">HiddenField ID 控件名字,即ID</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GroupRows(System.Web.UI.WebControls.GridView,System.Int32)">
            <summary>
            合并GridView中某列相同信息的行（单元格） 
            </summary>
            <param name="gv">GridView控件</param>
            <param name="cellNum">第几列,0开始</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GroupRows(System.Web.UI.WebControls.GridView,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并GridView中某列相同信息的行（单元格） 
            </summary>
            <param name="gv">GridView控件</param>
            <param name="cellNum">第几列,0开始</param>
            <param name="startRow">第几行开始,0开始</param>
            <param name="endRow">第几行结束,0开始</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.SelectCheckBoxAll(System.Web.UI.WebControls.DataGrid,System.String,System.String)">
            <summary>
            选择DataGrid中所有的CheckBox
            </summary>
            <param name="dg">DataGrid控件</param>
            <param name="headerCheckBoxControlName">标题栏CheckBox控件名字,即ID</param>
            <param name="checkBoxControlName">其他行CheckBox控件名字,即ID</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GetSelectIds(System.Web.UI.WebControls.DataGrid,System.String,System.String)">
            <summary>
            得到DataGrid中Checkbox选中行的ID
            </summary>
            <param name="dg">DataGrid控件</param>
            <param name="checkBoxControlName">CheckBox控件名字,即ID</param>
            <param name="hiddenFieldIDControlName">HiddenField ID 控件名字,即ID</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GroupRows(System.Web.UI.WebControls.DataGrid,System.Int32)">
            <summary>
            合并DataGrid中某列相同信息的行（单元格） 
            </summary>
            <param name="dg">DataGrid控件</param>
            <param name="cellNum">第几列,0开始</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GroupRows(System.Web.UI.WebControls.DataGrid,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并DataGrid中某列相同信息的行（单元格） 
            </summary>
            <param name="dg">DataGrid控件</param>
            <param name="cellNum">第几列,0开始</param>
            <param name="startRow">第几行开始,0开始</param>
            <param name="endRow">第几行结束,0开始</param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.GetHtml(System.Web.UI.Control)">
            <summary>
            Get HTML by controls
            <br />
            <br />
            当在GridView中使用，需要做如下设置<br />
            <br />
            1. 首先重载VerifyRenderingInServerForm方法<br />
            public override void VerifyRenderingInServerForm(Control control) {<br />
            //当使用GridView时，不能使用<br />
            //base.VerifyRenderingInServerForm(control); }<br />
            <br />
            2. 设置EnableEventValidation属性<br />
            public override bool EnableEventValidation {<br />
            get {<br />
            //当使用GridView时，return false<br />
            //return base.EnableEventValidation;<br />
            return false; }<br />
            set { base.EnableEventValidation = value; }<br />
            }<br />
            或<br />
            在web.config中修改&lt;pages enableEventValidation="false"&gt;&lt;/pages&gt;<br />
            或<br />
            &lt;%@ Page Language="C#" EnableEventValidation="false" AutoEventWireup="true" CodeFile="ExportGridView.aspx.cs" Inherits="ExportGridView" %&gt;<br />
            
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.SetDropDownListSelectedByValue(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            设置DropDownList的SelectValue
            </summary>
            <param name="ddl"></param>
            <param name="selectValue"></param>
        </member>
        <member name="M:Data4Net.Web.WebControlHelper.AddDropDownListValue(System.Web.UI.WebControls.DropDownList,System.Data.DataTable,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            DropDownList中显示无限级树形结构
            ex: Data4Net.Web.WebControlHelper.AddDropDownListValue(ddl, LoadAccessDataTable(), "0", 1, "ParentIDX", "IDX", "Name", "　", "|--");
            </summary>
            <param name="ddl">DropDownList控件</param>
            <param name="dtData">DataTable形式数据</param>
            <param name="parentId">父ID</param>
            <param name="deep">深度, 根节点为0</param>
            <param name="parentIdFieldName">父ID字段名</param>
            <param name="dirIdFieldName">ID字段名</param>
            <param name="dirNameFieldName">Name字段名</param>
            <param name="padingStr1">树形深度前缀显示字符1</param>
            <param name="padingStr2">树形深度前缀显示字符2</param>
        </member>
        <member name="T:Data4Net.Web.WebHelper">
            <summary>
            Web类
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.Url">
            <summary>
            得到当前原始Url
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.UrlOriginal">
            <summary>
            得到原始的URL地址
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.AbsoluteUri">
            <summary>
            得到当前绝对的Uri
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.RawUrl">
            <summary>
            得到当前原始Url
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.RawUrlWithAll">
            <summary>
            得到当前原始Url, 完整版, 包含域名端口等信息
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.RawUrlQueryString">
            <summary>
            通过当前原始Url得到原始QueryString
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.RawUrlQuestionQueryString">
            <summary>
            通过当前原始Url得到原始QueryString, 如不为空, 则开头包含"?"符号
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.UrlReferrer">
            <summary>
            得到上一次请求Url
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.UrlReferrerOriginal">
            <summary>
            得到上一次请求原始Url
            </summary>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetServerVariables(System.String)">
            <summary>
            Get ServerVariables value by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Web.WebHelper.HttpReferer">
            <summary>
            Get ServerVariables HTTP_REFERER
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.ScriptName">
            <summary>
            得到页面文件地址,即虚拟地址
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.HttpUserAgent">
            <summary>
            Get ServerVariables HTTP_USER_AGENT
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.HttpUaCpu">
            <summary>
            Get ServerVariables HTTP_UA_CPU
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.RemoteAddr">
            <summary>
            得到客户IP地址, if null or object is null, return string.Empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.LocalAddr">
            <summary>
            得到服务器IP地址, if null or object is null, return string.Empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.XForwardedAddr">
            <summary>
            得到X_FORWARDED IP地址, if null or object is null, return string.Empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.SessionID">
            <summary>
            SessionID
            </summary>
        </member>
        <member name="M:Data4Net.Web.WebHelper.SessionIDFromCookies">
            <summary>
            Get SessionID from cookies, default key="ASP.NET_SessionId"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.SessionIDFromCookies(System.String)">
            <summary>
            Get SessionID from cookies, ex: key="ASP.NET_SessionId"
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Web.WebHelper.SessionIDStrong">
            <summary>
            Get SessionID frome .net class, if it is empty or null, get it from cookies
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.MainUrlApplicationPath">
            <summary>
            得到本地, 如:
            http://www.microsoft.com
            https://www.microsoft.com:8080
            http://www.microsoft.com:8080/Web
            如果current不是web系统返回empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.MainUrl">
            <summary>
            得到本地 https://www.microsoft.com:8080, 如果current不是web系统返回empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.Https">
            <summary>
            得到 http:// or https://, 如果current不是web系统返回empty
            </summary>
        </member>
        <member name="P:Data4Net.Web.WebHelper.ServerName">
            <summary>
            得到server name, 如www.microsoft.com, 如果current不是web系统返回empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:Data4Net.Web.WebHelper.ServerPort">
            <summary>
            得到端口号, 如:8080 :80 :443, 如果current不是web系统返回empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.ResponseFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            输出文件
            </summary>
            <param name="fileContent">文件内容</param>
            <param name="fileName">文件名字，如2007-07-28.doc, 2007-07-28.xls, Pv.txt等</param>
            <param name="fileType">文件类型<br/>
            可以为application/ms-excel application/ms-word application/ms-txt application/ms-html 或其他浏览器可直接支持文档<br/>
            "text/plain"用于作为文本内容返回而不是已解释的 HTML 语句<br/>
            <br/>
            如果含有中文，并在Excel中打开会乱码，请把 "&lt;meta content='text/html; charset=utf-8' http-epuiv='content-type'/&gt;" + fileContent 之前
            </param>
            <param name="isAttachment">是否已附件形式下载</param>
        </member>
        <member name="M:Data4Net.Web.WebHelper.CreateExcel(System.Data.DataTable,System.String)">
            <summary>
            导出excel文件，通过DataTable
            </summary>
            <param name="dt">
            dt.Columns[0].Caption = "序列"<br />
            dt.Columns[1].Caption = "名字|style='vnd.ms-excel.numberformat:@'"<br />
            <br />
            文本格式 style='vnd.ms-excel.numberformat:@'<br />
            </param>
            <param name="fileName"></param>
        </member>
        <member name="M:Data4Net.Web.WebHelper.IsSafeSqlAllRequest">
            <summary>
            处理用户提交的所有请求(Web)
            </summary>
            <returns>是否安全</returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.IsSafeSqlAllRequest(System.String)">
            <summary>
            处理用户提交的所有请求(Web)
            </summary>
            <param name="lawlessesSql">自定义不安全的SQL关键字</param>
            <returns>是否安全</returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestQueryToLog(System.String,System.String)">
            <summary>
            按照一定格式得到Request.QueryString传入参数名称和值
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestQueryToLog(System.String,System.String,System.Boolean)">
            <summary>
            按照一定格式得到Request.QueryString传入参数名称和值
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestFormToLog(System.String,System.String)">
            <summary>
            按照一定格式得到Request.Form传入参数名称和值
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestFormToLog(System.String,System.String,System.Boolean)">
            <summary>
            按照一定格式得到Request.Form传入参数名称和值
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestQueryToLog(System.String,System.String,System.String)">
            <summary>
            按照一定格式得到Request.QueryString传入参数名称和值, 自定义encode
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestQueryToLog(System.String,System.String,System.String,System.Boolean)">
            <summary>
            按照一定格式得到Request.QueryString传入参数名称和值, 自定义encode
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="encode"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestFormToLog(System.String,System.String,System.String)">
            <summary>
            按照一定格式得到Request.Form传入参数名称和值, 自定义encode
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.GetAllRequestFormToLog(System.String,System.String,System.String,System.Boolean)">
            <summary>
            按照一定格式得到Request.Form传入参数名称和值, 自定义encode
            </summary>
            <param name="logFormat">如[{0}]{1}, [{0}={1}], 说明{0} Key, {1} Value</param>
            <param name="logSplit"></param>
            <param name="encode"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.Web.WebHelper.ResponseAddHeader_P3P">
            <summary>
            解决跨域Session丢失问题 P3P : CP=CAO PSA OUR
            </summary>
        </member>
        <member name="M:Data4Net.Web.WebHelper.ResponseAddHeader_P3P2">
            <summary>
            解决跨域Session丢失问题 P3P : CP="NOI ADM DEV PSAi COM NAV OUR OTR STP IND DEM"
            </summary>
        </member>
        <member name="M:Data4Net.Web.WebHelper.RedirectJs(System.String)">
            <summary>
            Redirect by javascript
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Data4Net.DPHelper">
            <summary>
            数据处理类（已废弃，不会再有更新，建议使用 DataHelper 类）
            </summary>
        </member>
        <member name="M:Data4Net.DPHelper.IsInt(System.Object)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsInt(System.Object,System.Int32,System.Int32)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsInt(System.Object,System.Int32,System.Int32,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Int
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsLong(System.Object)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsLong(System.Object,System.Int64,System.Int64)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsLong(System.Object,System.Int64,System.Int64,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is Long
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsDate(System.Object)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsDate(System.Object,System.DateTime,System.DateTime)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsDate(System.Object,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            Check object's type is DateTime
            </summary>
            <param name="obj"></param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsBool(System.Object)">
            <summary>
            验证是否是Bool型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsNotNullDataSet(System.Data.DataSet)">
            <summary>
            Check DataSet is not null or Rows.Count is not 0
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsNotNullDataSet(System.Data.DataSet,System.Int32)">
            <summary>
            Check DataSet is not null or Rows.Count is not 0
            </summary>
            <param name="ds">DataSet</param>
            <param name="tableIndex">table index</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.IsNotNullDataTable(System.Data.DataTable)">
            <summary>
            Check DataTable is not null or Rows.Count is not 0
            </summary>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetInt(System.Object)">
            <summary>
            Get Int Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetInt(System.Object,System.Int32)">
            <summary>
            Get Int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetInt(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetInt(System.Object,System.Int32,System.Int32,System.Int32,Data4Net.DpMinMaxMethod)">
            <summary>
            Get Int Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetLong(System.Object)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is 0</returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetLong(System.Object,System.Int64)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetLong(System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetLong(System.Object,System.Int64,System.Int64,System.Int64,Data4Net.DpMinMaxMethod)">
            <summary>
            Get Long Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetDate(System.Object)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <returns>Default value is DateTime min value</returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetDate(System.Object,System.DateTime)">
            <summary>
            Get DateTime Type Value
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetDate(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetDate(System.Object,System.DateTime,System.DateTime,System.DateTime,Data4Net.DpMinMaxMethod)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">Default Value</param>
            <param name="minValue">Min Value</param>
            <param name="maxValue">Max Value</param>
            <param name="dpMinMaxMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetBool(System.Object)">
            <summary>
            得到Bool型
            </summary>
            <param name="obj"></param>
            <returns>默认值为false</returns>
        </member>
        <member name="M:Data4Net.DPHelper.GetBool(System.Object,System.Boolean)">
            <summary>
            得到Bool型
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.FormatShort(System.Object,System.String)">
            <summary>
            Format short
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.FormatInt(System.Object,System.String)">
            <summary>
            Format int
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.FormatLong(System.Object,System.String)">
            <summary>
            Format long
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.DPHelper.FormatDate(System.Object,System.String)">
            <summary>
            Format datetime
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.Sql.SqlDataHelper">
            <summary>
            SqlDataHelper 的摘要说明
            </summary>
        </member>
        <member name="T:Data4Net.Sql.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.DeriveParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Calls the SqlCommandBuilder.DeriveParameters, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The SqlCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the SqlCommand. </param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.GetParameter(System.String,System.Object)">
            <summary>
            Get a SqlParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="value">The value of the specified parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Get a SqlParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="direction">The System.Data.ParameterDirection of the parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.GetParameter(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Get a SqlParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="sourceColumn">The source column of the parameter</param>
            <param name="sourceVersion">The System.Data.DataRowVersion of the parameter</param>
            <returns>A SqlParameter object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(command);
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(command);
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(command);
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(command);
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(SqlCommand command);
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="command">The SqlCommand to execute</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String,Data4Net.Ado.AdoHelper.RowUpdatingHandler,Data4Net.Ado.AdoHelper.RowUpdatedHandler)">
            <summary> 
            Executes the System.Data.SqlClient.SqlCommand for each inserted, updated, or deleted row in the DataSet also implementing RowUpdating and RowUpdated Event Handlers 
            </summary> 
            <remarks> 
            e.g.:  
            SqlRowUpdatingEventHandler rowUpdating = new SqlRowUpdatingEventHandler( OnRowUpdating ); 
            SqlRowUpdatedEventHandler rowUpdated = new SqlRowUpdatedEventHandler( OnRowUpdated ); 
            adoHelper.UpdateDataSet(sqlInsertCommand, sqlDeleteCommand, sqlUpdateCommand, dataSet, "Order", rowUpdating, rowUpdated); 
            </remarks> 
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param> 
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param> 
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param> 
            <param name="dataSet">The DataSet used to update the data source</param> 
            <param name="tableName">The DataTable used to update the data source.</param> 
            <param name="rowUpdating">The AdoHelper.RowUpdatingEventHandler or null</param> 
            <param name="rowUpdated">The AdoHelper.RowUpdatedEventHandler or null</param> 
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.CreateCommand(System.String,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(connenctionString, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.CreateCommand(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(connenctionString, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">A valid SQL string to execute</param>
            <param name="commandType">The CommandType to execute (i.e. StoredProcedure, Text)</param>
            <param name="commandParameters">The SqlParameters to pass to the command</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="commandText">A valid SQL string to execute</param>
            <param name="commandType">The CommandType to execute (i.e. StoredProcedure, Text)</param>
            <param name="commandParameters">The SqlParameters to pass to the command</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on row values.
            </summary>
            <param name="command">The SqlCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on row values.
            </summary>
            <param name="command">The SqlCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The SqlCommand toe execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The SqlCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The SqlCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Data4Net.Sql.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.GetSpParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:Data4Net.Sql.SqlHelperParameterCache.GetSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="T:Data4Net.Sql.SqlParameterHelper">
            <summary>
            SqlParameterHelper 的摘要说明
            </summary>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareInputParameter(System.String,System.Object)">
            <summary>
            声明输入参数,不带类型
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareInputParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            声明输入参数
            </summary>
            <param name="name">参数名称</param>
            <param name="type">参数数据类型</param>
            <param name="value">参数值</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareOutputParameter(System.String)">
            <summary>
            声明输出参数,数据类型为int,数据大小为0
            </summary>
            <param name="name">参数名称</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareOutputParameter(System.String,System.Data.SqlDbType)">
            <summary>
            声明输出参数,数据大小为0
            </summary>
            <param name="name">参数名称</param>
            <param name="type">参数数据类型</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareOutputParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            声明输出参数
            </summary>
            <param name="name">参数名称</param>
            <param name="type">参数数据类型</param>
            <param name="size">数据大小</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareReturnParameter(System.String)">
            <summary>
            声明返回参数
            </summary>
            <param name="name">参数名称</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareParameter(System.String,System.Data.SqlDbType)">
            <summary>
            声明参数
            </summary>
            <param name="name">参数名称</param>
            <param name="type">参数数据类型</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="M:Data4Net.Sql.SqlParameterHelper.DeclareParameter(System.String,System.Object)">
            <summary>
            声明参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <returns>声明好的参数</returns>
        </member>
        <member name="T:Data4Net.MonitorUtility">
            <summary>
            MonitorUtility
            </summary>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt32(System.Collections.Hashtable,Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Hashtable
            </summary>
            <param name="ht"></param>
            <param name="sortType"></param>
            <returns>(string, int)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt32(System.Collections.Generic.Dictionary{System.String,System.Int32},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Dictionary(string, int)
            </summary>
            <param name="dic"></param>
            <param name="sortType"></param>
            <returns>(string, int)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt32(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Int32}},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by List(KeyValuePair(string, int))
            </summary>
            <param name="valueList"></param>
            <param name="sortType"></param>
            <returns>(string, int)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt64(System.Collections.Hashtable,Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Hashtable
            </summary>
            <param name="ht"></param>
            <param name="sortType"></param>
            <returns>(string, long)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt64(System.Collections.Generic.Dictionary{System.String,System.Int64},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Dictionary(string, long)
            </summary>
            <param name="dic"></param>
            <param name="sortType"></param>
            <returns>(string, long)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortInt64(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Int64}},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by List(KeyValuePair(string, long))
            </summary>
            <param name="valueList"></param>
            <param name="sortType"></param>
            <returns>(string, long)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortDouble(System.Collections.Hashtable,Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Hashtable
            </summary>
            <param name="ht"></param>
            <param name="sortType"></param>
            <returns>(string, double)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortDouble(System.Collections.Generic.Dictionary{System.String,System.Double},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by Dictionary(string, double)
            </summary>
            <param name="dic"></param>
            <param name="sortType"></param>
            <returns>(string, double)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetSortDouble(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Double}},Data4Net.SortTypeEnum)">
            <summary>
            得到一个排序过的数据列表, by List(KeyValuePair(string, double))
            </summary>
            <param name="valueList"></param>
            <param name="sortType"></param>
            <returns>(string, double)</returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeStart">
            <summary>
            返回Stopwatch, 并Start()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeStop(System.Diagnostics.Stopwatch)">
            <summary>
            Stopwatch.Stop(), 并返回Milliseconds
            </summary>
            <param name="sw"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeStop(System.Diagnostics.Stopwatch,System.String@)">
            <summary>
            Stopwatch.Stop(), 并返回Milliseconds
            </summary>
            <param name="sw"></param>
            <param name="levelKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeSpan(System.DateTime)">
            <summary>
            得到接口调用时间
            </summary>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeSpan(System.DateTime,System.String@)">
            <summary>
            得到接口调用时间, 并按照规则返回接口性能等级
            </summary>
            <param name="startTime"></param>
            <param name="levelKey"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetRunTimeLevelKey(System.Double)">
            <summary>
            返回针对double时间间隔评级
            
            <p>评级标准 (单位毫秒): </p>
            <p>excellent (0-20) </p>
            <p>good (20-200) </p>
            <p>average (200-500) </p>
            <p>fair (500-1000) </p>
            <p>poor (1000-infinite)</p>
            <p></p>
            <p>ex: equal or lesser than 20 is excellent</p>
            </summary>
            <param name="tms"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetLogsTs(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Double}},System.String)">
            <summary>
            得到通用的耗时日志汇总
            </summary>
            <param name="newline"></param>
            <param name="tsLogs"></param>
            <param name="logName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.MonitorUtility.GetDivide(System.Double,System.Double)">
            <summary>
            得到除法值
            </summary>
            <param name="denominator"></param>
            <param name="numerator"></param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.WeekHelper">
            <summary>
            WeekHelper Class
            </summary>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekOfYear_ZeroToLast(System.DateTime,System.Int32)">
            <summary>
            取指定日期是一年中的第几周
            (把今年开始几天（非7天）算作上一年的最后一周，且返回上一年的这周周几)
            </summary>
            <param name="dt">指定日期</param>
            <param name="weekOfFirstDay">每个星期的开始第一天是星期几 (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekOfYear(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            取指定日期是一年中的第几周 
            </summary>
            <param name="dt">指定日期</param>
            <param name="weekOfFirstDay">每个星期的开始第一天是星期几 (0,Sunday...6,Saturday)</param>
            <param name="isZeroWeek">
            是否把今年开始几天（非7天）算作上一年的最后一周
            true: 今年开始剩余天数算今年第0周
            false: 今年开始剩余天数算今年第1周
            </param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekFirstDayZero(System.DateTime,System.Int32)">
            <summary>
            get first day of week. hour,minute,second is all 0.
            </summary>
            <param name="dt"></param>
            <param name="weekOfFirstDay">first day of week (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekLastDayZero(System.DateTime,System.Int32)">
            <summary>
            get last day of week. hour,minute,second is all 0.
            </summary>
            <param name="dt"></param>
            <param name="weekOfFirstDay">first day of week (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekFirstDay(System.DateTime,System.Int32)">
            <summary>
            get first day of week. hour,minute,second is of input datetime.
            </summary>
            <param name="dt"></param>
            <param name="weekOfFirstDay">first day of week (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekLastDay(System.DateTime,System.Int32)">
            <summary>
            get last day of week. hour,minute,second is of input datetime.
            </summary>
            <param name="dt"></param>
            <param name="weekOfFirstDay">first day of week (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.WeekHelper.GetWeekIndexDay(System.DateTime,System.Int32)">
            <summary>
            get index day of week.
            </summary>
            <param name="dt"></param>
            <param name="weekOfFirstDay">first day of week (0,Sunday...6,Saturday)</param>
            <returns></returns>
        </member>
        <member name="T:Data4Net.XmlHelper">
            <summary>
            Xml Helper Class
            </summary>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleListAttr(Data4Net.XmlTypeEnum,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            得到一个List(KeyValuePair(string, string))
            </summary>
            <param name="xmlType"></param>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey">attrName or &lt;InnerText&gt; or &lt;InnerXml&gt; or &lt;Name&gt;</param>
            <param name="attrNameValue">attrName or &lt;InnerText&gt; or &lt;InnerXml&gt; or &lt;Name&gt;</param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleHashtableAttrByXmlString(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个Hashtable
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleDictionaryAttrByXmlString(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个Directory
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleSortedDictionaryAttrByXmlString(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个SortedDictionary
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleSortedListAttrByXmlString(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个SortedList
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleHashtableAttrByXmlFile(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个Hashtable
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleDictionaryAttrByXmlFile(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个Dictionary
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleSortedDictionaryAttrByXmlFile(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个SortedDictionary
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleSortedListAttrByXmlFile(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到一个SortedList
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="ischild"></param>
            <param name="attrNameKey"></param>
            <param name="attrNameValue"></param>
            <param name="keyIgnoreCase"></param>
            <param name="attrIgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueAttrByXmlString(System.String,System.String,System.String)">
            <summary>
            快速得到一个Xml中Attributes的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueInnerTextByXmlString(System.String,System.String)">
            <summary>
            快速得到一个Xml中InnerText的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueInnerXmlByXmlString(System.String,System.String)">
            <summary>
            快速得到一个Xml中InnerXml的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueAttrByXmlFile(System.String,System.String,System.String)">
            <summary>
            快速得到一个Xml中Attributes的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueInnerTextByXmlFile(System.String,System.String)">
            <summary>
            快速得到一个Xml中InnerText的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.SimpleValueInnerXmlByXmlFile(System.String,System.String)">
            <summary>
            快速得到一个Xml中InnerXml的值
            </summary>
            <param name="xml"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetXmlDocument(System.String)">
            <summary>
            Load xml document
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetXmlAttributes(System.Xml.XmlAttributeCollection,System.String)">
            <summary>
            得到一个 Xml Attributes 中为 name 值
            </summary>
            <param name="xmlattr"></param>
            <param name="attributesName"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetXmlInnerText(System.Xml.XmlNodeList,System.String)">
            <summary>
            得到一个 Xml Node 的 InnerText
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetDataTable(System.String,System.String)">
            <summary>
            Get a DataTable
            </summary>
            <param name="xml">Xml file path or xml string</param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetDataTable(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a DataTable
            </summary>
            <param name="xmlDoc">XmlDocument</param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetDataSet(System.String,System.String)">
            <summary>
            Get a DataSet
            </summary>
            <param name="xml">Xml file path or xml string</param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetDataSet(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a DataSet
            </summary>
            <param name="xmlDoc"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Data4Net.XmlHelper.GetStringByXmlSerializer(System.Object)">
            <summary>
            GetStringByXmlSerializer 通过对Object序列化得到string类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
    </members>
</doc>
